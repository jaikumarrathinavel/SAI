#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def sai_thrift_create_acl_table(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_acl_table(self, acl_table_oid):
        """
        Parameters:
         - acl_table_oid

        """
        pass

    def sai_thrift_set_acl_table_attribute(self, acl_table_oid, attr):
        """
        Parameters:
         - acl_table_oid
         - attr

        """
        pass

    def sai_thrift_get_acl_table_attribute(self, acl_table_oid, attr_list):
        """
        Parameters:
         - acl_table_oid
         - attr_list

        """
        pass

    def sai_thrift_create_acl_entry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_acl_entry(self, acl_entry_oid):
        """
        Parameters:
         - acl_entry_oid

        """
        pass

    def sai_thrift_set_acl_entry_attribute(self, acl_entry_oid, attr):
        """
        Parameters:
         - acl_entry_oid
         - attr

        """
        pass

    def sai_thrift_get_acl_entry_attribute(self, acl_entry_oid, attr_list):
        """
        Parameters:
         - acl_entry_oid
         - attr_list

        """
        pass

    def sai_thrift_create_acl_counter(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_acl_counter(self, acl_counter_oid):
        """
        Parameters:
         - acl_counter_oid

        """
        pass

    def sai_thrift_set_acl_counter_attribute(self, acl_counter_oid, attr):
        """
        Parameters:
         - acl_counter_oid
         - attr

        """
        pass

    def sai_thrift_get_acl_counter_attribute(self, acl_counter_oid, attr_list):
        """
        Parameters:
         - acl_counter_oid
         - attr_list

        """
        pass

    def sai_thrift_create_acl_range(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_acl_range(self, acl_range_oid):
        """
        Parameters:
         - acl_range_oid

        """
        pass

    def sai_thrift_set_acl_range_attribute(self, acl_range_oid, attr):
        """
        Parameters:
         - acl_range_oid
         - attr

        """
        pass

    def sai_thrift_get_acl_range_attribute(self, acl_range_oid, attr_list):
        """
        Parameters:
         - acl_range_oid
         - attr_list

        """
        pass

    def sai_thrift_create_acl_table_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_acl_table_group(self, acl_table_group_oid):
        """
        Parameters:
         - acl_table_group_oid

        """
        pass

    def sai_thrift_set_acl_table_group_attribute(self, acl_table_group_oid, attr):
        """
        Parameters:
         - acl_table_group_oid
         - attr

        """
        pass

    def sai_thrift_get_acl_table_group_attribute(self, acl_table_group_oid, attr_list):
        """
        Parameters:
         - acl_table_group_oid
         - attr_list

        """
        pass

    def sai_thrift_create_acl_table_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_acl_table_group_member(self, acl_table_group_member_oid):
        """
        Parameters:
         - acl_table_group_member_oid

        """
        pass

    def sai_thrift_set_acl_table_group_member_attribute(self, acl_table_group_member_oid, attr):
        """
        Parameters:
         - acl_table_group_member_oid
         - attr

        """
        pass

    def sai_thrift_get_acl_table_group_member_attribute(self, acl_table_group_member_oid, attr_list):
        """
        Parameters:
         - acl_table_group_member_oid
         - attr_list

        """
        pass

    def sai_thrift_create_bfd_session(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_bfd_session(self, bfd_session_oid):
        """
        Parameters:
         - bfd_session_oid

        """
        pass

    def sai_thrift_set_bfd_session_attribute(self, bfd_session_oid, attr):
        """
        Parameters:
         - bfd_session_oid
         - attr

        """
        pass

    def sai_thrift_get_bfd_session_attribute(self, bfd_session_oid, attr_list):
        """
        Parameters:
         - bfd_session_oid
         - attr_list

        """
        pass

    def sai_thrift_get_bfd_session_stats(self, bfd_session_oid, counter_ids):
        """
        Parameters:
         - bfd_session_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_bfd_session_stats_ext(self, bfd_session_oid, counter_ids, mode):
        """
        Parameters:
         - bfd_session_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_bfd_session_stats(self, bfd_session_oid, counter_ids):
        """
        Parameters:
         - bfd_session_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_bridge_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_bridge_port(self, bridge_port_oid):
        """
        Parameters:
         - bridge_port_oid

        """
        pass

    def sai_thrift_set_bridge_port_attribute(self, bridge_port_oid, attr):
        """
        Parameters:
         - bridge_port_oid
         - attr

        """
        pass

    def sai_thrift_get_bridge_port_attribute(self, bridge_port_oid, attr_list):
        """
        Parameters:
         - bridge_port_oid
         - attr_list

        """
        pass

    def sai_thrift_get_bridge_port_stats(self, bridge_port_oid, counter_ids):
        """
        Parameters:
         - bridge_port_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_bridge_port_stats_ext(self, bridge_port_oid, counter_ids, mode):
        """
        Parameters:
         - bridge_port_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_bridge_port_stats(self, bridge_port_oid, counter_ids):
        """
        Parameters:
         - bridge_port_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_bridge(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_bridge(self, bridge_oid):
        """
        Parameters:
         - bridge_oid

        """
        pass

    def sai_thrift_set_bridge_attribute(self, bridge_oid, attr):
        """
        Parameters:
         - bridge_oid
         - attr

        """
        pass

    def sai_thrift_get_bridge_attribute(self, bridge_oid, attr_list):
        """
        Parameters:
         - bridge_oid
         - attr_list

        """
        pass

    def sai_thrift_get_bridge_stats(self, bridge_oid, counter_ids):
        """
        Parameters:
         - bridge_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_bridge_stats_ext(self, bridge_oid, counter_ids, mode):
        """
        Parameters:
         - bridge_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_bridge_stats(self, bridge_oid, counter_ids):
        """
        Parameters:
         - bridge_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_ingress_priority_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_ingress_priority_group(self, ingress_priority_group_oid):
        """
        Parameters:
         - ingress_priority_group_oid

        """
        pass

    def sai_thrift_set_ingress_priority_group_attribute(self, ingress_priority_group_oid, attr):
        """
        Parameters:
         - ingress_priority_group_oid
         - attr

        """
        pass

    def sai_thrift_get_ingress_priority_group_attribute(self, ingress_priority_group_oid, attr_list):
        """
        Parameters:
         - ingress_priority_group_oid
         - attr_list

        """
        pass

    def sai_thrift_get_ingress_priority_group_stats(self, ingress_priority_group_oid, counter_ids):
        """
        Parameters:
         - ingress_priority_group_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_ingress_priority_group_stats_ext(self, ingress_priority_group_oid, counter_ids, mode):
        """
        Parameters:
         - ingress_priority_group_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_ingress_priority_group_stats(self, ingress_priority_group_oid, counter_ids):
        """
        Parameters:
         - ingress_priority_group_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_buffer_pool(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_buffer_pool(self, buffer_pool_oid):
        """
        Parameters:
         - buffer_pool_oid

        """
        pass

    def sai_thrift_set_buffer_pool_attribute(self, buffer_pool_oid, attr):
        """
        Parameters:
         - buffer_pool_oid
         - attr

        """
        pass

    def sai_thrift_get_buffer_pool_attribute(self, buffer_pool_oid, attr_list):
        """
        Parameters:
         - buffer_pool_oid
         - attr_list

        """
        pass

    def sai_thrift_get_buffer_pool_stats(self, buffer_pool_oid, counter_ids):
        """
        Parameters:
         - buffer_pool_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_buffer_pool_stats_ext(self, buffer_pool_oid, counter_ids, mode):
        """
        Parameters:
         - buffer_pool_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_buffer_pool_stats(self, buffer_pool_oid, counter_ids):
        """
        Parameters:
         - buffer_pool_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_buffer_profile(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_buffer_profile(self, buffer_profile_oid):
        """
        Parameters:
         - buffer_profile_oid

        """
        pass

    def sai_thrift_set_buffer_profile_attribute(self, buffer_profile_oid, attr):
        """
        Parameters:
         - buffer_profile_oid
         - attr

        """
        pass

    def sai_thrift_get_buffer_profile_attribute(self, buffer_profile_oid, attr_list):
        """
        Parameters:
         - buffer_profile_oid
         - attr_list

        """
        pass

    def sai_thrift_create_counter(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_counter(self, counter_oid):
        """
        Parameters:
         - counter_oid

        """
        pass

    def sai_thrift_set_counter_attribute(self, counter_oid, attr):
        """
        Parameters:
         - counter_oid
         - attr

        """
        pass

    def sai_thrift_get_counter_attribute(self, counter_oid, attr_list):
        """
        Parameters:
         - counter_oid
         - attr_list

        """
        pass

    def sai_thrift_get_counter_stats(self, counter_oid, counter_ids):
        """
        Parameters:
         - counter_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_counter_stats_ext(self, counter_oid, counter_ids, mode):
        """
        Parameters:
         - counter_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_counter_stats(self, counter_oid, counter_ids):
        """
        Parameters:
         - counter_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_debug_counter(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_debug_counter(self, debug_counter_oid):
        """
        Parameters:
         - debug_counter_oid

        """
        pass

    def sai_thrift_set_debug_counter_attribute(self, debug_counter_oid, attr):
        """
        Parameters:
         - debug_counter_oid
         - attr

        """
        pass

    def sai_thrift_get_debug_counter_attribute(self, debug_counter_oid, attr_list):
        """
        Parameters:
         - debug_counter_oid
         - attr_list

        """
        pass

    def sai_thrift_create_dtel(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_dtel(self, dtel_oid):
        """
        Parameters:
         - dtel_oid

        """
        pass

    def sai_thrift_set_dtel_attribute(self, dtel_oid, attr):
        """
        Parameters:
         - dtel_oid
         - attr

        """
        pass

    def sai_thrift_get_dtel_attribute(self, dtel_oid, attr_list):
        """
        Parameters:
         - dtel_oid
         - attr_list

        """
        pass

    def sai_thrift_create_dtel_queue_report(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_dtel_queue_report(self, dtel_queue_report_oid):
        """
        Parameters:
         - dtel_queue_report_oid

        """
        pass

    def sai_thrift_set_dtel_queue_report_attribute(self, dtel_queue_report_oid, attr):
        """
        Parameters:
         - dtel_queue_report_oid
         - attr

        """
        pass

    def sai_thrift_get_dtel_queue_report_attribute(self, dtel_queue_report_oid, attr_list):
        """
        Parameters:
         - dtel_queue_report_oid
         - attr_list

        """
        pass

    def sai_thrift_create_dtel_int_session(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_dtel_int_session(self, dtel_int_session_oid):
        """
        Parameters:
         - dtel_int_session_oid

        """
        pass

    def sai_thrift_set_dtel_int_session_attribute(self, dtel_int_session_oid, attr):
        """
        Parameters:
         - dtel_int_session_oid
         - attr

        """
        pass

    def sai_thrift_get_dtel_int_session_attribute(self, dtel_int_session_oid, attr_list):
        """
        Parameters:
         - dtel_int_session_oid
         - attr_list

        """
        pass

    def sai_thrift_create_dtel_report_session(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_dtel_report_session(self, dtel_report_session_oid):
        """
        Parameters:
         - dtel_report_session_oid

        """
        pass

    def sai_thrift_set_dtel_report_session_attribute(self, dtel_report_session_oid, attr):
        """
        Parameters:
         - dtel_report_session_oid
         - attr

        """
        pass

    def sai_thrift_get_dtel_report_session_attribute(self, dtel_report_session_oid, attr_list):
        """
        Parameters:
         - dtel_report_session_oid
         - attr_list

        """
        pass

    def sai_thrift_create_dtel_event(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_dtel_event(self, dtel_event_oid):
        """
        Parameters:
         - dtel_event_oid

        """
        pass

    def sai_thrift_set_dtel_event_attribute(self, dtel_event_oid, attr):
        """
        Parameters:
         - dtel_event_oid
         - attr

        """
        pass

    def sai_thrift_get_dtel_event_attribute(self, dtel_event_oid, attr_list):
        """
        Parameters:
         - dtel_event_oid
         - attr_list

        """
        pass

    def sai_thrift_create_fdb_entry(self, fdb_entry, attr_list):
        """
        Parameters:
         - fdb_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_fdb_entry(self, fdb_entry):
        """
        Parameters:
         - fdb_entry

        """
        pass

    def sai_thrift_set_fdb_entry_attribute(self, fdb_entry, attr):
        """
        Parameters:
         - fdb_entry
         - attr

        """
        pass

    def sai_thrift_get_fdb_entry_attribute(self, fdb_entry, attr_list):
        """
        Parameters:
         - fdb_entry
         - attr_list

        """
        pass

    def sai_thrift_flush_fdb_entries(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_bulk_create_fdb_entry(self, fdb_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - fdb_entry
         - attr_count
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_remove_fdb_entry(self, fdb_entry, mode):
        """
        Parameters:
         - fdb_entry
         - mode

        """
        pass

    def sai_thrift_bulk_set_fdb_entry_attribute(self, fdb_entry, attr_list, mode):
        """
        Parameters:
         - fdb_entry
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_get_fdb_entry_attribute(self, fdb_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - fdb_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        pass

    def sai_thrift_create_generic_programmable(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_generic_programmable(self, generic_programmable_oid):
        """
        Parameters:
         - generic_programmable_oid

        """
        pass

    def sai_thrift_set_generic_programmable_attribute(self, generic_programmable_oid, attr):
        """
        Parameters:
         - generic_programmable_oid
         - attr

        """
        pass

    def sai_thrift_get_generic_programmable_attribute(self, generic_programmable_oid, attr_list):
        """
        Parameters:
         - generic_programmable_oid
         - attr_list

        """
        pass

    def sai_thrift_create_fine_grained_hash_field(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_fine_grained_hash_field(self, fine_grained_hash_field_oid):
        """
        Parameters:
         - fine_grained_hash_field_oid

        """
        pass

    def sai_thrift_set_fine_grained_hash_field_attribute(self, fine_grained_hash_field_oid, attr):
        """
        Parameters:
         - fine_grained_hash_field_oid
         - attr

        """
        pass

    def sai_thrift_get_fine_grained_hash_field_attribute(self, fine_grained_hash_field_oid, attr_list):
        """
        Parameters:
         - fine_grained_hash_field_oid
         - attr_list

        """
        pass

    def sai_thrift_create_hash(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_hash(self, hash_oid):
        """
        Parameters:
         - hash_oid

        """
        pass

    def sai_thrift_set_hash_attribute(self, hash_oid, attr):
        """
        Parameters:
         - hash_oid
         - attr

        """
        pass

    def sai_thrift_get_hash_attribute(self, hash_oid, attr_list):
        """
        Parameters:
         - hash_oid
         - attr_list

        """
        pass

    def sai_thrift_create_hostif_trap_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_hostif_trap_group(self, hostif_trap_group_oid):
        """
        Parameters:
         - hostif_trap_group_oid

        """
        pass

    def sai_thrift_set_hostif_trap_group_attribute(self, hostif_trap_group_oid, attr):
        """
        Parameters:
         - hostif_trap_group_oid
         - attr

        """
        pass

    def sai_thrift_get_hostif_trap_group_attribute(self, hostif_trap_group_oid, attr_list):
        """
        Parameters:
         - hostif_trap_group_oid
         - attr_list

        """
        pass

    def sai_thrift_create_hostif_trap(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_hostif_trap(self, hostif_trap_oid):
        """
        Parameters:
         - hostif_trap_oid

        """
        pass

    def sai_thrift_set_hostif_trap_attribute(self, hostif_trap_oid, attr):
        """
        Parameters:
         - hostif_trap_oid
         - attr

        """
        pass

    def sai_thrift_get_hostif_trap_attribute(self, hostif_trap_oid, attr_list):
        """
        Parameters:
         - hostif_trap_oid
         - attr_list

        """
        pass

    def sai_thrift_create_hostif_user_defined_trap(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_hostif_user_defined_trap(self, hostif_user_defined_trap_oid):
        """
        Parameters:
         - hostif_user_defined_trap_oid

        """
        pass

    def sai_thrift_set_hostif_user_defined_trap_attribute(self, hostif_user_defined_trap_oid, attr):
        """
        Parameters:
         - hostif_user_defined_trap_oid
         - attr

        """
        pass

    def sai_thrift_get_hostif_user_defined_trap_attribute(self, hostif_user_defined_trap_oid, attr_list):
        """
        Parameters:
         - hostif_user_defined_trap_oid
         - attr_list

        """
        pass

    def sai_thrift_create_hostif(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_hostif(self, hostif_oid):
        """
        Parameters:
         - hostif_oid

        """
        pass

    def sai_thrift_set_hostif_attribute(self, hostif_oid, attr):
        """
        Parameters:
         - hostif_oid
         - attr

        """
        pass

    def sai_thrift_get_hostif_attribute(self, hostif_oid, attr_list):
        """
        Parameters:
         - hostif_oid
         - attr_list

        """
        pass

    def sai_thrift_create_hostif_table_entry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_hostif_table_entry(self, hostif_table_entry_oid):
        """
        Parameters:
         - hostif_table_entry_oid

        """
        pass

    def sai_thrift_set_hostif_table_entry_attribute(self, hostif_table_entry_oid, attr):
        """
        Parameters:
         - hostif_table_entry_oid
         - attr

        """
        pass

    def sai_thrift_get_hostif_table_entry_attribute(self, hostif_table_entry_oid, attr_list):
        """
        Parameters:
         - hostif_table_entry_oid
         - attr_list

        """
        pass

    def sai_thrift_recv_hostif_packet(self, hostif_oid, buffer_size, buffer, attr_list):
        """
        Parameters:
         - hostif_oid
         - buffer_size
         - buffer
         - attr_list

        """
        pass

    def sai_thrift_send_hostif_packet(self, hostif_oid, buffer_size, buffer, attr_list):
        """
        Parameters:
         - hostif_oid
         - buffer_size
         - buffer
         - attr_list

        """
        pass

    def sai_thrift_allocate_hostif_packet(self, hostif_oid, buffer_size, attr_list):
        """
        Parameters:
         - hostif_oid
         - buffer_size
         - attr_list

        """
        pass

    def sai_thrift_free_hostif_packet(self, hostif_oid, buffer):
        """
        Parameters:
         - hostif_oid
         - buffer

        """
        pass

    def sai_thrift_create_ipmc_entry(self, ipmc_entry, attr_list):
        """
        Parameters:
         - ipmc_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_ipmc_entry(self, ipmc_entry):
        """
        Parameters:
         - ipmc_entry

        """
        pass

    def sai_thrift_set_ipmc_entry_attribute(self, ipmc_entry, attr):
        """
        Parameters:
         - ipmc_entry
         - attr

        """
        pass

    def sai_thrift_get_ipmc_entry_attribute(self, ipmc_entry, attr_list):
        """
        Parameters:
         - ipmc_entry
         - attr_list

        """
        pass

    def sai_thrift_create_ipmc_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_ipmc_group(self, ipmc_group_oid):
        """
        Parameters:
         - ipmc_group_oid

        """
        pass

    def sai_thrift_set_ipmc_group_attribute(self, ipmc_group_oid, attr):
        """
        Parameters:
         - ipmc_group_oid
         - attr

        """
        pass

    def sai_thrift_get_ipmc_group_attribute(self, ipmc_group_oid, attr_list):
        """
        Parameters:
         - ipmc_group_oid
         - attr_list

        """
        pass

    def sai_thrift_create_ipmc_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_ipmc_group_member(self, ipmc_group_member_oid):
        """
        Parameters:
         - ipmc_group_member_oid

        """
        pass

    def sai_thrift_set_ipmc_group_member_attribute(self, ipmc_group_member_oid, attr):
        """
        Parameters:
         - ipmc_group_member_oid
         - attr

        """
        pass

    def sai_thrift_get_ipmc_group_member_attribute(self, ipmc_group_member_oid, attr_list):
        """
        Parameters:
         - ipmc_group_member_oid
         - attr_list

        """
        pass

    def sai_thrift_create_ipsec(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_ipsec(self, ipsec_oid):
        """
        Parameters:
         - ipsec_oid

        """
        pass

    def sai_thrift_set_ipsec_attribute(self, ipsec_oid, attr):
        """
        Parameters:
         - ipsec_oid
         - attr

        """
        pass

    def sai_thrift_get_ipsec_attribute(self, ipsec_oid, attr_list):
        """
        Parameters:
         - ipsec_oid
         - attr_list

        """
        pass

    def sai_thrift_create_ipsec_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_ipsec_port(self, ipsec_port_oid):
        """
        Parameters:
         - ipsec_port_oid

        """
        pass

    def sai_thrift_set_ipsec_port_attribute(self, ipsec_port_oid, attr):
        """
        Parameters:
         - ipsec_port_oid
         - attr

        """
        pass

    def sai_thrift_get_ipsec_port_attribute(self, ipsec_port_oid, attr_list):
        """
        Parameters:
         - ipsec_port_oid
         - attr_list

        """
        pass

    def sai_thrift_get_ipsec_port_stats(self, ipsec_port_oid, counter_ids):
        """
        Parameters:
         - ipsec_port_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_ipsec_port_stats_ext(self, ipsec_port_oid, counter_ids, mode):
        """
        Parameters:
         - ipsec_port_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_ipsec_port_stats(self, ipsec_port_oid, counter_ids):
        """
        Parameters:
         - ipsec_port_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_ipsec_sa(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_ipsec_sa(self, ipsec_sa_oid):
        """
        Parameters:
         - ipsec_sa_oid

        """
        pass

    def sai_thrift_set_ipsec_sa_attribute(self, ipsec_sa_oid, attr):
        """
        Parameters:
         - ipsec_sa_oid
         - attr

        """
        pass

    def sai_thrift_get_ipsec_sa_attribute(self, ipsec_sa_oid, attr_list):
        """
        Parameters:
         - ipsec_sa_oid
         - attr_list

        """
        pass

    def sai_thrift_get_ipsec_sa_stats(self, ipsec_sa_oid, counter_ids):
        """
        Parameters:
         - ipsec_sa_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_ipsec_sa_stats_ext(self, ipsec_sa_oid, counter_ids, mode):
        """
        Parameters:
         - ipsec_sa_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_ipsec_sa_stats(self, ipsec_sa_oid, counter_ids):
        """
        Parameters:
         - ipsec_sa_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_isolation_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_isolation_group(self, isolation_group_oid):
        """
        Parameters:
         - isolation_group_oid

        """
        pass

    def sai_thrift_set_isolation_group_attribute(self, isolation_group_oid, attr):
        """
        Parameters:
         - isolation_group_oid
         - attr

        """
        pass

    def sai_thrift_get_isolation_group_attribute(self, isolation_group_oid, attr_list):
        """
        Parameters:
         - isolation_group_oid
         - attr_list

        """
        pass

    def sai_thrift_create_isolation_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_isolation_group_member(self, isolation_group_member_oid):
        """
        Parameters:
         - isolation_group_member_oid

        """
        pass

    def sai_thrift_set_isolation_group_member_attribute(self, isolation_group_member_oid, attr):
        """
        Parameters:
         - isolation_group_member_oid
         - attr

        """
        pass

    def sai_thrift_get_isolation_group_member_attribute(self, isolation_group_member_oid, attr_list):
        """
        Parameters:
         - isolation_group_member_oid
         - attr_list

        """
        pass

    def sai_thrift_create_l2mc_entry(self, l2mc_entry, attr_list):
        """
        Parameters:
         - l2mc_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_l2mc_entry(self, l2mc_entry):
        """
        Parameters:
         - l2mc_entry

        """
        pass

    def sai_thrift_set_l2mc_entry_attribute(self, l2mc_entry, attr):
        """
        Parameters:
         - l2mc_entry
         - attr

        """
        pass

    def sai_thrift_get_l2mc_entry_attribute(self, l2mc_entry, attr_list):
        """
        Parameters:
         - l2mc_entry
         - attr_list

        """
        pass

    def sai_thrift_create_l2mc_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_l2mc_group(self, l2mc_group_oid):
        """
        Parameters:
         - l2mc_group_oid

        """
        pass

    def sai_thrift_set_l2mc_group_attribute(self, l2mc_group_oid, attr):
        """
        Parameters:
         - l2mc_group_oid
         - attr

        """
        pass

    def sai_thrift_get_l2mc_group_attribute(self, l2mc_group_oid, attr_list):
        """
        Parameters:
         - l2mc_group_oid
         - attr_list

        """
        pass

    def sai_thrift_create_l2mc_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_l2mc_group_member(self, l2mc_group_member_oid):
        """
        Parameters:
         - l2mc_group_member_oid

        """
        pass

    def sai_thrift_set_l2mc_group_member_attribute(self, l2mc_group_member_oid, attr):
        """
        Parameters:
         - l2mc_group_member_oid
         - attr

        """
        pass

    def sai_thrift_get_l2mc_group_member_attribute(self, l2mc_group_member_oid, attr_list):
        """
        Parameters:
         - l2mc_group_member_oid
         - attr_list

        """
        pass

    def sai_thrift_create_lag(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_lag(self, lag_oid):
        """
        Parameters:
         - lag_oid

        """
        pass

    def sai_thrift_set_lag_attribute(self, lag_oid, attr):
        """
        Parameters:
         - lag_oid
         - attr

        """
        pass

    def sai_thrift_get_lag_attribute(self, lag_oid, attr_list):
        """
        Parameters:
         - lag_oid
         - attr_list

        """
        pass

    def sai_thrift_create_lag_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_lag_member(self, lag_member_oid):
        """
        Parameters:
         - lag_member_oid

        """
        pass

    def sai_thrift_set_lag_member_attribute(self, lag_member_oid, attr):
        """
        Parameters:
         - lag_member_oid
         - attr

        """
        pass

    def sai_thrift_get_lag_member_attribute(self, lag_member_oid, attr_list):
        """
        Parameters:
         - lag_member_oid
         - attr_list

        """
        pass

    def sai_thrift_create_macsec(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_macsec(self, macsec_oid):
        """
        Parameters:
         - macsec_oid

        """
        pass

    def sai_thrift_set_macsec_attribute(self, macsec_oid, attr):
        """
        Parameters:
         - macsec_oid
         - attr

        """
        pass

    def sai_thrift_get_macsec_attribute(self, macsec_oid, attr_list):
        """
        Parameters:
         - macsec_oid
         - attr_list

        """
        pass

    def sai_thrift_create_macsec_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_macsec_port(self, macsec_port_oid):
        """
        Parameters:
         - macsec_port_oid

        """
        pass

    def sai_thrift_set_macsec_port_attribute(self, macsec_port_oid, attr):
        """
        Parameters:
         - macsec_port_oid
         - attr

        """
        pass

    def sai_thrift_get_macsec_port_attribute(self, macsec_port_oid, attr_list):
        """
        Parameters:
         - macsec_port_oid
         - attr_list

        """
        pass

    def sai_thrift_get_macsec_port_stats(self, macsec_port_oid, counter_ids):
        """
        Parameters:
         - macsec_port_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_macsec_port_stats_ext(self, macsec_port_oid, counter_ids, mode):
        """
        Parameters:
         - macsec_port_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_macsec_port_stats(self, macsec_port_oid, counter_ids):
        """
        Parameters:
         - macsec_port_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_macsec_flow(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_macsec_flow(self, macsec_flow_oid):
        """
        Parameters:
         - macsec_flow_oid

        """
        pass

    def sai_thrift_set_macsec_flow_attribute(self, macsec_flow_oid, attr):
        """
        Parameters:
         - macsec_flow_oid
         - attr

        """
        pass

    def sai_thrift_get_macsec_flow_attribute(self, macsec_flow_oid, attr_list):
        """
        Parameters:
         - macsec_flow_oid
         - attr_list

        """
        pass

    def sai_thrift_get_macsec_flow_stats(self, macsec_flow_oid, counter_ids):
        """
        Parameters:
         - macsec_flow_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_macsec_flow_stats_ext(self, macsec_flow_oid, counter_ids, mode):
        """
        Parameters:
         - macsec_flow_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_macsec_flow_stats(self, macsec_flow_oid, counter_ids):
        """
        Parameters:
         - macsec_flow_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_macsec_sc(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_macsec_sc(self, macsec_sc_oid):
        """
        Parameters:
         - macsec_sc_oid

        """
        pass

    def sai_thrift_set_macsec_sc_attribute(self, macsec_sc_oid, attr):
        """
        Parameters:
         - macsec_sc_oid
         - attr

        """
        pass

    def sai_thrift_get_macsec_sc_attribute(self, macsec_sc_oid, attr_list):
        """
        Parameters:
         - macsec_sc_oid
         - attr_list

        """
        pass

    def sai_thrift_get_macsec_sc_stats(self, macsec_sc_oid, counter_ids):
        """
        Parameters:
         - macsec_sc_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_macsec_sc_stats_ext(self, macsec_sc_oid, counter_ids, mode):
        """
        Parameters:
         - macsec_sc_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_macsec_sc_stats(self, macsec_sc_oid, counter_ids):
        """
        Parameters:
         - macsec_sc_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_macsec_sa(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_macsec_sa(self, macsec_sa_oid):
        """
        Parameters:
         - macsec_sa_oid

        """
        pass

    def sai_thrift_set_macsec_sa_attribute(self, macsec_sa_oid, attr):
        """
        Parameters:
         - macsec_sa_oid
         - attr

        """
        pass

    def sai_thrift_get_macsec_sa_attribute(self, macsec_sa_oid, attr_list):
        """
        Parameters:
         - macsec_sa_oid
         - attr_list

        """
        pass

    def sai_thrift_get_macsec_sa_stats(self, macsec_sa_oid, counter_ids):
        """
        Parameters:
         - macsec_sa_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_macsec_sa_stats_ext(self, macsec_sa_oid, counter_ids, mode):
        """
        Parameters:
         - macsec_sa_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_macsec_sa_stats(self, macsec_sa_oid, counter_ids):
        """
        Parameters:
         - macsec_sa_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_mcast_fdb_entry(self, mcast_fdb_entry, attr_list):
        """
        Parameters:
         - mcast_fdb_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_mcast_fdb_entry(self, mcast_fdb_entry):
        """
        Parameters:
         - mcast_fdb_entry

        """
        pass

    def sai_thrift_set_mcast_fdb_entry_attribute(self, mcast_fdb_entry, attr):
        """
        Parameters:
         - mcast_fdb_entry
         - attr

        """
        pass

    def sai_thrift_get_mcast_fdb_entry_attribute(self, mcast_fdb_entry, attr_list):
        """
        Parameters:
         - mcast_fdb_entry
         - attr_list

        """
        pass

    def sai_thrift_create_mirror_session(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_mirror_session(self, mirror_session_oid):
        """
        Parameters:
         - mirror_session_oid

        """
        pass

    def sai_thrift_set_mirror_session_attribute(self, mirror_session_oid, attr):
        """
        Parameters:
         - mirror_session_oid
         - attr

        """
        pass

    def sai_thrift_get_mirror_session_attribute(self, mirror_session_oid, attr_list):
        """
        Parameters:
         - mirror_session_oid
         - attr_list

        """
        pass

    def sai_thrift_create_inseg_entry(self, inseg_entry, attr_list):
        """
        Parameters:
         - inseg_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_inseg_entry(self, inseg_entry):
        """
        Parameters:
         - inseg_entry

        """
        pass

    def sai_thrift_set_inseg_entry_attribute(self, inseg_entry, attr):
        """
        Parameters:
         - inseg_entry
         - attr

        """
        pass

    def sai_thrift_get_inseg_entry_attribute(self, inseg_entry, attr_list):
        """
        Parameters:
         - inseg_entry
         - attr_list

        """
        pass

    def sai_thrift_bulk_create_inseg_entry(self, inseg_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - inseg_entry
         - attr_count
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_remove_inseg_entry(self, inseg_entry, mode):
        """
        Parameters:
         - inseg_entry
         - mode

        """
        pass

    def sai_thrift_bulk_set_inseg_entry_attribute(self, inseg_entry, attr_list, mode):
        """
        Parameters:
         - inseg_entry
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_get_inseg_entry_attribute(self, inseg_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - inseg_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        pass

    def sai_thrift_create_my_mac(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_my_mac(self, my_mac_oid):
        """
        Parameters:
         - my_mac_oid

        """
        pass

    def sai_thrift_set_my_mac_attribute(self, my_mac_oid, attr):
        """
        Parameters:
         - my_mac_oid
         - attr

        """
        pass

    def sai_thrift_get_my_mac_attribute(self, my_mac_oid, attr_list):
        """
        Parameters:
         - my_mac_oid
         - attr_list

        """
        pass

    def sai_thrift_create_nat_entry(self, nat_entry, attr_list):
        """
        Parameters:
         - nat_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_nat_entry(self, nat_entry):
        """
        Parameters:
         - nat_entry

        """
        pass

    def sai_thrift_set_nat_entry_attribute(self, nat_entry, attr):
        """
        Parameters:
         - nat_entry
         - attr

        """
        pass

    def sai_thrift_get_nat_entry_attribute(self, nat_entry, attr_list):
        """
        Parameters:
         - nat_entry
         - attr_list

        """
        pass

    def sai_thrift_bulk_create_nat_entry(self, nat_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - nat_entry
         - attr_count
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_remove_nat_entry(self, nat_entry, mode):
        """
        Parameters:
         - nat_entry
         - mode

        """
        pass

    def sai_thrift_bulk_set_nat_entry_attribute(self, nat_entry, attr_list, mode):
        """
        Parameters:
         - nat_entry
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_get_nat_entry_attribute(self, nat_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - nat_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        pass

    def sai_thrift_create_nat_zone_counter(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_nat_zone_counter(self, nat_zone_counter_oid):
        """
        Parameters:
         - nat_zone_counter_oid

        """
        pass

    def sai_thrift_set_nat_zone_counter_attribute(self, nat_zone_counter_oid, attr):
        """
        Parameters:
         - nat_zone_counter_oid
         - attr

        """
        pass

    def sai_thrift_get_nat_zone_counter_attribute(self, nat_zone_counter_oid, attr_list):
        """
        Parameters:
         - nat_zone_counter_oid
         - attr_list

        """
        pass

    def sai_thrift_create_neighbor_entry(self, neighbor_entry, attr_list):
        """
        Parameters:
         - neighbor_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_neighbor_entry(self, neighbor_entry):
        """
        Parameters:
         - neighbor_entry

        """
        pass

    def sai_thrift_set_neighbor_entry_attribute(self, neighbor_entry, attr):
        """
        Parameters:
         - neighbor_entry
         - attr

        """
        pass

    def sai_thrift_get_neighbor_entry_attribute(self, neighbor_entry, attr_list):
        """
        Parameters:
         - neighbor_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_all_neighbor_entries(self):
        pass

    def sai_thrift_bulk_create_neighbor_entry(self, neighbor_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - neighbor_entry
         - attr_count
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_remove_neighbor_entry(self, neighbor_entry, mode):
        """
        Parameters:
         - neighbor_entry
         - mode

        """
        pass

    def sai_thrift_bulk_set_neighbor_entry_attribute(self, neighbor_entry, attr_list, mode):
        """
        Parameters:
         - neighbor_entry
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_get_neighbor_entry_attribute(self, neighbor_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - neighbor_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        pass

    def sai_thrift_create_next_hop(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_next_hop(self, next_hop_oid):
        """
        Parameters:
         - next_hop_oid

        """
        pass

    def sai_thrift_set_next_hop_attribute(self, next_hop_oid, attr):
        """
        Parameters:
         - next_hop_oid
         - attr

        """
        pass

    def sai_thrift_get_next_hop_attribute(self, next_hop_oid, attr_list):
        """
        Parameters:
         - next_hop_oid
         - attr_list

        """
        pass

    def sai_thrift_create_next_hop_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_next_hop_group(self, next_hop_group_oid):
        """
        Parameters:
         - next_hop_group_oid

        """
        pass

    def sai_thrift_set_next_hop_group_attribute(self, next_hop_group_oid, attr):
        """
        Parameters:
         - next_hop_group_oid
         - attr

        """
        pass

    def sai_thrift_get_next_hop_group_attribute(self, next_hop_group_oid, attr_list):
        """
        Parameters:
         - next_hop_group_oid
         - attr_list

        """
        pass

    def sai_thrift_create_next_hop_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_next_hop_group_member(self, next_hop_group_member_oid):
        """
        Parameters:
         - next_hop_group_member_oid

        """
        pass

    def sai_thrift_set_next_hop_group_member_attribute(self, next_hop_group_member_oid, attr):
        """
        Parameters:
         - next_hop_group_member_oid
         - attr

        """
        pass

    def sai_thrift_get_next_hop_group_member_attribute(self, next_hop_group_member_oid, attr_list):
        """
        Parameters:
         - next_hop_group_member_oid
         - attr_list

        """
        pass

    def sai_thrift_create_next_hop_group_map(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_next_hop_group_map(self, next_hop_group_map_oid):
        """
        Parameters:
         - next_hop_group_map_oid

        """
        pass

    def sai_thrift_set_next_hop_group_map_attribute(self, next_hop_group_map_oid, attr):
        """
        Parameters:
         - next_hop_group_map_oid
         - attr

        """
        pass

    def sai_thrift_get_next_hop_group_map_attribute(self, next_hop_group_map_oid, attr_list):
        """
        Parameters:
         - next_hop_group_map_oid
         - attr_list

        """
        pass

    def sai_thrift_create_policer(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_policer(self, policer_oid):
        """
        Parameters:
         - policer_oid

        """
        pass

    def sai_thrift_set_policer_attribute(self, policer_oid, attr):
        """
        Parameters:
         - policer_oid
         - attr

        """
        pass

    def sai_thrift_get_policer_attribute(self, policer_oid, attr_list):
        """
        Parameters:
         - policer_oid
         - attr_list

        """
        pass

    def sai_thrift_get_policer_stats(self, policer_oid, counter_ids):
        """
        Parameters:
         - policer_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_policer_stats_ext(self, policer_oid, counter_ids, mode):
        """
        Parameters:
         - policer_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_policer_stats(self, policer_oid, counter_ids):
        """
        Parameters:
         - policer_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_port(self, port_oid):
        """
        Parameters:
         - port_oid

        """
        pass

    def sai_thrift_set_port_attribute(self, port_oid, attr):
        """
        Parameters:
         - port_oid
         - attr

        """
        pass

    def sai_thrift_get_port_attribute(self, port_oid, attr_list):
        """
        Parameters:
         - port_oid
         - attr_list

        """
        pass

    def sai_thrift_get_port_stats(self, port_oid, counter_ids):
        """
        Parameters:
         - port_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_port_stats_ext(self, port_oid, counter_ids, mode):
        """
        Parameters:
         - port_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_port_stats(self, port_oid, counter_ids):
        """
        Parameters:
         - port_oid
         - counter_ids

        """
        pass

    def sai_thrift_clear_port_all_stats(self, port_oid):
        """
        Parameters:
         - port_oid

        """
        pass

    def sai_thrift_create_port_pool(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_port_pool(self, port_pool_oid):
        """
        Parameters:
         - port_pool_oid

        """
        pass

    def sai_thrift_set_port_pool_attribute(self, port_pool_oid, attr):
        """
        Parameters:
         - port_pool_oid
         - attr

        """
        pass

    def sai_thrift_get_port_pool_attribute(self, port_pool_oid, attr_list):
        """
        Parameters:
         - port_pool_oid
         - attr_list

        """
        pass

    def sai_thrift_get_port_pool_stats(self, port_pool_oid, counter_ids):
        """
        Parameters:
         - port_pool_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_port_pool_stats_ext(self, port_pool_oid, counter_ids, mode):
        """
        Parameters:
         - port_pool_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_port_pool_stats(self, port_pool_oid, counter_ids):
        """
        Parameters:
         - port_pool_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_port_serdes(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_port_serdes(self, port_serdes_oid):
        """
        Parameters:
         - port_serdes_oid

        """
        pass

    def sai_thrift_set_port_serdes_attribute(self, port_serdes_oid, attr):
        """
        Parameters:
         - port_serdes_oid
         - attr

        """
        pass

    def sai_thrift_get_port_serdes_attribute(self, port_serdes_oid, attr_list):
        """
        Parameters:
         - port_serdes_oid
         - attr_list

        """
        pass

    def sai_thrift_create_port_connector(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_port_connector(self, port_connector_oid):
        """
        Parameters:
         - port_connector_oid

        """
        pass

    def sai_thrift_set_port_connector_attribute(self, port_connector_oid, attr):
        """
        Parameters:
         - port_connector_oid
         - attr

        """
        pass

    def sai_thrift_get_port_connector_attribute(self, port_connector_oid, attr_list):
        """
        Parameters:
         - port_connector_oid
         - attr_list

        """
        pass

    def sai_thrift_create_qos_map(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_qos_map(self, qos_map_oid):
        """
        Parameters:
         - qos_map_oid

        """
        pass

    def sai_thrift_set_qos_map_attribute(self, qos_map_oid, attr):
        """
        Parameters:
         - qos_map_oid
         - attr

        """
        pass

    def sai_thrift_get_qos_map_attribute(self, qos_map_oid, attr_list):
        """
        Parameters:
         - qos_map_oid
         - attr_list

        """
        pass

    def sai_thrift_create_queue(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_queue(self, queue_oid):
        """
        Parameters:
         - queue_oid

        """
        pass

    def sai_thrift_set_queue_attribute(self, queue_oid, attr):
        """
        Parameters:
         - queue_oid
         - attr

        """
        pass

    def sai_thrift_get_queue_attribute(self, queue_oid, attr_list):
        """
        Parameters:
         - queue_oid
         - attr_list

        """
        pass

    def sai_thrift_get_queue_stats(self, queue_oid, counter_ids):
        """
        Parameters:
         - queue_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_queue_stats_ext(self, queue_oid, counter_ids, mode):
        """
        Parameters:
         - queue_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_queue_stats(self, queue_oid, counter_ids):
        """
        Parameters:
         - queue_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_route_entry(self, route_entry, attr_list):
        """
        Parameters:
         - route_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_route_entry(self, route_entry):
        """
        Parameters:
         - route_entry

        """
        pass

    def sai_thrift_set_route_entry_attribute(self, route_entry, attr):
        """
        Parameters:
         - route_entry
         - attr

        """
        pass

    def sai_thrift_get_route_entry_attribute(self, route_entry, attr_list):
        """
        Parameters:
         - route_entry
         - attr_list

        """
        pass

    def sai_thrift_bulk_create_route_entry(self, route_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - route_entry
         - attr_count
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_remove_route_entry(self, route_entry, mode):
        """
        Parameters:
         - route_entry
         - mode

        """
        pass

    def sai_thrift_bulk_set_route_entry_attribute(self, route_entry, attr_list, mode):
        """
        Parameters:
         - route_entry
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_get_route_entry_attribute(self, route_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - route_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        pass

    def sai_thrift_create_router_interface(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_router_interface(self, router_interface_oid):
        """
        Parameters:
         - router_interface_oid

        """
        pass

    def sai_thrift_set_router_interface_attribute(self, router_interface_oid, attr):
        """
        Parameters:
         - router_interface_oid
         - attr

        """
        pass

    def sai_thrift_get_router_interface_attribute(self, router_interface_oid, attr_list):
        """
        Parameters:
         - router_interface_oid
         - attr_list

        """
        pass

    def sai_thrift_get_router_interface_stats(self, router_interface_oid, counter_ids):
        """
        Parameters:
         - router_interface_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_router_interface_stats_ext(self, router_interface_oid, counter_ids, mode):
        """
        Parameters:
         - router_interface_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_router_interface_stats(self, router_interface_oid, counter_ids):
        """
        Parameters:
         - router_interface_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_rpf_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_rpf_group(self, rpf_group_oid):
        """
        Parameters:
         - rpf_group_oid

        """
        pass

    def sai_thrift_set_rpf_group_attribute(self, rpf_group_oid, attr):
        """
        Parameters:
         - rpf_group_oid
         - attr

        """
        pass

    def sai_thrift_get_rpf_group_attribute(self, rpf_group_oid, attr_list):
        """
        Parameters:
         - rpf_group_oid
         - attr_list

        """
        pass

    def sai_thrift_create_rpf_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_rpf_group_member(self, rpf_group_member_oid):
        """
        Parameters:
         - rpf_group_member_oid

        """
        pass

    def sai_thrift_set_rpf_group_member_attribute(self, rpf_group_member_oid, attr):
        """
        Parameters:
         - rpf_group_member_oid
         - attr

        """
        pass

    def sai_thrift_get_rpf_group_member_attribute(self, rpf_group_member_oid, attr_list):
        """
        Parameters:
         - rpf_group_member_oid
         - attr_list

        """
        pass

    def sai_thrift_create_samplepacket(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_samplepacket(self, samplepacket_oid):
        """
        Parameters:
         - samplepacket_oid

        """
        pass

    def sai_thrift_set_samplepacket_attribute(self, samplepacket_oid, attr):
        """
        Parameters:
         - samplepacket_oid
         - attr

        """
        pass

    def sai_thrift_get_samplepacket_attribute(self, samplepacket_oid, attr_list):
        """
        Parameters:
         - samplepacket_oid
         - attr_list

        """
        pass

    def sai_thrift_create_scheduler(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_scheduler(self, scheduler_oid):
        """
        Parameters:
         - scheduler_oid

        """
        pass

    def sai_thrift_set_scheduler_attribute(self, scheduler_oid, attr):
        """
        Parameters:
         - scheduler_oid
         - attr

        """
        pass

    def sai_thrift_get_scheduler_attribute(self, scheduler_oid, attr_list):
        """
        Parameters:
         - scheduler_oid
         - attr_list

        """
        pass

    def sai_thrift_create_scheduler_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_scheduler_group(self, scheduler_group_oid):
        """
        Parameters:
         - scheduler_group_oid

        """
        pass

    def sai_thrift_set_scheduler_group_attribute(self, scheduler_group_oid, attr):
        """
        Parameters:
         - scheduler_group_oid
         - attr

        """
        pass

    def sai_thrift_get_scheduler_group_attribute(self, scheduler_group_oid, attr_list):
        """
        Parameters:
         - scheduler_group_oid
         - attr_list

        """
        pass

    def sai_thrift_create_srv6_sidlist(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_srv6_sidlist(self, srv6_sidlist_oid):
        """
        Parameters:
         - srv6_sidlist_oid

        """
        pass

    def sai_thrift_set_srv6_sidlist_attribute(self, srv6_sidlist_oid, attr):
        """
        Parameters:
         - srv6_sidlist_oid
         - attr

        """
        pass

    def sai_thrift_get_srv6_sidlist_attribute(self, srv6_sidlist_oid, attr_list):
        """
        Parameters:
         - srv6_sidlist_oid
         - attr_list

        """
        pass

    def sai_thrift_create_my_sid_entry(self, my_sid_entry, attr_list):
        """
        Parameters:
         - my_sid_entry
         - attr_list

        """
        pass

    def sai_thrift_remove_my_sid_entry(self, my_sid_entry):
        """
        Parameters:
         - my_sid_entry

        """
        pass

    def sai_thrift_set_my_sid_entry_attribute(self, my_sid_entry, attr):
        """
        Parameters:
         - my_sid_entry
         - attr

        """
        pass

    def sai_thrift_get_my_sid_entry_attribute(self, my_sid_entry, attr_list):
        """
        Parameters:
         - my_sid_entry
         - attr_list

        """
        pass

    def sai_thrift_bulk_create_my_sid_entry(self, my_sid_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - my_sid_entry
         - attr_count
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_remove_my_sid_entry(self, my_sid_entry, mode):
        """
        Parameters:
         - my_sid_entry
         - mode

        """
        pass

    def sai_thrift_bulk_set_my_sid_entry_attribute(self, my_sid_entry, attr_list, mode):
        """
        Parameters:
         - my_sid_entry
         - attr_list
         - mode

        """
        pass

    def sai_thrift_bulk_get_my_sid_entry_attribute(self, my_sid_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - my_sid_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        pass

    def sai_thrift_create_stp(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_stp(self, stp_oid):
        """
        Parameters:
         - stp_oid

        """
        pass

    def sai_thrift_set_stp_attribute(self, stp_oid, attr):
        """
        Parameters:
         - stp_oid
         - attr

        """
        pass

    def sai_thrift_get_stp_attribute(self, stp_oid, attr_list):
        """
        Parameters:
         - stp_oid
         - attr_list

        """
        pass

    def sai_thrift_create_stp_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_stp_port(self, stp_port_oid):
        """
        Parameters:
         - stp_port_oid

        """
        pass

    def sai_thrift_set_stp_port_attribute(self, stp_port_oid, attr):
        """
        Parameters:
         - stp_port_oid
         - attr

        """
        pass

    def sai_thrift_get_stp_port_attribute(self, stp_port_oid, attr_list):
        """
        Parameters:
         - stp_port_oid
         - attr_list

        """
        pass

    def sai_thrift_switch_register_read(self, platform_context, device_addr, start_reg_addr):
        """
        Parameters:
         - platform_context
         - device_addr
         - start_reg_addr

        """
        pass

    def sai_thrift_switch_register_write(self, platform_context, device_addr, start_reg_addr, reg_val):
        """
        Parameters:
         - platform_context
         - device_addr
         - start_reg_addr
         - reg_val

        """
        pass

    def sai_thrift_switch_mdio_read(self, device_addr, start_reg_addr):
        """
        Parameters:
         - device_addr
         - start_reg_addr

        """
        pass

    def sai_thrift_switch_mdio_write(self, device_addr, start_reg_addr, reg_val):
        """
        Parameters:
         - device_addr
         - start_reg_addr
         - reg_val

        """
        pass

    def sai_thrift_switch_mdio_cl22_read(self, device_addr, start_reg_addr):
        """
        Parameters:
         - device_addr
         - start_reg_addr

        """
        pass

    def sai_thrift_switch_mdio_cl22_write(self, device_addr, start_reg_addr, reg_val):
        """
        Parameters:
         - device_addr
         - start_reg_addr
         - reg_val

        """
        pass

    def sai_thrift_create_switch(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_switch(self):
        pass

    def sai_thrift_set_switch_attribute(self, attr):
        """
        Parameters:
         - attr

        """
        pass

    def sai_thrift_get_switch_attribute(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_get_switch_stats(self, counter_ids):
        """
        Parameters:
         - counter_ids

        """
        pass

    def sai_thrift_get_switch_stats_ext(self, counter_ids, mode):
        """
        Parameters:
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_switch_stats(self, counter_ids):
        """
        Parameters:
         - counter_ids

        """
        pass

    def sai_thrift_create_switch_tunnel(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_switch_tunnel(self, switch_tunnel_oid):
        """
        Parameters:
         - switch_tunnel_oid

        """
        pass

    def sai_thrift_set_switch_tunnel_attribute(self, switch_tunnel_oid, attr):
        """
        Parameters:
         - switch_tunnel_oid
         - attr

        """
        pass

    def sai_thrift_get_switch_tunnel_attribute(self, switch_tunnel_oid, attr_list):
        """
        Parameters:
         - switch_tunnel_oid
         - attr_list

        """
        pass

    def sai_thrift_create_system_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_system_port(self, system_port_oid):
        """
        Parameters:
         - system_port_oid

        """
        pass

    def sai_thrift_set_system_port_attribute(self, system_port_oid, attr):
        """
        Parameters:
         - system_port_oid
         - attr

        """
        pass

    def sai_thrift_get_system_port_attribute(self, system_port_oid, attr_list):
        """
        Parameters:
         - system_port_oid
         - attr_list

        """
        pass

    def sai_thrift_create_tam(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam(self, tam_oid):
        """
        Parameters:
         - tam_oid

        """
        pass

    def sai_thrift_set_tam_attribute(self, tam_oid, attr):
        """
        Parameters:
         - tam_oid
         - attr

        """
        pass

    def sai_thrift_get_tam_attribute(self, tam_oid, attr_list):
        """
        Parameters:
         - tam_oid
         - attr_list

        """
        pass

    def sai_thrift_create_tam_math_func(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_math_func(self, tam_math_func_oid):
        """
        Parameters:
         - tam_math_func_oid

        """
        pass

    def sai_thrift_get_tam_math_func_attribute(self, tam_math_func_oid, attr_list):
        """
        Parameters:
         - tam_math_func_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_math_func_attribute(self, tam_math_func_oid, attr):
        """
        Parameters:
         - tam_math_func_oid
         - attr

        """
        pass

    def sai_thrift_create_tam_event_threshold(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_event_threshold(self, tam_event_threshold_oid):
        """
        Parameters:
         - tam_event_threshold_oid

        """
        pass

    def sai_thrift_get_tam_event_threshold_attribute(self, tam_event_threshold_oid, attr_list):
        """
        Parameters:
         - tam_event_threshold_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_event_threshold_attribute(self, tam_event_threshold_oid, attr):
        """
        Parameters:
         - tam_event_threshold_oid
         - attr

        """
        pass

    def sai_thrift_create_tam_int(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_int(self, tam_int_oid):
        """
        Parameters:
         - tam_int_oid

        """
        pass

    def sai_thrift_get_tam_int_attribute(self, tam_int_oid, attr_list):
        """
        Parameters:
         - tam_int_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_int_attribute(self, tam_int_oid, attr):
        """
        Parameters:
         - tam_int_oid
         - attr

        """
        pass

    def sai_thrift_create_tam_tel_type(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_tel_type(self, tam_tel_type_oid):
        """
        Parameters:
         - tam_tel_type_oid

        """
        pass

    def sai_thrift_get_tam_tel_type_attribute(self, tam_tel_type_oid, attr_list):
        """
        Parameters:
         - tam_tel_type_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_tel_type_attribute(self, tam_tel_type_oid, attr):
        """
        Parameters:
         - tam_tel_type_oid
         - attr

        """
        pass

    def sai_thrift_create_tam_report(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_report(self, tam_report_oid):
        """
        Parameters:
         - tam_report_oid

        """
        pass

    def sai_thrift_get_tam_report_attribute(self, tam_report_oid, attr_list):
        """
        Parameters:
         - tam_report_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_report_attribute(self, tam_report_oid, attr):
        """
        Parameters:
         - tam_report_oid
         - attr

        """
        pass

    def sai_thrift_create_tam_telemetry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_telemetry(self, tam_telemetry_oid):
        """
        Parameters:
         - tam_telemetry_oid

        """
        pass

    def sai_thrift_get_tam_telemetry_attribute(self, tam_telemetry_oid, attr_list):
        """
        Parameters:
         - tam_telemetry_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_telemetry_attribute(self, tam_telemetry_oid, attr):
        """
        Parameters:
         - tam_telemetry_oid
         - attr

        """
        pass

    def sai_thrift_create_tam_transport(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_transport(self, tam_transport_oid):
        """
        Parameters:
         - tam_transport_oid

        """
        pass

    def sai_thrift_get_tam_transport_attribute(self, tam_transport_oid, attr_list):
        """
        Parameters:
         - tam_transport_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_transport_attribute(self, tam_transport_oid, attr):
        """
        Parameters:
         - tam_transport_oid
         - attr

        """
        pass

    def sai_thrift_create_tam_collector(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_collector(self, tam_collector_oid):
        """
        Parameters:
         - tam_collector_oid

        """
        pass

    def sai_thrift_get_tam_collector_attribute(self, tam_collector_oid, attr_list):
        """
        Parameters:
         - tam_collector_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_collector_attribute(self, tam_collector_oid, attr):
        """
        Parameters:
         - tam_collector_oid
         - attr

        """
        pass

    def sai_thrift_create_tam_event_action(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_event_action(self, tam_event_action_oid):
        """
        Parameters:
         - tam_event_action_oid

        """
        pass

    def sai_thrift_get_tam_event_action_attribute(self, tam_event_action_oid, attr_list):
        """
        Parameters:
         - tam_event_action_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_event_action_attribute(self, tam_event_action_oid, attr):
        """
        Parameters:
         - tam_event_action_oid
         - attr

        """
        pass

    def sai_thrift_create_tam_event(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tam_event(self, tam_event_oid):
        """
        Parameters:
         - tam_event_oid

        """
        pass

    def sai_thrift_get_tam_event_attribute(self, tam_event_oid, attr_list):
        """
        Parameters:
         - tam_event_oid
         - attr_list

        """
        pass

    def sai_thrift_set_tam_event_attribute(self, tam_event_oid, attr):
        """
        Parameters:
         - tam_event_oid
         - attr

        """
        pass

    def sai_thrift_create_tunnel_map(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tunnel_map(self, tunnel_map_oid):
        """
        Parameters:
         - tunnel_map_oid

        """
        pass

    def sai_thrift_set_tunnel_map_attribute(self, tunnel_map_oid, attr):
        """
        Parameters:
         - tunnel_map_oid
         - attr

        """
        pass

    def sai_thrift_get_tunnel_map_attribute(self, tunnel_map_oid, attr_list):
        """
        Parameters:
         - tunnel_map_oid
         - attr_list

        """
        pass

    def sai_thrift_create_tunnel(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tunnel(self, tunnel_oid):
        """
        Parameters:
         - tunnel_oid

        """
        pass

    def sai_thrift_set_tunnel_attribute(self, tunnel_oid, attr):
        """
        Parameters:
         - tunnel_oid
         - attr

        """
        pass

    def sai_thrift_get_tunnel_attribute(self, tunnel_oid, attr_list):
        """
        Parameters:
         - tunnel_oid
         - attr_list

        """
        pass

    def sai_thrift_get_tunnel_stats(self, tunnel_oid, counter_ids):
        """
        Parameters:
         - tunnel_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_tunnel_stats_ext(self, tunnel_oid, counter_ids, mode):
        """
        Parameters:
         - tunnel_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_tunnel_stats(self, tunnel_oid, counter_ids):
        """
        Parameters:
         - tunnel_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_tunnel_term_table_entry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tunnel_term_table_entry(self, tunnel_term_table_entry_oid):
        """
        Parameters:
         - tunnel_term_table_entry_oid

        """
        pass

    def sai_thrift_set_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_oid, attr):
        """
        Parameters:
         - tunnel_term_table_entry_oid
         - attr

        """
        pass

    def sai_thrift_get_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_oid, attr_list):
        """
        Parameters:
         - tunnel_term_table_entry_oid
         - attr_list

        """
        pass

    def sai_thrift_create_tunnel_map_entry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_tunnel_map_entry(self, tunnel_map_entry_oid):
        """
        Parameters:
         - tunnel_map_entry_oid

        """
        pass

    def sai_thrift_set_tunnel_map_entry_attribute(self, tunnel_map_entry_oid, attr):
        """
        Parameters:
         - tunnel_map_entry_oid
         - attr

        """
        pass

    def sai_thrift_get_tunnel_map_entry_attribute(self, tunnel_map_entry_oid, attr_list):
        """
        Parameters:
         - tunnel_map_entry_oid
         - attr_list

        """
        pass

    def sai_thrift_create_udf(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_udf(self, udf_oid):
        """
        Parameters:
         - udf_oid

        """
        pass

    def sai_thrift_set_udf_attribute(self, udf_oid, attr):
        """
        Parameters:
         - udf_oid
         - attr

        """
        pass

    def sai_thrift_get_udf_attribute(self, udf_oid, attr_list):
        """
        Parameters:
         - udf_oid
         - attr_list

        """
        pass

    def sai_thrift_create_udf_match(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_udf_match(self, udf_match_oid):
        """
        Parameters:
         - udf_match_oid

        """
        pass

    def sai_thrift_set_udf_match_attribute(self, udf_match_oid, attr):
        """
        Parameters:
         - udf_match_oid
         - attr

        """
        pass

    def sai_thrift_get_udf_match_attribute(self, udf_match_oid, attr_list):
        """
        Parameters:
         - udf_match_oid
         - attr_list

        """
        pass

    def sai_thrift_create_udf_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_udf_group(self, udf_group_oid):
        """
        Parameters:
         - udf_group_oid

        """
        pass

    def sai_thrift_set_udf_group_attribute(self, udf_group_oid, attr):
        """
        Parameters:
         - udf_group_oid
         - attr

        """
        pass

    def sai_thrift_get_udf_group_attribute(self, udf_group_oid, attr_list):
        """
        Parameters:
         - udf_group_oid
         - attr_list

        """
        pass

    def sai_thrift_create_virtual_router(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_virtual_router(self, virtual_router_oid):
        """
        Parameters:
         - virtual_router_oid

        """
        pass

    def sai_thrift_set_virtual_router_attribute(self, virtual_router_oid, attr):
        """
        Parameters:
         - virtual_router_oid
         - attr

        """
        pass

    def sai_thrift_get_virtual_router_attribute(self, virtual_router_oid, attr_list):
        """
        Parameters:
         - virtual_router_oid
         - attr_list

        """
        pass

    def sai_thrift_create_vlan(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_vlan(self, vlan_oid):
        """
        Parameters:
         - vlan_oid

        """
        pass

    def sai_thrift_set_vlan_attribute(self, vlan_oid, attr):
        """
        Parameters:
         - vlan_oid
         - attr

        """
        pass

    def sai_thrift_get_vlan_attribute(self, vlan_oid, attr_list):
        """
        Parameters:
         - vlan_oid
         - attr_list

        """
        pass

    def sai_thrift_create_vlan_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_vlan_member(self, vlan_member_oid):
        """
        Parameters:
         - vlan_member_oid

        """
        pass

    def sai_thrift_set_vlan_member_attribute(self, vlan_member_oid, attr):
        """
        Parameters:
         - vlan_member_oid
         - attr

        """
        pass

    def sai_thrift_get_vlan_member_attribute(self, vlan_member_oid, attr_list):
        """
        Parameters:
         - vlan_member_oid
         - attr_list

        """
        pass

    def sai_thrift_get_vlan_stats(self, vlan_oid, counter_ids):
        """
        Parameters:
         - vlan_oid
         - counter_ids

        """
        pass

    def sai_thrift_get_vlan_stats_ext(self, vlan_oid, counter_ids, mode):
        """
        Parameters:
         - vlan_oid
         - counter_ids
         - mode

        """
        pass

    def sai_thrift_clear_vlan_stats(self, vlan_oid, counter_ids):
        """
        Parameters:
         - vlan_oid
         - counter_ids

        """
        pass

    def sai_thrift_create_wred(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        pass

    def sai_thrift_remove_wred(self, wred_oid):
        """
        Parameters:
         - wred_oid

        """
        pass

    def sai_thrift_set_wred_attribute(self, wred_oid, attr):
        """
        Parameters:
         - wred_oid
         - attr

        """
        pass

    def sai_thrift_get_wred_attribute(self, wred_oid, attr_list):
        """
        Parameters:
         - wred_oid
         - attr_list

        """
        pass

    def sai_thrift_query_attribute_enum_values_capability(self, object_type, attr_id, caps_count):
        """
        Parameters:
         - object_type
         - attr_id
         - caps_count

        """
        pass

    def sai_thrift_object_type_get_availability(self, object_type, attr_id, attr_type):
        """
        Parameters:
         - object_type
         - attr_id
         - attr_type

        """
        pass

    def sai_thrift_switch_id_query(self, object_id):
        """
        Parameters:
         - object_id

        """
        pass

    def sai_thrift_object_type_query(self, object_id):
        """
        Parameters:
         - object_id

        """
        pass

    def sai_thrift_api_uninitialize(self):
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def sai_thrift_create_acl_table(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_acl_table(attr_list)
        return self.recv_sai_thrift_create_acl_table()

    def send_sai_thrift_create_acl_table(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_table', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_table_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_table(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_table_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table failed: unknown result")

    def sai_thrift_remove_acl_table(self, acl_table_oid):
        """
        Parameters:
         - acl_table_oid

        """
        self.send_sai_thrift_remove_acl_table(acl_table_oid)
        self.recv_sai_thrift_remove_acl_table()

    def send_sai_thrift_remove_acl_table(self, acl_table_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_table', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_table_args()
        args.acl_table_oid = acl_table_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_table(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_table_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_acl_table_attribute(self, acl_table_oid, attr):
        """
        Parameters:
         - acl_table_oid
         - attr

        """
        self.send_sai_thrift_set_acl_table_attribute(acl_table_oid, attr)
        self.recv_sai_thrift_set_acl_table_attribute()

    def send_sai_thrift_set_acl_table_attribute(self, acl_table_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_acl_table_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_acl_table_attribute_args()
        args.acl_table_oid = acl_table_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_acl_table_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_acl_table_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_acl_table_attribute(self, acl_table_oid, attr_list):
        """
        Parameters:
         - acl_table_oid
         - attr_list

        """
        self.send_sai_thrift_get_acl_table_attribute(acl_table_oid, attr_list)
        return self.recv_sai_thrift_get_acl_table_attribute()

    def send_sai_thrift_get_acl_table_attribute(self, acl_table_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_table_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_table_attribute_args()
        args.acl_table_oid = acl_table_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_table_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_table_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_table_attribute failed: unknown result")

    def sai_thrift_create_acl_entry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_acl_entry(attr_list)
        return self.recv_sai_thrift_create_acl_entry()

    def send_sai_thrift_create_acl_entry(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_entry_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_entry failed: unknown result")

    def sai_thrift_remove_acl_entry(self, acl_entry_oid):
        """
        Parameters:
         - acl_entry_oid

        """
        self.send_sai_thrift_remove_acl_entry(acl_entry_oid)
        self.recv_sai_thrift_remove_acl_entry()

    def send_sai_thrift_remove_acl_entry(self, acl_entry_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_entry_args()
        args.acl_entry_oid = acl_entry_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_acl_entry_attribute(self, acl_entry_oid, attr):
        """
        Parameters:
         - acl_entry_oid
         - attr

        """
        self.send_sai_thrift_set_acl_entry_attribute(acl_entry_oid, attr)
        self.recv_sai_thrift_set_acl_entry_attribute()

    def send_sai_thrift_set_acl_entry_attribute(self, acl_entry_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_acl_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_acl_entry_attribute_args()
        args.acl_entry_oid = acl_entry_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_acl_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_acl_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_acl_entry_attribute(self, acl_entry_oid, attr_list):
        """
        Parameters:
         - acl_entry_oid
         - attr_list

        """
        self.send_sai_thrift_get_acl_entry_attribute(acl_entry_oid, attr_list)
        return self.recv_sai_thrift_get_acl_entry_attribute()

    def send_sai_thrift_get_acl_entry_attribute(self, acl_entry_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_entry_attribute_args()
        args.acl_entry_oid = acl_entry_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_entry_attribute failed: unknown result")

    def sai_thrift_create_acl_counter(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_acl_counter(attr_list)
        return self.recv_sai_thrift_create_acl_counter()

    def send_sai_thrift_create_acl_counter(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_counter_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_counter failed: unknown result")

    def sai_thrift_remove_acl_counter(self, acl_counter_oid):
        """
        Parameters:
         - acl_counter_oid

        """
        self.send_sai_thrift_remove_acl_counter(acl_counter_oid)
        self.recv_sai_thrift_remove_acl_counter()

    def send_sai_thrift_remove_acl_counter(self, acl_counter_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_counter_args()
        args.acl_counter_oid = acl_counter_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_acl_counter_attribute(self, acl_counter_oid, attr):
        """
        Parameters:
         - acl_counter_oid
         - attr

        """
        self.send_sai_thrift_set_acl_counter_attribute(acl_counter_oid, attr)
        self.recv_sai_thrift_set_acl_counter_attribute()

    def send_sai_thrift_set_acl_counter_attribute(self, acl_counter_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_acl_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_acl_counter_attribute_args()
        args.acl_counter_oid = acl_counter_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_acl_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_acl_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_acl_counter_attribute(self, acl_counter_oid, attr_list):
        """
        Parameters:
         - acl_counter_oid
         - attr_list

        """
        self.send_sai_thrift_get_acl_counter_attribute(acl_counter_oid, attr_list)
        return self.recv_sai_thrift_get_acl_counter_attribute()

    def send_sai_thrift_get_acl_counter_attribute(self, acl_counter_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_counter_attribute_args()
        args.acl_counter_oid = acl_counter_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_counter_attribute failed: unknown result")

    def sai_thrift_create_acl_range(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_acl_range(attr_list)
        return self.recv_sai_thrift_create_acl_range()

    def send_sai_thrift_create_acl_range(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_range', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_range_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_range(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_range_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_range failed: unknown result")

    def sai_thrift_remove_acl_range(self, acl_range_oid):
        """
        Parameters:
         - acl_range_oid

        """
        self.send_sai_thrift_remove_acl_range(acl_range_oid)
        self.recv_sai_thrift_remove_acl_range()

    def send_sai_thrift_remove_acl_range(self, acl_range_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_range', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_range_args()
        args.acl_range_oid = acl_range_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_range(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_range_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_acl_range_attribute(self, acl_range_oid, attr):
        """
        Parameters:
         - acl_range_oid
         - attr

        """
        self.send_sai_thrift_set_acl_range_attribute(acl_range_oid, attr)
        self.recv_sai_thrift_set_acl_range_attribute()

    def send_sai_thrift_set_acl_range_attribute(self, acl_range_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_acl_range_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_acl_range_attribute_args()
        args.acl_range_oid = acl_range_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_acl_range_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_acl_range_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_acl_range_attribute(self, acl_range_oid, attr_list):
        """
        Parameters:
         - acl_range_oid
         - attr_list

        """
        self.send_sai_thrift_get_acl_range_attribute(acl_range_oid, attr_list)
        return self.recv_sai_thrift_get_acl_range_attribute()

    def send_sai_thrift_get_acl_range_attribute(self, acl_range_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_range_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_range_attribute_args()
        args.acl_range_oid = acl_range_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_range_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_range_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_range_attribute failed: unknown result")

    def sai_thrift_create_acl_table_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_acl_table_group(attr_list)
        return self.recv_sai_thrift_create_acl_table_group()

    def send_sai_thrift_create_acl_table_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_table_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_table_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_table_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_table_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table_group failed: unknown result")

    def sai_thrift_remove_acl_table_group(self, acl_table_group_oid):
        """
        Parameters:
         - acl_table_group_oid

        """
        self.send_sai_thrift_remove_acl_table_group(acl_table_group_oid)
        self.recv_sai_thrift_remove_acl_table_group()

    def send_sai_thrift_remove_acl_table_group(self, acl_table_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_table_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_table_group_args()
        args.acl_table_group_oid = acl_table_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_table_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_table_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_acl_table_group_attribute(self, acl_table_group_oid, attr):
        """
        Parameters:
         - acl_table_group_oid
         - attr

        """
        self.send_sai_thrift_set_acl_table_group_attribute(acl_table_group_oid, attr)
        self.recv_sai_thrift_set_acl_table_group_attribute()

    def send_sai_thrift_set_acl_table_group_attribute(self, acl_table_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_acl_table_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_acl_table_group_attribute_args()
        args.acl_table_group_oid = acl_table_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_acl_table_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_acl_table_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_acl_table_group_attribute(self, acl_table_group_oid, attr_list):
        """
        Parameters:
         - acl_table_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_acl_table_group_attribute(acl_table_group_oid, attr_list)
        return self.recv_sai_thrift_get_acl_table_group_attribute()

    def send_sai_thrift_get_acl_table_group_attribute(self, acl_table_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_table_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_table_group_attribute_args()
        args.acl_table_group_oid = acl_table_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_table_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_table_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_table_group_attribute failed: unknown result")

    def sai_thrift_create_acl_table_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_acl_table_group_member(attr_list)
        return self.recv_sai_thrift_create_acl_table_group_member()

    def send_sai_thrift_create_acl_table_group_member(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_acl_table_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_acl_table_group_member_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_acl_table_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_acl_table_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table_group_member failed: unknown result")

    def sai_thrift_remove_acl_table_group_member(self, acl_table_group_member_oid):
        """
        Parameters:
         - acl_table_group_member_oid

        """
        self.send_sai_thrift_remove_acl_table_group_member(acl_table_group_member_oid)
        self.recv_sai_thrift_remove_acl_table_group_member()

    def send_sai_thrift_remove_acl_table_group_member(self, acl_table_group_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_acl_table_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_acl_table_group_member_args()
        args.acl_table_group_member_oid = acl_table_group_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_acl_table_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_acl_table_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_acl_table_group_member_attribute(self, acl_table_group_member_oid, attr):
        """
        Parameters:
         - acl_table_group_member_oid
         - attr

        """
        self.send_sai_thrift_set_acl_table_group_member_attribute(acl_table_group_member_oid, attr)
        self.recv_sai_thrift_set_acl_table_group_member_attribute()

    def send_sai_thrift_set_acl_table_group_member_attribute(self, acl_table_group_member_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_acl_table_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_acl_table_group_member_attribute_args()
        args.acl_table_group_member_oid = acl_table_group_member_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_acl_table_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_acl_table_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_acl_table_group_member_attribute(self, acl_table_group_member_oid, attr_list):
        """
        Parameters:
         - acl_table_group_member_oid
         - attr_list

        """
        self.send_sai_thrift_get_acl_table_group_member_attribute(acl_table_group_member_oid, attr_list)
        return self.recv_sai_thrift_get_acl_table_group_member_attribute()

    def send_sai_thrift_get_acl_table_group_member_attribute(self, acl_table_group_member_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_acl_table_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_acl_table_group_member_attribute_args()
        args.acl_table_group_member_oid = acl_table_group_member_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_acl_table_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_acl_table_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_table_group_member_attribute failed: unknown result")

    def sai_thrift_create_bfd_session(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_bfd_session(attr_list)
        return self.recv_sai_thrift_create_bfd_session()

    def send_sai_thrift_create_bfd_session(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_bfd_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_bfd_session_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_bfd_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_bfd_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_bfd_session failed: unknown result")

    def sai_thrift_remove_bfd_session(self, bfd_session_oid):
        """
        Parameters:
         - bfd_session_oid

        """
        self.send_sai_thrift_remove_bfd_session(bfd_session_oid)
        self.recv_sai_thrift_remove_bfd_session()

    def send_sai_thrift_remove_bfd_session(self, bfd_session_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_bfd_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_bfd_session_args()
        args.bfd_session_oid = bfd_session_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_bfd_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_bfd_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_bfd_session_attribute(self, bfd_session_oid, attr):
        """
        Parameters:
         - bfd_session_oid
         - attr

        """
        self.send_sai_thrift_set_bfd_session_attribute(bfd_session_oid, attr)
        self.recv_sai_thrift_set_bfd_session_attribute()

    def send_sai_thrift_set_bfd_session_attribute(self, bfd_session_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_bfd_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_bfd_session_attribute_args()
        args.bfd_session_oid = bfd_session_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_bfd_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_bfd_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_bfd_session_attribute(self, bfd_session_oid, attr_list):
        """
        Parameters:
         - bfd_session_oid
         - attr_list

        """
        self.send_sai_thrift_get_bfd_session_attribute(bfd_session_oid, attr_list)
        return self.recv_sai_thrift_get_bfd_session_attribute()

    def send_sai_thrift_get_bfd_session_attribute(self, bfd_session_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_bfd_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bfd_session_attribute_args()
        args.bfd_session_oid = bfd_session_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bfd_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bfd_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bfd_session_attribute failed: unknown result")

    def sai_thrift_get_bfd_session_stats(self, bfd_session_oid, counter_ids):
        """
        Parameters:
         - bfd_session_oid
         - counter_ids

        """
        self.send_sai_thrift_get_bfd_session_stats(bfd_session_oid, counter_ids)
        return self.recv_sai_thrift_get_bfd_session_stats()

    def send_sai_thrift_get_bfd_session_stats(self, bfd_session_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_bfd_session_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bfd_session_stats_args()
        args.bfd_session_oid = bfd_session_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bfd_session_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bfd_session_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bfd_session_stats failed: unknown result")

    def sai_thrift_get_bfd_session_stats_ext(self, bfd_session_oid, counter_ids, mode):
        """
        Parameters:
         - bfd_session_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_bfd_session_stats_ext(bfd_session_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_bfd_session_stats_ext()

    def send_sai_thrift_get_bfd_session_stats_ext(self, bfd_session_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_bfd_session_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bfd_session_stats_ext_args()
        args.bfd_session_oid = bfd_session_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bfd_session_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bfd_session_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bfd_session_stats_ext failed: unknown result")

    def sai_thrift_clear_bfd_session_stats(self, bfd_session_oid, counter_ids):
        """
        Parameters:
         - bfd_session_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_bfd_session_stats(bfd_session_oid, counter_ids)
        self.recv_sai_thrift_clear_bfd_session_stats()

    def send_sai_thrift_clear_bfd_session_stats(self, bfd_session_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_bfd_session_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_bfd_session_stats_args()
        args.bfd_session_oid = bfd_session_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_bfd_session_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_bfd_session_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_bridge_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_bridge_port(attr_list)
        return self.recv_sai_thrift_create_bridge_port()

    def send_sai_thrift_create_bridge_port(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_bridge_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_bridge_port_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_bridge_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_bridge_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_bridge_port failed: unknown result")

    def sai_thrift_remove_bridge_port(self, bridge_port_oid):
        """
        Parameters:
         - bridge_port_oid

        """
        self.send_sai_thrift_remove_bridge_port(bridge_port_oid)
        self.recv_sai_thrift_remove_bridge_port()

    def send_sai_thrift_remove_bridge_port(self, bridge_port_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_bridge_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_bridge_port_args()
        args.bridge_port_oid = bridge_port_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_bridge_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_bridge_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_bridge_port_attribute(self, bridge_port_oid, attr):
        """
        Parameters:
         - bridge_port_oid
         - attr

        """
        self.send_sai_thrift_set_bridge_port_attribute(bridge_port_oid, attr)
        self.recv_sai_thrift_set_bridge_port_attribute()

    def send_sai_thrift_set_bridge_port_attribute(self, bridge_port_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_bridge_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_bridge_port_attribute_args()
        args.bridge_port_oid = bridge_port_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_bridge_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_bridge_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_bridge_port_attribute(self, bridge_port_oid, attr_list):
        """
        Parameters:
         - bridge_port_oid
         - attr_list

        """
        self.send_sai_thrift_get_bridge_port_attribute(bridge_port_oid, attr_list)
        return self.recv_sai_thrift_get_bridge_port_attribute()

    def send_sai_thrift_get_bridge_port_attribute(self, bridge_port_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_port_attribute_args()
        args.bridge_port_oid = bridge_port_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_port_attribute failed: unknown result")

    def sai_thrift_get_bridge_port_stats(self, bridge_port_oid, counter_ids):
        """
        Parameters:
         - bridge_port_oid
         - counter_ids

        """
        self.send_sai_thrift_get_bridge_port_stats(bridge_port_oid, counter_ids)
        return self.recv_sai_thrift_get_bridge_port_stats()

    def send_sai_thrift_get_bridge_port_stats(self, bridge_port_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_port_stats_args()
        args.bridge_port_oid = bridge_port_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_port_stats failed: unknown result")

    def sai_thrift_get_bridge_port_stats_ext(self, bridge_port_oid, counter_ids, mode):
        """
        Parameters:
         - bridge_port_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_bridge_port_stats_ext(bridge_port_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_bridge_port_stats_ext()

    def send_sai_thrift_get_bridge_port_stats_ext(self, bridge_port_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_port_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_port_stats_ext_args()
        args.bridge_port_oid = bridge_port_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_port_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_port_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_port_stats_ext failed: unknown result")

    def sai_thrift_clear_bridge_port_stats(self, bridge_port_oid, counter_ids):
        """
        Parameters:
         - bridge_port_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_bridge_port_stats(bridge_port_oid, counter_ids)
        self.recv_sai_thrift_clear_bridge_port_stats()

    def send_sai_thrift_clear_bridge_port_stats(self, bridge_port_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_bridge_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_bridge_port_stats_args()
        args.bridge_port_oid = bridge_port_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_bridge_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_bridge_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_bridge(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_bridge(attr_list)
        return self.recv_sai_thrift_create_bridge()

    def send_sai_thrift_create_bridge(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_bridge', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_bridge_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_bridge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_bridge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_bridge failed: unknown result")

    def sai_thrift_remove_bridge(self, bridge_oid):
        """
        Parameters:
         - bridge_oid

        """
        self.send_sai_thrift_remove_bridge(bridge_oid)
        self.recv_sai_thrift_remove_bridge()

    def send_sai_thrift_remove_bridge(self, bridge_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_bridge', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_bridge_args()
        args.bridge_oid = bridge_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_bridge(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_bridge_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_bridge_attribute(self, bridge_oid, attr):
        """
        Parameters:
         - bridge_oid
         - attr

        """
        self.send_sai_thrift_set_bridge_attribute(bridge_oid, attr)
        self.recv_sai_thrift_set_bridge_attribute()

    def send_sai_thrift_set_bridge_attribute(self, bridge_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_bridge_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_bridge_attribute_args()
        args.bridge_oid = bridge_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_bridge_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_bridge_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_bridge_attribute(self, bridge_oid, attr_list):
        """
        Parameters:
         - bridge_oid
         - attr_list

        """
        self.send_sai_thrift_get_bridge_attribute(bridge_oid, attr_list)
        return self.recv_sai_thrift_get_bridge_attribute()

    def send_sai_thrift_get_bridge_attribute(self, bridge_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_attribute_args()
        args.bridge_oid = bridge_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_attribute failed: unknown result")

    def sai_thrift_get_bridge_stats(self, bridge_oid, counter_ids):
        """
        Parameters:
         - bridge_oid
         - counter_ids

        """
        self.send_sai_thrift_get_bridge_stats(bridge_oid, counter_ids)
        return self.recv_sai_thrift_get_bridge_stats()

    def send_sai_thrift_get_bridge_stats(self, bridge_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_stats_args()
        args.bridge_oid = bridge_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_stats failed: unknown result")

    def sai_thrift_get_bridge_stats_ext(self, bridge_oid, counter_ids, mode):
        """
        Parameters:
         - bridge_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_bridge_stats_ext(bridge_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_bridge_stats_ext()

    def send_sai_thrift_get_bridge_stats_ext(self, bridge_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_bridge_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_bridge_stats_ext_args()
        args.bridge_oid = bridge_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_bridge_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_bridge_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_stats_ext failed: unknown result")

    def sai_thrift_clear_bridge_stats(self, bridge_oid, counter_ids):
        """
        Parameters:
         - bridge_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_bridge_stats(bridge_oid, counter_ids)
        self.recv_sai_thrift_clear_bridge_stats()

    def send_sai_thrift_clear_bridge_stats(self, bridge_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_bridge_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_bridge_stats_args()
        args.bridge_oid = bridge_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_bridge_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_bridge_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_ingress_priority_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_ingress_priority_group(attr_list)
        return self.recv_sai_thrift_create_ingress_priority_group()

    def send_sai_thrift_create_ingress_priority_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ingress_priority_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ingress_priority_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ingress_priority_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ingress_priority_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ingress_priority_group failed: unknown result")

    def sai_thrift_remove_ingress_priority_group(self, ingress_priority_group_oid):
        """
        Parameters:
         - ingress_priority_group_oid

        """
        self.send_sai_thrift_remove_ingress_priority_group(ingress_priority_group_oid)
        self.recv_sai_thrift_remove_ingress_priority_group()

    def send_sai_thrift_remove_ingress_priority_group(self, ingress_priority_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_ingress_priority_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ingress_priority_group_args()
        args.ingress_priority_group_oid = ingress_priority_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ingress_priority_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ingress_priority_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_ingress_priority_group_attribute(self, ingress_priority_group_oid, attr):
        """
        Parameters:
         - ingress_priority_group_oid
         - attr

        """
        self.send_sai_thrift_set_ingress_priority_group_attribute(ingress_priority_group_oid, attr)
        self.recv_sai_thrift_set_ingress_priority_group_attribute()

    def send_sai_thrift_set_ingress_priority_group_attribute(self, ingress_priority_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ingress_priority_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ingress_priority_group_attribute_args()
        args.ingress_priority_group_oid = ingress_priority_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ingress_priority_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ingress_priority_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_ingress_priority_group_attribute(self, ingress_priority_group_oid, attr_list):
        """
        Parameters:
         - ingress_priority_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_ingress_priority_group_attribute(ingress_priority_group_oid, attr_list)
        return self.recv_sai_thrift_get_ingress_priority_group_attribute()

    def send_sai_thrift_get_ingress_priority_group_attribute(self, ingress_priority_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_ingress_priority_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ingress_priority_group_attribute_args()
        args.ingress_priority_group_oid = ingress_priority_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ingress_priority_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ingress_priority_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ingress_priority_group_attribute failed: unknown result")

    def sai_thrift_get_ingress_priority_group_stats(self, ingress_priority_group_oid, counter_ids):
        """
        Parameters:
         - ingress_priority_group_oid
         - counter_ids

        """
        self.send_sai_thrift_get_ingress_priority_group_stats(ingress_priority_group_oid, counter_ids)
        return self.recv_sai_thrift_get_ingress_priority_group_stats()

    def send_sai_thrift_get_ingress_priority_group_stats(self, ingress_priority_group_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_ingress_priority_group_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ingress_priority_group_stats_args()
        args.ingress_priority_group_oid = ingress_priority_group_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ingress_priority_group_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ingress_priority_group_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ingress_priority_group_stats failed: unknown result")

    def sai_thrift_get_ingress_priority_group_stats_ext(self, ingress_priority_group_oid, counter_ids, mode):
        """
        Parameters:
         - ingress_priority_group_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_ingress_priority_group_stats_ext(ingress_priority_group_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_ingress_priority_group_stats_ext()

    def send_sai_thrift_get_ingress_priority_group_stats_ext(self, ingress_priority_group_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_ingress_priority_group_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ingress_priority_group_stats_ext_args()
        args.ingress_priority_group_oid = ingress_priority_group_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ingress_priority_group_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ingress_priority_group_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ingress_priority_group_stats_ext failed: unknown result")

    def sai_thrift_clear_ingress_priority_group_stats(self, ingress_priority_group_oid, counter_ids):
        """
        Parameters:
         - ingress_priority_group_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_ingress_priority_group_stats(ingress_priority_group_oid, counter_ids)
        self.recv_sai_thrift_clear_ingress_priority_group_stats()

    def send_sai_thrift_clear_ingress_priority_group_stats(self, ingress_priority_group_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_ingress_priority_group_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_ingress_priority_group_stats_args()
        args.ingress_priority_group_oid = ingress_priority_group_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_ingress_priority_group_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_ingress_priority_group_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_buffer_pool(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_buffer_pool(attr_list)
        return self.recv_sai_thrift_create_buffer_pool()

    def send_sai_thrift_create_buffer_pool(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_buffer_pool', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_buffer_pool_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_buffer_pool(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_buffer_pool_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_buffer_pool failed: unknown result")

    def sai_thrift_remove_buffer_pool(self, buffer_pool_oid):
        """
        Parameters:
         - buffer_pool_oid

        """
        self.send_sai_thrift_remove_buffer_pool(buffer_pool_oid)
        self.recv_sai_thrift_remove_buffer_pool()

    def send_sai_thrift_remove_buffer_pool(self, buffer_pool_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_buffer_pool', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_buffer_pool_args()
        args.buffer_pool_oid = buffer_pool_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_buffer_pool(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_buffer_pool_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_buffer_pool_attribute(self, buffer_pool_oid, attr):
        """
        Parameters:
         - buffer_pool_oid
         - attr

        """
        self.send_sai_thrift_set_buffer_pool_attribute(buffer_pool_oid, attr)
        self.recv_sai_thrift_set_buffer_pool_attribute()

    def send_sai_thrift_set_buffer_pool_attribute(self, buffer_pool_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_buffer_pool_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_buffer_pool_attribute_args()
        args.buffer_pool_oid = buffer_pool_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_buffer_pool_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_buffer_pool_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_buffer_pool_attribute(self, buffer_pool_oid, attr_list):
        """
        Parameters:
         - buffer_pool_oid
         - attr_list

        """
        self.send_sai_thrift_get_buffer_pool_attribute(buffer_pool_oid, attr_list)
        return self.recv_sai_thrift_get_buffer_pool_attribute()

    def send_sai_thrift_get_buffer_pool_attribute(self, buffer_pool_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_buffer_pool_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_buffer_pool_attribute_args()
        args.buffer_pool_oid = buffer_pool_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_buffer_pool_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_buffer_pool_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_buffer_pool_attribute failed: unknown result")

    def sai_thrift_get_buffer_pool_stats(self, buffer_pool_oid, counter_ids):
        """
        Parameters:
         - buffer_pool_oid
         - counter_ids

        """
        self.send_sai_thrift_get_buffer_pool_stats(buffer_pool_oid, counter_ids)
        return self.recv_sai_thrift_get_buffer_pool_stats()

    def send_sai_thrift_get_buffer_pool_stats(self, buffer_pool_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_buffer_pool_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_buffer_pool_stats_args()
        args.buffer_pool_oid = buffer_pool_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_buffer_pool_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_buffer_pool_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_buffer_pool_stats failed: unknown result")

    def sai_thrift_get_buffer_pool_stats_ext(self, buffer_pool_oid, counter_ids, mode):
        """
        Parameters:
         - buffer_pool_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_buffer_pool_stats_ext(buffer_pool_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_buffer_pool_stats_ext()

    def send_sai_thrift_get_buffer_pool_stats_ext(self, buffer_pool_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_buffer_pool_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_buffer_pool_stats_ext_args()
        args.buffer_pool_oid = buffer_pool_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_buffer_pool_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_buffer_pool_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_buffer_pool_stats_ext failed: unknown result")

    def sai_thrift_clear_buffer_pool_stats(self, buffer_pool_oid, counter_ids):
        """
        Parameters:
         - buffer_pool_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_buffer_pool_stats(buffer_pool_oid, counter_ids)
        self.recv_sai_thrift_clear_buffer_pool_stats()

    def send_sai_thrift_clear_buffer_pool_stats(self, buffer_pool_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_buffer_pool_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_buffer_pool_stats_args()
        args.buffer_pool_oid = buffer_pool_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_buffer_pool_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_buffer_pool_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_buffer_profile(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_buffer_profile(attr_list)
        return self.recv_sai_thrift_create_buffer_profile()

    def send_sai_thrift_create_buffer_profile(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_buffer_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_buffer_profile_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_buffer_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_buffer_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_buffer_profile failed: unknown result")

    def sai_thrift_remove_buffer_profile(self, buffer_profile_oid):
        """
        Parameters:
         - buffer_profile_oid

        """
        self.send_sai_thrift_remove_buffer_profile(buffer_profile_oid)
        self.recv_sai_thrift_remove_buffer_profile()

    def send_sai_thrift_remove_buffer_profile(self, buffer_profile_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_buffer_profile', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_buffer_profile_args()
        args.buffer_profile_oid = buffer_profile_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_buffer_profile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_buffer_profile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_buffer_profile_attribute(self, buffer_profile_oid, attr):
        """
        Parameters:
         - buffer_profile_oid
         - attr

        """
        self.send_sai_thrift_set_buffer_profile_attribute(buffer_profile_oid, attr)
        self.recv_sai_thrift_set_buffer_profile_attribute()

    def send_sai_thrift_set_buffer_profile_attribute(self, buffer_profile_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_buffer_profile_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_buffer_profile_attribute_args()
        args.buffer_profile_oid = buffer_profile_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_buffer_profile_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_buffer_profile_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_buffer_profile_attribute(self, buffer_profile_oid, attr_list):
        """
        Parameters:
         - buffer_profile_oid
         - attr_list

        """
        self.send_sai_thrift_get_buffer_profile_attribute(buffer_profile_oid, attr_list)
        return self.recv_sai_thrift_get_buffer_profile_attribute()

    def send_sai_thrift_get_buffer_profile_attribute(self, buffer_profile_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_buffer_profile_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_buffer_profile_attribute_args()
        args.buffer_profile_oid = buffer_profile_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_buffer_profile_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_buffer_profile_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_buffer_profile_attribute failed: unknown result")

    def sai_thrift_create_counter(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_counter(attr_list)
        return self.recv_sai_thrift_create_counter()

    def send_sai_thrift_create_counter(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_counter_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_counter failed: unknown result")

    def sai_thrift_remove_counter(self, counter_oid):
        """
        Parameters:
         - counter_oid

        """
        self.send_sai_thrift_remove_counter(counter_oid)
        self.recv_sai_thrift_remove_counter()

    def send_sai_thrift_remove_counter(self, counter_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_counter_args()
        args.counter_oid = counter_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_counter_attribute(self, counter_oid, attr):
        """
        Parameters:
         - counter_oid
         - attr

        """
        self.send_sai_thrift_set_counter_attribute(counter_oid, attr)
        self.recv_sai_thrift_set_counter_attribute()

    def send_sai_thrift_set_counter_attribute(self, counter_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_counter_attribute_args()
        args.counter_oid = counter_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_counter_attribute(self, counter_oid, attr_list):
        """
        Parameters:
         - counter_oid
         - attr_list

        """
        self.send_sai_thrift_get_counter_attribute(counter_oid, attr_list)
        return self.recv_sai_thrift_get_counter_attribute()

    def send_sai_thrift_get_counter_attribute(self, counter_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_counter_attribute_args()
        args.counter_oid = counter_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_counter_attribute failed: unknown result")

    def sai_thrift_get_counter_stats(self, counter_oid, counter_ids):
        """
        Parameters:
         - counter_oid
         - counter_ids

        """
        self.send_sai_thrift_get_counter_stats(counter_oid, counter_ids)
        return self.recv_sai_thrift_get_counter_stats()

    def send_sai_thrift_get_counter_stats(self, counter_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_counter_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_counter_stats_args()
        args.counter_oid = counter_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_counter_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_counter_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_counter_stats failed: unknown result")

    def sai_thrift_get_counter_stats_ext(self, counter_oid, counter_ids, mode):
        """
        Parameters:
         - counter_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_counter_stats_ext(counter_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_counter_stats_ext()

    def send_sai_thrift_get_counter_stats_ext(self, counter_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_counter_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_counter_stats_ext_args()
        args.counter_oid = counter_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_counter_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_counter_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_counter_stats_ext failed: unknown result")

    def sai_thrift_clear_counter_stats(self, counter_oid, counter_ids):
        """
        Parameters:
         - counter_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_counter_stats(counter_oid, counter_ids)
        self.recv_sai_thrift_clear_counter_stats()

    def send_sai_thrift_clear_counter_stats(self, counter_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_counter_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_counter_stats_args()
        args.counter_oid = counter_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_counter_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_counter_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_debug_counter(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_debug_counter(attr_list)
        return self.recv_sai_thrift_create_debug_counter()

    def send_sai_thrift_create_debug_counter(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_debug_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_debug_counter_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_debug_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_debug_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_debug_counter failed: unknown result")

    def sai_thrift_remove_debug_counter(self, debug_counter_oid):
        """
        Parameters:
         - debug_counter_oid

        """
        self.send_sai_thrift_remove_debug_counter(debug_counter_oid)
        self.recv_sai_thrift_remove_debug_counter()

    def send_sai_thrift_remove_debug_counter(self, debug_counter_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_debug_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_debug_counter_args()
        args.debug_counter_oid = debug_counter_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_debug_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_debug_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_debug_counter_attribute(self, debug_counter_oid, attr):
        """
        Parameters:
         - debug_counter_oid
         - attr

        """
        self.send_sai_thrift_set_debug_counter_attribute(debug_counter_oid, attr)
        self.recv_sai_thrift_set_debug_counter_attribute()

    def send_sai_thrift_set_debug_counter_attribute(self, debug_counter_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_debug_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_debug_counter_attribute_args()
        args.debug_counter_oid = debug_counter_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_debug_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_debug_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_debug_counter_attribute(self, debug_counter_oid, attr_list):
        """
        Parameters:
         - debug_counter_oid
         - attr_list

        """
        self.send_sai_thrift_get_debug_counter_attribute(debug_counter_oid, attr_list)
        return self.recv_sai_thrift_get_debug_counter_attribute()

    def send_sai_thrift_get_debug_counter_attribute(self, debug_counter_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_debug_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_debug_counter_attribute_args()
        args.debug_counter_oid = debug_counter_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_debug_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_debug_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_debug_counter_attribute failed: unknown result")

    def sai_thrift_create_dtel(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_dtel(attr_list)
        return self.recv_sai_thrift_create_dtel()

    def send_sai_thrift_create_dtel(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_dtel', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_dtel_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_dtel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_dtel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_dtel failed: unknown result")

    def sai_thrift_remove_dtel(self, dtel_oid):
        """
        Parameters:
         - dtel_oid

        """
        self.send_sai_thrift_remove_dtel(dtel_oid)
        self.recv_sai_thrift_remove_dtel()

    def send_sai_thrift_remove_dtel(self, dtel_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_dtel', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_dtel_args()
        args.dtel_oid = dtel_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_dtel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_dtel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_dtel_attribute(self, dtel_oid, attr):
        """
        Parameters:
         - dtel_oid
         - attr

        """
        self.send_sai_thrift_set_dtel_attribute(dtel_oid, attr)
        self.recv_sai_thrift_set_dtel_attribute()

    def send_sai_thrift_set_dtel_attribute(self, dtel_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_dtel_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_dtel_attribute_args()
        args.dtel_oid = dtel_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_dtel_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_dtel_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_dtel_attribute(self, dtel_oid, attr_list):
        """
        Parameters:
         - dtel_oid
         - attr_list

        """
        self.send_sai_thrift_get_dtel_attribute(dtel_oid, attr_list)
        return self.recv_sai_thrift_get_dtel_attribute()

    def send_sai_thrift_get_dtel_attribute(self, dtel_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_dtel_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_dtel_attribute_args()
        args.dtel_oid = dtel_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_dtel_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_dtel_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_dtel_attribute failed: unknown result")

    def sai_thrift_create_dtel_queue_report(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_dtel_queue_report(attr_list)
        return self.recv_sai_thrift_create_dtel_queue_report()

    def send_sai_thrift_create_dtel_queue_report(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_dtel_queue_report', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_dtel_queue_report_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_dtel_queue_report(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_dtel_queue_report_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_dtel_queue_report failed: unknown result")

    def sai_thrift_remove_dtel_queue_report(self, dtel_queue_report_oid):
        """
        Parameters:
         - dtel_queue_report_oid

        """
        self.send_sai_thrift_remove_dtel_queue_report(dtel_queue_report_oid)
        self.recv_sai_thrift_remove_dtel_queue_report()

    def send_sai_thrift_remove_dtel_queue_report(self, dtel_queue_report_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_dtel_queue_report', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_dtel_queue_report_args()
        args.dtel_queue_report_oid = dtel_queue_report_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_dtel_queue_report(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_dtel_queue_report_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_dtel_queue_report_attribute(self, dtel_queue_report_oid, attr):
        """
        Parameters:
         - dtel_queue_report_oid
         - attr

        """
        self.send_sai_thrift_set_dtel_queue_report_attribute(dtel_queue_report_oid, attr)
        self.recv_sai_thrift_set_dtel_queue_report_attribute()

    def send_sai_thrift_set_dtel_queue_report_attribute(self, dtel_queue_report_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_dtel_queue_report_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_dtel_queue_report_attribute_args()
        args.dtel_queue_report_oid = dtel_queue_report_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_dtel_queue_report_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_dtel_queue_report_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_dtel_queue_report_attribute(self, dtel_queue_report_oid, attr_list):
        """
        Parameters:
         - dtel_queue_report_oid
         - attr_list

        """
        self.send_sai_thrift_get_dtel_queue_report_attribute(dtel_queue_report_oid, attr_list)
        return self.recv_sai_thrift_get_dtel_queue_report_attribute()

    def send_sai_thrift_get_dtel_queue_report_attribute(self, dtel_queue_report_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_dtel_queue_report_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_dtel_queue_report_attribute_args()
        args.dtel_queue_report_oid = dtel_queue_report_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_dtel_queue_report_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_dtel_queue_report_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_dtel_queue_report_attribute failed: unknown result")

    def sai_thrift_create_dtel_int_session(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_dtel_int_session(attr_list)
        return self.recv_sai_thrift_create_dtel_int_session()

    def send_sai_thrift_create_dtel_int_session(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_dtel_int_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_dtel_int_session_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_dtel_int_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_dtel_int_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_dtel_int_session failed: unknown result")

    def sai_thrift_remove_dtel_int_session(self, dtel_int_session_oid):
        """
        Parameters:
         - dtel_int_session_oid

        """
        self.send_sai_thrift_remove_dtel_int_session(dtel_int_session_oid)
        self.recv_sai_thrift_remove_dtel_int_session()

    def send_sai_thrift_remove_dtel_int_session(self, dtel_int_session_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_dtel_int_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_dtel_int_session_args()
        args.dtel_int_session_oid = dtel_int_session_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_dtel_int_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_dtel_int_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_dtel_int_session_attribute(self, dtel_int_session_oid, attr):
        """
        Parameters:
         - dtel_int_session_oid
         - attr

        """
        self.send_sai_thrift_set_dtel_int_session_attribute(dtel_int_session_oid, attr)
        self.recv_sai_thrift_set_dtel_int_session_attribute()

    def send_sai_thrift_set_dtel_int_session_attribute(self, dtel_int_session_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_dtel_int_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_dtel_int_session_attribute_args()
        args.dtel_int_session_oid = dtel_int_session_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_dtel_int_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_dtel_int_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_dtel_int_session_attribute(self, dtel_int_session_oid, attr_list):
        """
        Parameters:
         - dtel_int_session_oid
         - attr_list

        """
        self.send_sai_thrift_get_dtel_int_session_attribute(dtel_int_session_oid, attr_list)
        return self.recv_sai_thrift_get_dtel_int_session_attribute()

    def send_sai_thrift_get_dtel_int_session_attribute(self, dtel_int_session_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_dtel_int_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_dtel_int_session_attribute_args()
        args.dtel_int_session_oid = dtel_int_session_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_dtel_int_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_dtel_int_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_dtel_int_session_attribute failed: unknown result")

    def sai_thrift_create_dtel_report_session(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_dtel_report_session(attr_list)
        return self.recv_sai_thrift_create_dtel_report_session()

    def send_sai_thrift_create_dtel_report_session(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_dtel_report_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_dtel_report_session_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_dtel_report_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_dtel_report_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_dtel_report_session failed: unknown result")

    def sai_thrift_remove_dtel_report_session(self, dtel_report_session_oid):
        """
        Parameters:
         - dtel_report_session_oid

        """
        self.send_sai_thrift_remove_dtel_report_session(dtel_report_session_oid)
        self.recv_sai_thrift_remove_dtel_report_session()

    def send_sai_thrift_remove_dtel_report_session(self, dtel_report_session_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_dtel_report_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_dtel_report_session_args()
        args.dtel_report_session_oid = dtel_report_session_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_dtel_report_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_dtel_report_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_dtel_report_session_attribute(self, dtel_report_session_oid, attr):
        """
        Parameters:
         - dtel_report_session_oid
         - attr

        """
        self.send_sai_thrift_set_dtel_report_session_attribute(dtel_report_session_oid, attr)
        self.recv_sai_thrift_set_dtel_report_session_attribute()

    def send_sai_thrift_set_dtel_report_session_attribute(self, dtel_report_session_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_dtel_report_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_dtel_report_session_attribute_args()
        args.dtel_report_session_oid = dtel_report_session_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_dtel_report_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_dtel_report_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_dtel_report_session_attribute(self, dtel_report_session_oid, attr_list):
        """
        Parameters:
         - dtel_report_session_oid
         - attr_list

        """
        self.send_sai_thrift_get_dtel_report_session_attribute(dtel_report_session_oid, attr_list)
        return self.recv_sai_thrift_get_dtel_report_session_attribute()

    def send_sai_thrift_get_dtel_report_session_attribute(self, dtel_report_session_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_dtel_report_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_dtel_report_session_attribute_args()
        args.dtel_report_session_oid = dtel_report_session_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_dtel_report_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_dtel_report_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_dtel_report_session_attribute failed: unknown result")

    def sai_thrift_create_dtel_event(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_dtel_event(attr_list)
        return self.recv_sai_thrift_create_dtel_event()

    def send_sai_thrift_create_dtel_event(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_dtel_event', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_dtel_event_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_dtel_event(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_dtel_event_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_dtel_event failed: unknown result")

    def sai_thrift_remove_dtel_event(self, dtel_event_oid):
        """
        Parameters:
         - dtel_event_oid

        """
        self.send_sai_thrift_remove_dtel_event(dtel_event_oid)
        self.recv_sai_thrift_remove_dtel_event()

    def send_sai_thrift_remove_dtel_event(self, dtel_event_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_dtel_event', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_dtel_event_args()
        args.dtel_event_oid = dtel_event_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_dtel_event(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_dtel_event_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_dtel_event_attribute(self, dtel_event_oid, attr):
        """
        Parameters:
         - dtel_event_oid
         - attr

        """
        self.send_sai_thrift_set_dtel_event_attribute(dtel_event_oid, attr)
        self.recv_sai_thrift_set_dtel_event_attribute()

    def send_sai_thrift_set_dtel_event_attribute(self, dtel_event_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_dtel_event_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_dtel_event_attribute_args()
        args.dtel_event_oid = dtel_event_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_dtel_event_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_dtel_event_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_dtel_event_attribute(self, dtel_event_oid, attr_list):
        """
        Parameters:
         - dtel_event_oid
         - attr_list

        """
        self.send_sai_thrift_get_dtel_event_attribute(dtel_event_oid, attr_list)
        return self.recv_sai_thrift_get_dtel_event_attribute()

    def send_sai_thrift_get_dtel_event_attribute(self, dtel_event_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_dtel_event_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_dtel_event_attribute_args()
        args.dtel_event_oid = dtel_event_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_dtel_event_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_dtel_event_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_dtel_event_attribute failed: unknown result")

    def sai_thrift_create_fdb_entry(self, fdb_entry, attr_list):
        """
        Parameters:
         - fdb_entry
         - attr_list

        """
        self.send_sai_thrift_create_fdb_entry(fdb_entry, attr_list)
        self.recv_sai_thrift_create_fdb_entry()

    def send_sai_thrift_create_fdb_entry(self, fdb_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_fdb_entry_args()
        args.fdb_entry = fdb_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_remove_fdb_entry(self, fdb_entry):
        """
        Parameters:
         - fdb_entry

        """
        self.send_sai_thrift_remove_fdb_entry(fdb_entry)
        self.recv_sai_thrift_remove_fdb_entry()

    def send_sai_thrift_remove_fdb_entry(self, fdb_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_fdb_entry_args()
        args.fdb_entry = fdb_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_fdb_entry_attribute(self, fdb_entry, attr):
        """
        Parameters:
         - fdb_entry
         - attr

        """
        self.send_sai_thrift_set_fdb_entry_attribute(fdb_entry, attr)
        self.recv_sai_thrift_set_fdb_entry_attribute()

    def send_sai_thrift_set_fdb_entry_attribute(self, fdb_entry, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_fdb_entry_attribute_args()
        args.fdb_entry = fdb_entry
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_fdb_entry_attribute(self, fdb_entry, attr_list):
        """
        Parameters:
         - fdb_entry
         - attr_list

        """
        self.send_sai_thrift_get_fdb_entry_attribute(fdb_entry, attr_list)
        return self.recv_sai_thrift_get_fdb_entry_attribute()

    def send_sai_thrift_get_fdb_entry_attribute(self, fdb_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_fdb_entry_attribute_args()
        args.fdb_entry = fdb_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_fdb_entry_attribute failed: unknown result")

    def sai_thrift_flush_fdb_entries(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_flush_fdb_entries(attr_list)
        self.recv_sai_thrift_flush_fdb_entries()

    def send_sai_thrift_flush_fdb_entries(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_flush_fdb_entries', TMessageType.CALL, self._seqid)
        args = sai_thrift_flush_fdb_entries_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_flush_fdb_entries(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_flush_fdb_entries_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_bulk_create_fdb_entry(self, fdb_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - fdb_entry
         - attr_count
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_create_fdb_entry(fdb_entry, attr_count, attr_list, mode)
        return self.recv_sai_thrift_bulk_create_fdb_entry()

    def send_sai_thrift_bulk_create_fdb_entry(self, fdb_entry, attr_count, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_create_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_create_fdb_entry_args()
        args.fdb_entry = fdb_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_create_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_create_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_create_fdb_entry failed: unknown result")

    def sai_thrift_bulk_remove_fdb_entry(self, fdb_entry, mode):
        """
        Parameters:
         - fdb_entry
         - mode

        """
        self.send_sai_thrift_bulk_remove_fdb_entry(fdb_entry, mode)
        return self.recv_sai_thrift_bulk_remove_fdb_entry()

    def send_sai_thrift_bulk_remove_fdb_entry(self, fdb_entry, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_remove_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_remove_fdb_entry_args()
        args.fdb_entry = fdb_entry
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_remove_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_remove_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_remove_fdb_entry failed: unknown result")

    def sai_thrift_bulk_set_fdb_entry_attribute(self, fdb_entry, attr_list, mode):
        """
        Parameters:
         - fdb_entry
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_set_fdb_entry_attribute(fdb_entry, attr_list, mode)
        return self.recv_sai_thrift_bulk_set_fdb_entry_attribute()

    def send_sai_thrift_bulk_set_fdb_entry_attribute(self, fdb_entry, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_set_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_set_fdb_entry_attribute_args()
        args.fdb_entry = fdb_entry
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_set_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_set_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_set_fdb_entry_attribute failed: unknown result")

    def sai_thrift_bulk_get_fdb_entry_attribute(self, fdb_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - fdb_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        self.send_sai_thrift_bulk_get_fdb_entry_attribute(fdb_entry, attr_count, attr_list, mode, object_statuses)
        return self.recv_sai_thrift_bulk_get_fdb_entry_attribute()

    def send_sai_thrift_bulk_get_fdb_entry_attribute(self, fdb_entry, attr_count, attr_list, mode, object_statuses):
        self._oprot.writeMessageBegin('sai_thrift_bulk_get_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_get_fdb_entry_attribute_args()
        args.fdb_entry = fdb_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.object_statuses = object_statuses
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_get_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_get_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_get_fdb_entry_attribute failed: unknown result")

    def sai_thrift_create_generic_programmable(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_generic_programmable(attr_list)
        return self.recv_sai_thrift_create_generic_programmable()

    def send_sai_thrift_create_generic_programmable(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_generic_programmable', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_generic_programmable_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_generic_programmable(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_generic_programmable_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_generic_programmable failed: unknown result")

    def sai_thrift_remove_generic_programmable(self, generic_programmable_oid):
        """
        Parameters:
         - generic_programmable_oid

        """
        self.send_sai_thrift_remove_generic_programmable(generic_programmable_oid)
        self.recv_sai_thrift_remove_generic_programmable()

    def send_sai_thrift_remove_generic_programmable(self, generic_programmable_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_generic_programmable', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_generic_programmable_args()
        args.generic_programmable_oid = generic_programmable_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_generic_programmable(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_generic_programmable_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_generic_programmable_attribute(self, generic_programmable_oid, attr):
        """
        Parameters:
         - generic_programmable_oid
         - attr

        """
        self.send_sai_thrift_set_generic_programmable_attribute(generic_programmable_oid, attr)
        self.recv_sai_thrift_set_generic_programmable_attribute()

    def send_sai_thrift_set_generic_programmable_attribute(self, generic_programmable_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_generic_programmable_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_generic_programmable_attribute_args()
        args.generic_programmable_oid = generic_programmable_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_generic_programmable_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_generic_programmable_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_generic_programmable_attribute(self, generic_programmable_oid, attr_list):
        """
        Parameters:
         - generic_programmable_oid
         - attr_list

        """
        self.send_sai_thrift_get_generic_programmable_attribute(generic_programmable_oid, attr_list)
        return self.recv_sai_thrift_get_generic_programmable_attribute()

    def send_sai_thrift_get_generic_programmable_attribute(self, generic_programmable_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_generic_programmable_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_generic_programmable_attribute_args()
        args.generic_programmable_oid = generic_programmable_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_generic_programmable_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_generic_programmable_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_generic_programmable_attribute failed: unknown result")

    def sai_thrift_create_fine_grained_hash_field(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_fine_grained_hash_field(attr_list)
        return self.recv_sai_thrift_create_fine_grained_hash_field()

    def send_sai_thrift_create_fine_grained_hash_field(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_fine_grained_hash_field', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_fine_grained_hash_field_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_fine_grained_hash_field(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_fine_grained_hash_field_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_fine_grained_hash_field failed: unknown result")

    def sai_thrift_remove_fine_grained_hash_field(self, fine_grained_hash_field_oid):
        """
        Parameters:
         - fine_grained_hash_field_oid

        """
        self.send_sai_thrift_remove_fine_grained_hash_field(fine_grained_hash_field_oid)
        self.recv_sai_thrift_remove_fine_grained_hash_field()

    def send_sai_thrift_remove_fine_grained_hash_field(self, fine_grained_hash_field_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_fine_grained_hash_field', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_fine_grained_hash_field_args()
        args.fine_grained_hash_field_oid = fine_grained_hash_field_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_fine_grained_hash_field(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_fine_grained_hash_field_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_fine_grained_hash_field_attribute(self, fine_grained_hash_field_oid, attr):
        """
        Parameters:
         - fine_grained_hash_field_oid
         - attr

        """
        self.send_sai_thrift_set_fine_grained_hash_field_attribute(fine_grained_hash_field_oid, attr)
        self.recv_sai_thrift_set_fine_grained_hash_field_attribute()

    def send_sai_thrift_set_fine_grained_hash_field_attribute(self, fine_grained_hash_field_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_fine_grained_hash_field_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_fine_grained_hash_field_attribute_args()
        args.fine_grained_hash_field_oid = fine_grained_hash_field_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_fine_grained_hash_field_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_fine_grained_hash_field_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_fine_grained_hash_field_attribute(self, fine_grained_hash_field_oid, attr_list):
        """
        Parameters:
         - fine_grained_hash_field_oid
         - attr_list

        """
        self.send_sai_thrift_get_fine_grained_hash_field_attribute(fine_grained_hash_field_oid, attr_list)
        return self.recv_sai_thrift_get_fine_grained_hash_field_attribute()

    def send_sai_thrift_get_fine_grained_hash_field_attribute(self, fine_grained_hash_field_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_fine_grained_hash_field_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_fine_grained_hash_field_attribute_args()
        args.fine_grained_hash_field_oid = fine_grained_hash_field_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_fine_grained_hash_field_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_fine_grained_hash_field_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_fine_grained_hash_field_attribute failed: unknown result")

    def sai_thrift_create_hash(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_hash(attr_list)
        return self.recv_sai_thrift_create_hash()

    def send_sai_thrift_create_hash(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hash', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hash_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hash(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hash_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hash failed: unknown result")

    def sai_thrift_remove_hash(self, hash_oid):
        """
        Parameters:
         - hash_oid

        """
        self.send_sai_thrift_remove_hash(hash_oid)
        self.recv_sai_thrift_remove_hash()

    def send_sai_thrift_remove_hash(self, hash_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_hash', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hash_args()
        args.hash_oid = hash_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hash(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hash_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_hash_attribute(self, hash_oid, attr):
        """
        Parameters:
         - hash_oid
         - attr

        """
        self.send_sai_thrift_set_hash_attribute(hash_oid, attr)
        self.recv_sai_thrift_set_hash_attribute()

    def send_sai_thrift_set_hash_attribute(self, hash_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hash_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hash_attribute_args()
        args.hash_oid = hash_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hash_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hash_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_hash_attribute(self, hash_oid, attr_list):
        """
        Parameters:
         - hash_oid
         - attr_list

        """
        self.send_sai_thrift_get_hash_attribute(hash_oid, attr_list)
        return self.recv_sai_thrift_get_hash_attribute()

    def send_sai_thrift_get_hash_attribute(self, hash_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_hash_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hash_attribute_args()
        args.hash_oid = hash_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hash_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hash_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hash_attribute failed: unknown result")

    def sai_thrift_create_hostif_trap_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_hostif_trap_group(attr_list)
        return self.recv_sai_thrift_create_hostif_trap_group()

    def send_sai_thrift_create_hostif_trap_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hostif_trap_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hostif_trap_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hostif_trap_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hostif_trap_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_trap_group failed: unknown result")

    def sai_thrift_remove_hostif_trap_group(self, hostif_trap_group_oid):
        """
        Parameters:
         - hostif_trap_group_oid

        """
        self.send_sai_thrift_remove_hostif_trap_group(hostif_trap_group_oid)
        self.recv_sai_thrift_remove_hostif_trap_group()

    def send_sai_thrift_remove_hostif_trap_group(self, hostif_trap_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_hostif_trap_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hostif_trap_group_args()
        args.hostif_trap_group_oid = hostif_trap_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hostif_trap_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hostif_trap_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_hostif_trap_group_attribute(self, hostif_trap_group_oid, attr):
        """
        Parameters:
         - hostif_trap_group_oid
         - attr

        """
        self.send_sai_thrift_set_hostif_trap_group_attribute(hostif_trap_group_oid, attr)
        self.recv_sai_thrift_set_hostif_trap_group_attribute()

    def send_sai_thrift_set_hostif_trap_group_attribute(self, hostif_trap_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hostif_trap_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hostif_trap_group_attribute_args()
        args.hostif_trap_group_oid = hostif_trap_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hostif_trap_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hostif_trap_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_hostif_trap_group_attribute(self, hostif_trap_group_oid, attr_list):
        """
        Parameters:
         - hostif_trap_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_hostif_trap_group_attribute(hostif_trap_group_oid, attr_list)
        return self.recv_sai_thrift_get_hostif_trap_group_attribute()

    def send_sai_thrift_get_hostif_trap_group_attribute(self, hostif_trap_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_hostif_trap_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hostif_trap_group_attribute_args()
        args.hostif_trap_group_oid = hostif_trap_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hostif_trap_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hostif_trap_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_trap_group_attribute failed: unknown result")

    def sai_thrift_create_hostif_trap(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_hostif_trap(attr_list)
        return self.recv_sai_thrift_create_hostif_trap()

    def send_sai_thrift_create_hostif_trap(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hostif_trap', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hostif_trap_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hostif_trap(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hostif_trap_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_trap failed: unknown result")

    def sai_thrift_remove_hostif_trap(self, hostif_trap_oid):
        """
        Parameters:
         - hostif_trap_oid

        """
        self.send_sai_thrift_remove_hostif_trap(hostif_trap_oid)
        self.recv_sai_thrift_remove_hostif_trap()

    def send_sai_thrift_remove_hostif_trap(self, hostif_trap_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_hostif_trap', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hostif_trap_args()
        args.hostif_trap_oid = hostif_trap_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hostif_trap(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hostif_trap_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_hostif_trap_attribute(self, hostif_trap_oid, attr):
        """
        Parameters:
         - hostif_trap_oid
         - attr

        """
        self.send_sai_thrift_set_hostif_trap_attribute(hostif_trap_oid, attr)
        self.recv_sai_thrift_set_hostif_trap_attribute()

    def send_sai_thrift_set_hostif_trap_attribute(self, hostif_trap_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hostif_trap_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hostif_trap_attribute_args()
        args.hostif_trap_oid = hostif_trap_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hostif_trap_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hostif_trap_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_hostif_trap_attribute(self, hostif_trap_oid, attr_list):
        """
        Parameters:
         - hostif_trap_oid
         - attr_list

        """
        self.send_sai_thrift_get_hostif_trap_attribute(hostif_trap_oid, attr_list)
        return self.recv_sai_thrift_get_hostif_trap_attribute()

    def send_sai_thrift_get_hostif_trap_attribute(self, hostif_trap_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_hostif_trap_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hostif_trap_attribute_args()
        args.hostif_trap_oid = hostif_trap_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hostif_trap_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hostif_trap_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_trap_attribute failed: unknown result")

    def sai_thrift_create_hostif_user_defined_trap(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_hostif_user_defined_trap(attr_list)
        return self.recv_sai_thrift_create_hostif_user_defined_trap()

    def send_sai_thrift_create_hostif_user_defined_trap(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hostif_user_defined_trap', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hostif_user_defined_trap_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hostif_user_defined_trap(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hostif_user_defined_trap_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_user_defined_trap failed: unknown result")

    def sai_thrift_remove_hostif_user_defined_trap(self, hostif_user_defined_trap_oid):
        """
        Parameters:
         - hostif_user_defined_trap_oid

        """
        self.send_sai_thrift_remove_hostif_user_defined_trap(hostif_user_defined_trap_oid)
        self.recv_sai_thrift_remove_hostif_user_defined_trap()

    def send_sai_thrift_remove_hostif_user_defined_trap(self, hostif_user_defined_trap_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_hostif_user_defined_trap', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hostif_user_defined_trap_args()
        args.hostif_user_defined_trap_oid = hostif_user_defined_trap_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hostif_user_defined_trap(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hostif_user_defined_trap_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_hostif_user_defined_trap_attribute(self, hostif_user_defined_trap_oid, attr):
        """
        Parameters:
         - hostif_user_defined_trap_oid
         - attr

        """
        self.send_sai_thrift_set_hostif_user_defined_trap_attribute(hostif_user_defined_trap_oid, attr)
        self.recv_sai_thrift_set_hostif_user_defined_trap_attribute()

    def send_sai_thrift_set_hostif_user_defined_trap_attribute(self, hostif_user_defined_trap_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hostif_user_defined_trap_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hostif_user_defined_trap_attribute_args()
        args.hostif_user_defined_trap_oid = hostif_user_defined_trap_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hostif_user_defined_trap_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hostif_user_defined_trap_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_hostif_user_defined_trap_attribute(self, hostif_user_defined_trap_oid, attr_list):
        """
        Parameters:
         - hostif_user_defined_trap_oid
         - attr_list

        """
        self.send_sai_thrift_get_hostif_user_defined_trap_attribute(hostif_user_defined_trap_oid, attr_list)
        return self.recv_sai_thrift_get_hostif_user_defined_trap_attribute()

    def send_sai_thrift_get_hostif_user_defined_trap_attribute(self, hostif_user_defined_trap_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_hostif_user_defined_trap_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hostif_user_defined_trap_attribute_args()
        args.hostif_user_defined_trap_oid = hostif_user_defined_trap_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hostif_user_defined_trap_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hostif_user_defined_trap_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_user_defined_trap_attribute failed: unknown result")

    def sai_thrift_create_hostif(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_hostif(attr_list)
        return self.recv_sai_thrift_create_hostif()

    def send_sai_thrift_create_hostif(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hostif', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hostif_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hostif(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hostif_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif failed: unknown result")

    def sai_thrift_remove_hostif(self, hostif_oid):
        """
        Parameters:
         - hostif_oid

        """
        self.send_sai_thrift_remove_hostif(hostif_oid)
        self.recv_sai_thrift_remove_hostif()

    def send_sai_thrift_remove_hostif(self, hostif_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_hostif', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hostif_args()
        args.hostif_oid = hostif_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hostif(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hostif_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_hostif_attribute(self, hostif_oid, attr):
        """
        Parameters:
         - hostif_oid
         - attr

        """
        self.send_sai_thrift_set_hostif_attribute(hostif_oid, attr)
        self.recv_sai_thrift_set_hostif_attribute()

    def send_sai_thrift_set_hostif_attribute(self, hostif_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hostif_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hostif_attribute_args()
        args.hostif_oid = hostif_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hostif_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hostif_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_hostif_attribute(self, hostif_oid, attr_list):
        """
        Parameters:
         - hostif_oid
         - attr_list

        """
        self.send_sai_thrift_get_hostif_attribute(hostif_oid, attr_list)
        return self.recv_sai_thrift_get_hostif_attribute()

    def send_sai_thrift_get_hostif_attribute(self, hostif_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_hostif_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hostif_attribute_args()
        args.hostif_oid = hostif_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hostif_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hostif_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_attribute failed: unknown result")

    def sai_thrift_create_hostif_table_entry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_hostif_table_entry(attr_list)
        return self.recv_sai_thrift_create_hostif_table_entry()

    def send_sai_thrift_create_hostif_table_entry(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_hostif_table_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_hostif_table_entry_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_hostif_table_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_hostif_table_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_table_entry failed: unknown result")

    def sai_thrift_remove_hostif_table_entry(self, hostif_table_entry_oid):
        """
        Parameters:
         - hostif_table_entry_oid

        """
        self.send_sai_thrift_remove_hostif_table_entry(hostif_table_entry_oid)
        self.recv_sai_thrift_remove_hostif_table_entry()

    def send_sai_thrift_remove_hostif_table_entry(self, hostif_table_entry_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_hostif_table_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_hostif_table_entry_args()
        args.hostif_table_entry_oid = hostif_table_entry_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_hostif_table_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_hostif_table_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_hostif_table_entry_attribute(self, hostif_table_entry_oid, attr):
        """
        Parameters:
         - hostif_table_entry_oid
         - attr

        """
        self.send_sai_thrift_set_hostif_table_entry_attribute(hostif_table_entry_oid, attr)
        self.recv_sai_thrift_set_hostif_table_entry_attribute()

    def send_sai_thrift_set_hostif_table_entry_attribute(self, hostif_table_entry_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_hostif_table_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_hostif_table_entry_attribute_args()
        args.hostif_table_entry_oid = hostif_table_entry_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_hostif_table_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_hostif_table_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_hostif_table_entry_attribute(self, hostif_table_entry_oid, attr_list):
        """
        Parameters:
         - hostif_table_entry_oid
         - attr_list

        """
        self.send_sai_thrift_get_hostif_table_entry_attribute(hostif_table_entry_oid, attr_list)
        return self.recv_sai_thrift_get_hostif_table_entry_attribute()

    def send_sai_thrift_get_hostif_table_entry_attribute(self, hostif_table_entry_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_hostif_table_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_hostif_table_entry_attribute_args()
        args.hostif_table_entry_oid = hostif_table_entry_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_hostif_table_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_hostif_table_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_table_entry_attribute failed: unknown result")

    def sai_thrift_recv_hostif_packet(self, hostif_oid, buffer_size, buffer, attr_list):
        """
        Parameters:
         - hostif_oid
         - buffer_size
         - buffer
         - attr_list

        """
        self.send_sai_thrift_recv_hostif_packet(hostif_oid, buffer_size, buffer, attr_list)
        return self.recv_sai_thrift_recv_hostif_packet()

    def send_sai_thrift_recv_hostif_packet(self, hostif_oid, buffer_size, buffer, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_recv_hostif_packet', TMessageType.CALL, self._seqid)
        args = sai_thrift_recv_hostif_packet_args()
        args.hostif_oid = hostif_oid
        args.buffer_size = buffer_size
        args.buffer = buffer
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_recv_hostif_packet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_recv_hostif_packet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_recv_hostif_packet failed: unknown result")

    def sai_thrift_send_hostif_packet(self, hostif_oid, buffer_size, buffer, attr_list):
        """
        Parameters:
         - hostif_oid
         - buffer_size
         - buffer
         - attr_list

        """
        self.send_sai_thrift_send_hostif_packet(hostif_oid, buffer_size, buffer, attr_list)
        self.recv_sai_thrift_send_hostif_packet()

    def send_sai_thrift_send_hostif_packet(self, hostif_oid, buffer_size, buffer, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_send_hostif_packet', TMessageType.CALL, self._seqid)
        args = sai_thrift_send_hostif_packet_args()
        args.hostif_oid = hostif_oid
        args.buffer_size = buffer_size
        args.buffer = buffer
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_send_hostif_packet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_send_hostif_packet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_allocate_hostif_packet(self, hostif_oid, buffer_size, attr_list):
        """
        Parameters:
         - hostif_oid
         - buffer_size
         - attr_list

        """
        self.send_sai_thrift_allocate_hostif_packet(hostif_oid, buffer_size, attr_list)
        return self.recv_sai_thrift_allocate_hostif_packet()

    def send_sai_thrift_allocate_hostif_packet(self, hostif_oid, buffer_size, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_allocate_hostif_packet', TMessageType.CALL, self._seqid)
        args = sai_thrift_allocate_hostif_packet_args()
        args.hostif_oid = hostif_oid
        args.buffer_size = buffer_size
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_allocate_hostif_packet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_allocate_hostif_packet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_allocate_hostif_packet failed: unknown result")

    def sai_thrift_free_hostif_packet(self, hostif_oid, buffer):
        """
        Parameters:
         - hostif_oid
         - buffer

        """
        self.send_sai_thrift_free_hostif_packet(hostif_oid, buffer)
        return self.recv_sai_thrift_free_hostif_packet()

    def send_sai_thrift_free_hostif_packet(self, hostif_oid, buffer):
        self._oprot.writeMessageBegin('sai_thrift_free_hostif_packet', TMessageType.CALL, self._seqid)
        args = sai_thrift_free_hostif_packet_args()
        args.hostif_oid = hostif_oid
        args.buffer = buffer
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_free_hostif_packet(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_free_hostif_packet_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_free_hostif_packet failed: unknown result")

    def sai_thrift_create_ipmc_entry(self, ipmc_entry, attr_list):
        """
        Parameters:
         - ipmc_entry
         - attr_list

        """
        self.send_sai_thrift_create_ipmc_entry(ipmc_entry, attr_list)
        self.recv_sai_thrift_create_ipmc_entry()

    def send_sai_thrift_create_ipmc_entry(self, ipmc_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ipmc_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ipmc_entry_args()
        args.ipmc_entry = ipmc_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ipmc_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ipmc_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_remove_ipmc_entry(self, ipmc_entry):
        """
        Parameters:
         - ipmc_entry

        """
        self.send_sai_thrift_remove_ipmc_entry(ipmc_entry)
        self.recv_sai_thrift_remove_ipmc_entry()

    def send_sai_thrift_remove_ipmc_entry(self, ipmc_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_ipmc_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ipmc_entry_args()
        args.ipmc_entry = ipmc_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ipmc_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ipmc_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_ipmc_entry_attribute(self, ipmc_entry, attr):
        """
        Parameters:
         - ipmc_entry
         - attr

        """
        self.send_sai_thrift_set_ipmc_entry_attribute(ipmc_entry, attr)
        self.recv_sai_thrift_set_ipmc_entry_attribute()

    def send_sai_thrift_set_ipmc_entry_attribute(self, ipmc_entry, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ipmc_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ipmc_entry_attribute_args()
        args.ipmc_entry = ipmc_entry
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ipmc_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ipmc_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_ipmc_entry_attribute(self, ipmc_entry, attr_list):
        """
        Parameters:
         - ipmc_entry
         - attr_list

        """
        self.send_sai_thrift_get_ipmc_entry_attribute(ipmc_entry, attr_list)
        return self.recv_sai_thrift_get_ipmc_entry_attribute()

    def send_sai_thrift_get_ipmc_entry_attribute(self, ipmc_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_ipmc_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipmc_entry_attribute_args()
        args.ipmc_entry = ipmc_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipmc_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipmc_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipmc_entry_attribute failed: unknown result")

    def sai_thrift_create_ipmc_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_ipmc_group(attr_list)
        return self.recv_sai_thrift_create_ipmc_group()

    def send_sai_thrift_create_ipmc_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ipmc_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ipmc_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ipmc_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ipmc_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipmc_group failed: unknown result")

    def sai_thrift_remove_ipmc_group(self, ipmc_group_oid):
        """
        Parameters:
         - ipmc_group_oid

        """
        self.send_sai_thrift_remove_ipmc_group(ipmc_group_oid)
        self.recv_sai_thrift_remove_ipmc_group()

    def send_sai_thrift_remove_ipmc_group(self, ipmc_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_ipmc_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ipmc_group_args()
        args.ipmc_group_oid = ipmc_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ipmc_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ipmc_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_ipmc_group_attribute(self, ipmc_group_oid, attr):
        """
        Parameters:
         - ipmc_group_oid
         - attr

        """
        self.send_sai_thrift_set_ipmc_group_attribute(ipmc_group_oid, attr)
        self.recv_sai_thrift_set_ipmc_group_attribute()

    def send_sai_thrift_set_ipmc_group_attribute(self, ipmc_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ipmc_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ipmc_group_attribute_args()
        args.ipmc_group_oid = ipmc_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ipmc_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ipmc_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_ipmc_group_attribute(self, ipmc_group_oid, attr_list):
        """
        Parameters:
         - ipmc_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_ipmc_group_attribute(ipmc_group_oid, attr_list)
        return self.recv_sai_thrift_get_ipmc_group_attribute()

    def send_sai_thrift_get_ipmc_group_attribute(self, ipmc_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_ipmc_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipmc_group_attribute_args()
        args.ipmc_group_oid = ipmc_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipmc_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipmc_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipmc_group_attribute failed: unknown result")

    def sai_thrift_create_ipmc_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_ipmc_group_member(attr_list)
        return self.recv_sai_thrift_create_ipmc_group_member()

    def send_sai_thrift_create_ipmc_group_member(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ipmc_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ipmc_group_member_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ipmc_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ipmc_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipmc_group_member failed: unknown result")

    def sai_thrift_remove_ipmc_group_member(self, ipmc_group_member_oid):
        """
        Parameters:
         - ipmc_group_member_oid

        """
        self.send_sai_thrift_remove_ipmc_group_member(ipmc_group_member_oid)
        self.recv_sai_thrift_remove_ipmc_group_member()

    def send_sai_thrift_remove_ipmc_group_member(self, ipmc_group_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_ipmc_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ipmc_group_member_args()
        args.ipmc_group_member_oid = ipmc_group_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ipmc_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ipmc_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_ipmc_group_member_attribute(self, ipmc_group_member_oid, attr):
        """
        Parameters:
         - ipmc_group_member_oid
         - attr

        """
        self.send_sai_thrift_set_ipmc_group_member_attribute(ipmc_group_member_oid, attr)
        self.recv_sai_thrift_set_ipmc_group_member_attribute()

    def send_sai_thrift_set_ipmc_group_member_attribute(self, ipmc_group_member_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ipmc_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ipmc_group_member_attribute_args()
        args.ipmc_group_member_oid = ipmc_group_member_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ipmc_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ipmc_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_ipmc_group_member_attribute(self, ipmc_group_member_oid, attr_list):
        """
        Parameters:
         - ipmc_group_member_oid
         - attr_list

        """
        self.send_sai_thrift_get_ipmc_group_member_attribute(ipmc_group_member_oid, attr_list)
        return self.recv_sai_thrift_get_ipmc_group_member_attribute()

    def send_sai_thrift_get_ipmc_group_member_attribute(self, ipmc_group_member_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_ipmc_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipmc_group_member_attribute_args()
        args.ipmc_group_member_oid = ipmc_group_member_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipmc_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipmc_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipmc_group_member_attribute failed: unknown result")

    def sai_thrift_create_ipsec(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_ipsec(attr_list)
        return self.recv_sai_thrift_create_ipsec()

    def send_sai_thrift_create_ipsec(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ipsec', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ipsec_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ipsec(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ipsec_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipsec failed: unknown result")

    def sai_thrift_remove_ipsec(self, ipsec_oid):
        """
        Parameters:
         - ipsec_oid

        """
        self.send_sai_thrift_remove_ipsec(ipsec_oid)
        self.recv_sai_thrift_remove_ipsec()

    def send_sai_thrift_remove_ipsec(self, ipsec_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_ipsec', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ipsec_args()
        args.ipsec_oid = ipsec_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ipsec(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ipsec_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_ipsec_attribute(self, ipsec_oid, attr):
        """
        Parameters:
         - ipsec_oid
         - attr

        """
        self.send_sai_thrift_set_ipsec_attribute(ipsec_oid, attr)
        self.recv_sai_thrift_set_ipsec_attribute()

    def send_sai_thrift_set_ipsec_attribute(self, ipsec_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ipsec_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ipsec_attribute_args()
        args.ipsec_oid = ipsec_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ipsec_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ipsec_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_ipsec_attribute(self, ipsec_oid, attr_list):
        """
        Parameters:
         - ipsec_oid
         - attr_list

        """
        self.send_sai_thrift_get_ipsec_attribute(ipsec_oid, attr_list)
        return self.recv_sai_thrift_get_ipsec_attribute()

    def send_sai_thrift_get_ipsec_attribute(self, ipsec_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_ipsec_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipsec_attribute_args()
        args.ipsec_oid = ipsec_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipsec_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipsec_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipsec_attribute failed: unknown result")

    def sai_thrift_create_ipsec_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_ipsec_port(attr_list)
        return self.recv_sai_thrift_create_ipsec_port()

    def send_sai_thrift_create_ipsec_port(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ipsec_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ipsec_port_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ipsec_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ipsec_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipsec_port failed: unknown result")

    def sai_thrift_remove_ipsec_port(self, ipsec_port_oid):
        """
        Parameters:
         - ipsec_port_oid

        """
        self.send_sai_thrift_remove_ipsec_port(ipsec_port_oid)
        self.recv_sai_thrift_remove_ipsec_port()

    def send_sai_thrift_remove_ipsec_port(self, ipsec_port_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_ipsec_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ipsec_port_args()
        args.ipsec_port_oid = ipsec_port_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ipsec_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ipsec_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_ipsec_port_attribute(self, ipsec_port_oid, attr):
        """
        Parameters:
         - ipsec_port_oid
         - attr

        """
        self.send_sai_thrift_set_ipsec_port_attribute(ipsec_port_oid, attr)
        self.recv_sai_thrift_set_ipsec_port_attribute()

    def send_sai_thrift_set_ipsec_port_attribute(self, ipsec_port_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ipsec_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ipsec_port_attribute_args()
        args.ipsec_port_oid = ipsec_port_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ipsec_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ipsec_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_ipsec_port_attribute(self, ipsec_port_oid, attr_list):
        """
        Parameters:
         - ipsec_port_oid
         - attr_list

        """
        self.send_sai_thrift_get_ipsec_port_attribute(ipsec_port_oid, attr_list)
        return self.recv_sai_thrift_get_ipsec_port_attribute()

    def send_sai_thrift_get_ipsec_port_attribute(self, ipsec_port_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_ipsec_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipsec_port_attribute_args()
        args.ipsec_port_oid = ipsec_port_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipsec_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipsec_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipsec_port_attribute failed: unknown result")

    def sai_thrift_get_ipsec_port_stats(self, ipsec_port_oid, counter_ids):
        """
        Parameters:
         - ipsec_port_oid
         - counter_ids

        """
        self.send_sai_thrift_get_ipsec_port_stats(ipsec_port_oid, counter_ids)
        return self.recv_sai_thrift_get_ipsec_port_stats()

    def send_sai_thrift_get_ipsec_port_stats(self, ipsec_port_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_ipsec_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipsec_port_stats_args()
        args.ipsec_port_oid = ipsec_port_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipsec_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipsec_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipsec_port_stats failed: unknown result")

    def sai_thrift_get_ipsec_port_stats_ext(self, ipsec_port_oid, counter_ids, mode):
        """
        Parameters:
         - ipsec_port_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_ipsec_port_stats_ext(ipsec_port_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_ipsec_port_stats_ext()

    def send_sai_thrift_get_ipsec_port_stats_ext(self, ipsec_port_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_ipsec_port_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipsec_port_stats_ext_args()
        args.ipsec_port_oid = ipsec_port_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipsec_port_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipsec_port_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipsec_port_stats_ext failed: unknown result")

    def sai_thrift_clear_ipsec_port_stats(self, ipsec_port_oid, counter_ids):
        """
        Parameters:
         - ipsec_port_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_ipsec_port_stats(ipsec_port_oid, counter_ids)
        self.recv_sai_thrift_clear_ipsec_port_stats()

    def send_sai_thrift_clear_ipsec_port_stats(self, ipsec_port_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_ipsec_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_ipsec_port_stats_args()
        args.ipsec_port_oid = ipsec_port_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_ipsec_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_ipsec_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_ipsec_sa(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_ipsec_sa(attr_list)
        return self.recv_sai_thrift_create_ipsec_sa()

    def send_sai_thrift_create_ipsec_sa(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_ipsec_sa', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_ipsec_sa_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_ipsec_sa(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_ipsec_sa_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipsec_sa failed: unknown result")

    def sai_thrift_remove_ipsec_sa(self, ipsec_sa_oid):
        """
        Parameters:
         - ipsec_sa_oid

        """
        self.send_sai_thrift_remove_ipsec_sa(ipsec_sa_oid)
        self.recv_sai_thrift_remove_ipsec_sa()

    def send_sai_thrift_remove_ipsec_sa(self, ipsec_sa_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_ipsec_sa', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_ipsec_sa_args()
        args.ipsec_sa_oid = ipsec_sa_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_ipsec_sa(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_ipsec_sa_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_ipsec_sa_attribute(self, ipsec_sa_oid, attr):
        """
        Parameters:
         - ipsec_sa_oid
         - attr

        """
        self.send_sai_thrift_set_ipsec_sa_attribute(ipsec_sa_oid, attr)
        self.recv_sai_thrift_set_ipsec_sa_attribute()

    def send_sai_thrift_set_ipsec_sa_attribute(self, ipsec_sa_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_ipsec_sa_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_ipsec_sa_attribute_args()
        args.ipsec_sa_oid = ipsec_sa_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_ipsec_sa_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_ipsec_sa_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_ipsec_sa_attribute(self, ipsec_sa_oid, attr_list):
        """
        Parameters:
         - ipsec_sa_oid
         - attr_list

        """
        self.send_sai_thrift_get_ipsec_sa_attribute(ipsec_sa_oid, attr_list)
        return self.recv_sai_thrift_get_ipsec_sa_attribute()

    def send_sai_thrift_get_ipsec_sa_attribute(self, ipsec_sa_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_ipsec_sa_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipsec_sa_attribute_args()
        args.ipsec_sa_oid = ipsec_sa_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipsec_sa_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipsec_sa_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipsec_sa_attribute failed: unknown result")

    def sai_thrift_get_ipsec_sa_stats(self, ipsec_sa_oid, counter_ids):
        """
        Parameters:
         - ipsec_sa_oid
         - counter_ids

        """
        self.send_sai_thrift_get_ipsec_sa_stats(ipsec_sa_oid, counter_ids)
        return self.recv_sai_thrift_get_ipsec_sa_stats()

    def send_sai_thrift_get_ipsec_sa_stats(self, ipsec_sa_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_ipsec_sa_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipsec_sa_stats_args()
        args.ipsec_sa_oid = ipsec_sa_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipsec_sa_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipsec_sa_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipsec_sa_stats failed: unknown result")

    def sai_thrift_get_ipsec_sa_stats_ext(self, ipsec_sa_oid, counter_ids, mode):
        """
        Parameters:
         - ipsec_sa_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_ipsec_sa_stats_ext(ipsec_sa_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_ipsec_sa_stats_ext()

    def send_sai_thrift_get_ipsec_sa_stats_ext(self, ipsec_sa_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_ipsec_sa_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_ipsec_sa_stats_ext_args()
        args.ipsec_sa_oid = ipsec_sa_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_ipsec_sa_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_ipsec_sa_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipsec_sa_stats_ext failed: unknown result")

    def sai_thrift_clear_ipsec_sa_stats(self, ipsec_sa_oid, counter_ids):
        """
        Parameters:
         - ipsec_sa_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_ipsec_sa_stats(ipsec_sa_oid, counter_ids)
        self.recv_sai_thrift_clear_ipsec_sa_stats()

    def send_sai_thrift_clear_ipsec_sa_stats(self, ipsec_sa_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_ipsec_sa_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_ipsec_sa_stats_args()
        args.ipsec_sa_oid = ipsec_sa_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_ipsec_sa_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_ipsec_sa_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_isolation_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_isolation_group(attr_list)
        return self.recv_sai_thrift_create_isolation_group()

    def send_sai_thrift_create_isolation_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_isolation_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_isolation_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_isolation_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_isolation_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_isolation_group failed: unknown result")

    def sai_thrift_remove_isolation_group(self, isolation_group_oid):
        """
        Parameters:
         - isolation_group_oid

        """
        self.send_sai_thrift_remove_isolation_group(isolation_group_oid)
        self.recv_sai_thrift_remove_isolation_group()

    def send_sai_thrift_remove_isolation_group(self, isolation_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_isolation_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_isolation_group_args()
        args.isolation_group_oid = isolation_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_isolation_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_isolation_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_isolation_group_attribute(self, isolation_group_oid, attr):
        """
        Parameters:
         - isolation_group_oid
         - attr

        """
        self.send_sai_thrift_set_isolation_group_attribute(isolation_group_oid, attr)
        self.recv_sai_thrift_set_isolation_group_attribute()

    def send_sai_thrift_set_isolation_group_attribute(self, isolation_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_isolation_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_isolation_group_attribute_args()
        args.isolation_group_oid = isolation_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_isolation_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_isolation_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_isolation_group_attribute(self, isolation_group_oid, attr_list):
        """
        Parameters:
         - isolation_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_isolation_group_attribute(isolation_group_oid, attr_list)
        return self.recv_sai_thrift_get_isolation_group_attribute()

    def send_sai_thrift_get_isolation_group_attribute(self, isolation_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_isolation_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_isolation_group_attribute_args()
        args.isolation_group_oid = isolation_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_isolation_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_isolation_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_isolation_group_attribute failed: unknown result")

    def sai_thrift_create_isolation_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_isolation_group_member(attr_list)
        return self.recv_sai_thrift_create_isolation_group_member()

    def send_sai_thrift_create_isolation_group_member(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_isolation_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_isolation_group_member_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_isolation_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_isolation_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_isolation_group_member failed: unknown result")

    def sai_thrift_remove_isolation_group_member(self, isolation_group_member_oid):
        """
        Parameters:
         - isolation_group_member_oid

        """
        self.send_sai_thrift_remove_isolation_group_member(isolation_group_member_oid)
        self.recv_sai_thrift_remove_isolation_group_member()

    def send_sai_thrift_remove_isolation_group_member(self, isolation_group_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_isolation_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_isolation_group_member_args()
        args.isolation_group_member_oid = isolation_group_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_isolation_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_isolation_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_isolation_group_member_attribute(self, isolation_group_member_oid, attr):
        """
        Parameters:
         - isolation_group_member_oid
         - attr

        """
        self.send_sai_thrift_set_isolation_group_member_attribute(isolation_group_member_oid, attr)
        self.recv_sai_thrift_set_isolation_group_member_attribute()

    def send_sai_thrift_set_isolation_group_member_attribute(self, isolation_group_member_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_isolation_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_isolation_group_member_attribute_args()
        args.isolation_group_member_oid = isolation_group_member_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_isolation_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_isolation_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_isolation_group_member_attribute(self, isolation_group_member_oid, attr_list):
        """
        Parameters:
         - isolation_group_member_oid
         - attr_list

        """
        self.send_sai_thrift_get_isolation_group_member_attribute(isolation_group_member_oid, attr_list)
        return self.recv_sai_thrift_get_isolation_group_member_attribute()

    def send_sai_thrift_get_isolation_group_member_attribute(self, isolation_group_member_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_isolation_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_isolation_group_member_attribute_args()
        args.isolation_group_member_oid = isolation_group_member_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_isolation_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_isolation_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_isolation_group_member_attribute failed: unknown result")

    def sai_thrift_create_l2mc_entry(self, l2mc_entry, attr_list):
        """
        Parameters:
         - l2mc_entry
         - attr_list

        """
        self.send_sai_thrift_create_l2mc_entry(l2mc_entry, attr_list)
        self.recv_sai_thrift_create_l2mc_entry()

    def send_sai_thrift_create_l2mc_entry(self, l2mc_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_l2mc_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_l2mc_entry_args()
        args.l2mc_entry = l2mc_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_l2mc_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_l2mc_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_remove_l2mc_entry(self, l2mc_entry):
        """
        Parameters:
         - l2mc_entry

        """
        self.send_sai_thrift_remove_l2mc_entry(l2mc_entry)
        self.recv_sai_thrift_remove_l2mc_entry()

    def send_sai_thrift_remove_l2mc_entry(self, l2mc_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_l2mc_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_l2mc_entry_args()
        args.l2mc_entry = l2mc_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_l2mc_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_l2mc_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_l2mc_entry_attribute(self, l2mc_entry, attr):
        """
        Parameters:
         - l2mc_entry
         - attr

        """
        self.send_sai_thrift_set_l2mc_entry_attribute(l2mc_entry, attr)
        self.recv_sai_thrift_set_l2mc_entry_attribute()

    def send_sai_thrift_set_l2mc_entry_attribute(self, l2mc_entry, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_l2mc_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_l2mc_entry_attribute_args()
        args.l2mc_entry = l2mc_entry
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_l2mc_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_l2mc_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_l2mc_entry_attribute(self, l2mc_entry, attr_list):
        """
        Parameters:
         - l2mc_entry
         - attr_list

        """
        self.send_sai_thrift_get_l2mc_entry_attribute(l2mc_entry, attr_list)
        return self.recv_sai_thrift_get_l2mc_entry_attribute()

    def send_sai_thrift_get_l2mc_entry_attribute(self, l2mc_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_l2mc_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_l2mc_entry_attribute_args()
        args.l2mc_entry = l2mc_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_l2mc_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_l2mc_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_l2mc_entry_attribute failed: unknown result")

    def sai_thrift_create_l2mc_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_l2mc_group(attr_list)
        return self.recv_sai_thrift_create_l2mc_group()

    def send_sai_thrift_create_l2mc_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_l2mc_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_l2mc_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_l2mc_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_l2mc_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_l2mc_group failed: unknown result")

    def sai_thrift_remove_l2mc_group(self, l2mc_group_oid):
        """
        Parameters:
         - l2mc_group_oid

        """
        self.send_sai_thrift_remove_l2mc_group(l2mc_group_oid)
        self.recv_sai_thrift_remove_l2mc_group()

    def send_sai_thrift_remove_l2mc_group(self, l2mc_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_l2mc_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_l2mc_group_args()
        args.l2mc_group_oid = l2mc_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_l2mc_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_l2mc_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_l2mc_group_attribute(self, l2mc_group_oid, attr):
        """
        Parameters:
         - l2mc_group_oid
         - attr

        """
        self.send_sai_thrift_set_l2mc_group_attribute(l2mc_group_oid, attr)
        self.recv_sai_thrift_set_l2mc_group_attribute()

    def send_sai_thrift_set_l2mc_group_attribute(self, l2mc_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_l2mc_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_l2mc_group_attribute_args()
        args.l2mc_group_oid = l2mc_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_l2mc_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_l2mc_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_l2mc_group_attribute(self, l2mc_group_oid, attr_list):
        """
        Parameters:
         - l2mc_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_l2mc_group_attribute(l2mc_group_oid, attr_list)
        return self.recv_sai_thrift_get_l2mc_group_attribute()

    def send_sai_thrift_get_l2mc_group_attribute(self, l2mc_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_l2mc_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_l2mc_group_attribute_args()
        args.l2mc_group_oid = l2mc_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_l2mc_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_l2mc_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_l2mc_group_attribute failed: unknown result")

    def sai_thrift_create_l2mc_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_l2mc_group_member(attr_list)
        return self.recv_sai_thrift_create_l2mc_group_member()

    def send_sai_thrift_create_l2mc_group_member(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_l2mc_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_l2mc_group_member_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_l2mc_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_l2mc_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_l2mc_group_member failed: unknown result")

    def sai_thrift_remove_l2mc_group_member(self, l2mc_group_member_oid):
        """
        Parameters:
         - l2mc_group_member_oid

        """
        self.send_sai_thrift_remove_l2mc_group_member(l2mc_group_member_oid)
        self.recv_sai_thrift_remove_l2mc_group_member()

    def send_sai_thrift_remove_l2mc_group_member(self, l2mc_group_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_l2mc_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_l2mc_group_member_args()
        args.l2mc_group_member_oid = l2mc_group_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_l2mc_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_l2mc_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_l2mc_group_member_attribute(self, l2mc_group_member_oid, attr):
        """
        Parameters:
         - l2mc_group_member_oid
         - attr

        """
        self.send_sai_thrift_set_l2mc_group_member_attribute(l2mc_group_member_oid, attr)
        self.recv_sai_thrift_set_l2mc_group_member_attribute()

    def send_sai_thrift_set_l2mc_group_member_attribute(self, l2mc_group_member_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_l2mc_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_l2mc_group_member_attribute_args()
        args.l2mc_group_member_oid = l2mc_group_member_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_l2mc_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_l2mc_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_l2mc_group_member_attribute(self, l2mc_group_member_oid, attr_list):
        """
        Parameters:
         - l2mc_group_member_oid
         - attr_list

        """
        self.send_sai_thrift_get_l2mc_group_member_attribute(l2mc_group_member_oid, attr_list)
        return self.recv_sai_thrift_get_l2mc_group_member_attribute()

    def send_sai_thrift_get_l2mc_group_member_attribute(self, l2mc_group_member_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_l2mc_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_l2mc_group_member_attribute_args()
        args.l2mc_group_member_oid = l2mc_group_member_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_l2mc_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_l2mc_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_l2mc_group_member_attribute failed: unknown result")

    def sai_thrift_create_lag(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_lag(attr_list)
        return self.recv_sai_thrift_create_lag()

    def send_sai_thrift_create_lag(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_lag', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_lag_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_lag(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_lag_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_lag failed: unknown result")

    def sai_thrift_remove_lag(self, lag_oid):
        """
        Parameters:
         - lag_oid

        """
        self.send_sai_thrift_remove_lag(lag_oid)
        self.recv_sai_thrift_remove_lag()

    def send_sai_thrift_remove_lag(self, lag_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_lag', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_lag_args()
        args.lag_oid = lag_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_lag(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_lag_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_lag_attribute(self, lag_oid, attr):
        """
        Parameters:
         - lag_oid
         - attr

        """
        self.send_sai_thrift_set_lag_attribute(lag_oid, attr)
        self.recv_sai_thrift_set_lag_attribute()

    def send_sai_thrift_set_lag_attribute(self, lag_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_lag_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_lag_attribute_args()
        args.lag_oid = lag_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_lag_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_lag_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_lag_attribute(self, lag_oid, attr_list):
        """
        Parameters:
         - lag_oid
         - attr_list

        """
        self.send_sai_thrift_get_lag_attribute(lag_oid, attr_list)
        return self.recv_sai_thrift_get_lag_attribute()

    def send_sai_thrift_get_lag_attribute(self, lag_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_lag_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_lag_attribute_args()
        args.lag_oid = lag_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_lag_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_lag_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_lag_attribute failed: unknown result")

    def sai_thrift_create_lag_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_lag_member(attr_list)
        return self.recv_sai_thrift_create_lag_member()

    def send_sai_thrift_create_lag_member(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_lag_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_lag_member_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_lag_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_lag_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_lag_member failed: unknown result")

    def sai_thrift_remove_lag_member(self, lag_member_oid):
        """
        Parameters:
         - lag_member_oid

        """
        self.send_sai_thrift_remove_lag_member(lag_member_oid)
        self.recv_sai_thrift_remove_lag_member()

    def send_sai_thrift_remove_lag_member(self, lag_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_lag_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_lag_member_args()
        args.lag_member_oid = lag_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_lag_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_lag_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_lag_member_attribute(self, lag_member_oid, attr):
        """
        Parameters:
         - lag_member_oid
         - attr

        """
        self.send_sai_thrift_set_lag_member_attribute(lag_member_oid, attr)
        self.recv_sai_thrift_set_lag_member_attribute()

    def send_sai_thrift_set_lag_member_attribute(self, lag_member_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_lag_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_lag_member_attribute_args()
        args.lag_member_oid = lag_member_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_lag_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_lag_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_lag_member_attribute(self, lag_member_oid, attr_list):
        """
        Parameters:
         - lag_member_oid
         - attr_list

        """
        self.send_sai_thrift_get_lag_member_attribute(lag_member_oid, attr_list)
        return self.recv_sai_thrift_get_lag_member_attribute()

    def send_sai_thrift_get_lag_member_attribute(self, lag_member_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_lag_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_lag_member_attribute_args()
        args.lag_member_oid = lag_member_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_lag_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_lag_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_lag_member_attribute failed: unknown result")

    def sai_thrift_create_macsec(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_macsec(attr_list)
        return self.recv_sai_thrift_create_macsec()

    def send_sai_thrift_create_macsec(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_macsec', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_macsec_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_macsec(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_macsec_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_macsec failed: unknown result")

    def sai_thrift_remove_macsec(self, macsec_oid):
        """
        Parameters:
         - macsec_oid

        """
        self.send_sai_thrift_remove_macsec(macsec_oid)
        self.recv_sai_thrift_remove_macsec()

    def send_sai_thrift_remove_macsec(self, macsec_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_macsec', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_macsec_args()
        args.macsec_oid = macsec_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_macsec(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_macsec_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_macsec_attribute(self, macsec_oid, attr):
        """
        Parameters:
         - macsec_oid
         - attr

        """
        self.send_sai_thrift_set_macsec_attribute(macsec_oid, attr)
        self.recv_sai_thrift_set_macsec_attribute()

    def send_sai_thrift_set_macsec_attribute(self, macsec_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_macsec_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_macsec_attribute_args()
        args.macsec_oid = macsec_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_macsec_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_macsec_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_macsec_attribute(self, macsec_oid, attr_list):
        """
        Parameters:
         - macsec_oid
         - attr_list

        """
        self.send_sai_thrift_get_macsec_attribute(macsec_oid, attr_list)
        return self.recv_sai_thrift_get_macsec_attribute()

    def send_sai_thrift_get_macsec_attribute(self, macsec_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_attribute_args()
        args.macsec_oid = macsec_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_attribute failed: unknown result")

    def sai_thrift_create_macsec_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_macsec_port(attr_list)
        return self.recv_sai_thrift_create_macsec_port()

    def send_sai_thrift_create_macsec_port(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_macsec_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_macsec_port_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_macsec_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_macsec_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_macsec_port failed: unknown result")

    def sai_thrift_remove_macsec_port(self, macsec_port_oid):
        """
        Parameters:
         - macsec_port_oid

        """
        self.send_sai_thrift_remove_macsec_port(macsec_port_oid)
        self.recv_sai_thrift_remove_macsec_port()

    def send_sai_thrift_remove_macsec_port(self, macsec_port_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_macsec_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_macsec_port_args()
        args.macsec_port_oid = macsec_port_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_macsec_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_macsec_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_macsec_port_attribute(self, macsec_port_oid, attr):
        """
        Parameters:
         - macsec_port_oid
         - attr

        """
        self.send_sai_thrift_set_macsec_port_attribute(macsec_port_oid, attr)
        self.recv_sai_thrift_set_macsec_port_attribute()

    def send_sai_thrift_set_macsec_port_attribute(self, macsec_port_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_macsec_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_macsec_port_attribute_args()
        args.macsec_port_oid = macsec_port_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_macsec_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_macsec_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_macsec_port_attribute(self, macsec_port_oid, attr_list):
        """
        Parameters:
         - macsec_port_oid
         - attr_list

        """
        self.send_sai_thrift_get_macsec_port_attribute(macsec_port_oid, attr_list)
        return self.recv_sai_thrift_get_macsec_port_attribute()

    def send_sai_thrift_get_macsec_port_attribute(self, macsec_port_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_port_attribute_args()
        args.macsec_port_oid = macsec_port_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_port_attribute failed: unknown result")

    def sai_thrift_get_macsec_port_stats(self, macsec_port_oid, counter_ids):
        """
        Parameters:
         - macsec_port_oid
         - counter_ids

        """
        self.send_sai_thrift_get_macsec_port_stats(macsec_port_oid, counter_ids)
        return self.recv_sai_thrift_get_macsec_port_stats()

    def send_sai_thrift_get_macsec_port_stats(self, macsec_port_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_port_stats_args()
        args.macsec_port_oid = macsec_port_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_port_stats failed: unknown result")

    def sai_thrift_get_macsec_port_stats_ext(self, macsec_port_oid, counter_ids, mode):
        """
        Parameters:
         - macsec_port_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_macsec_port_stats_ext(macsec_port_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_macsec_port_stats_ext()

    def send_sai_thrift_get_macsec_port_stats_ext(self, macsec_port_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_port_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_port_stats_ext_args()
        args.macsec_port_oid = macsec_port_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_port_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_port_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_port_stats_ext failed: unknown result")

    def sai_thrift_clear_macsec_port_stats(self, macsec_port_oid, counter_ids):
        """
        Parameters:
         - macsec_port_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_macsec_port_stats(macsec_port_oid, counter_ids)
        self.recv_sai_thrift_clear_macsec_port_stats()

    def send_sai_thrift_clear_macsec_port_stats(self, macsec_port_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_macsec_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_macsec_port_stats_args()
        args.macsec_port_oid = macsec_port_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_macsec_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_macsec_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_macsec_flow(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_macsec_flow(attr_list)
        return self.recv_sai_thrift_create_macsec_flow()

    def send_sai_thrift_create_macsec_flow(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_macsec_flow', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_macsec_flow_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_macsec_flow(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_macsec_flow_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_macsec_flow failed: unknown result")

    def sai_thrift_remove_macsec_flow(self, macsec_flow_oid):
        """
        Parameters:
         - macsec_flow_oid

        """
        self.send_sai_thrift_remove_macsec_flow(macsec_flow_oid)
        self.recv_sai_thrift_remove_macsec_flow()

    def send_sai_thrift_remove_macsec_flow(self, macsec_flow_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_macsec_flow', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_macsec_flow_args()
        args.macsec_flow_oid = macsec_flow_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_macsec_flow(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_macsec_flow_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_macsec_flow_attribute(self, macsec_flow_oid, attr):
        """
        Parameters:
         - macsec_flow_oid
         - attr

        """
        self.send_sai_thrift_set_macsec_flow_attribute(macsec_flow_oid, attr)
        self.recv_sai_thrift_set_macsec_flow_attribute()

    def send_sai_thrift_set_macsec_flow_attribute(self, macsec_flow_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_macsec_flow_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_macsec_flow_attribute_args()
        args.macsec_flow_oid = macsec_flow_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_macsec_flow_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_macsec_flow_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_macsec_flow_attribute(self, macsec_flow_oid, attr_list):
        """
        Parameters:
         - macsec_flow_oid
         - attr_list

        """
        self.send_sai_thrift_get_macsec_flow_attribute(macsec_flow_oid, attr_list)
        return self.recv_sai_thrift_get_macsec_flow_attribute()

    def send_sai_thrift_get_macsec_flow_attribute(self, macsec_flow_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_flow_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_flow_attribute_args()
        args.macsec_flow_oid = macsec_flow_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_flow_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_flow_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_flow_attribute failed: unknown result")

    def sai_thrift_get_macsec_flow_stats(self, macsec_flow_oid, counter_ids):
        """
        Parameters:
         - macsec_flow_oid
         - counter_ids

        """
        self.send_sai_thrift_get_macsec_flow_stats(macsec_flow_oid, counter_ids)
        return self.recv_sai_thrift_get_macsec_flow_stats()

    def send_sai_thrift_get_macsec_flow_stats(self, macsec_flow_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_flow_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_flow_stats_args()
        args.macsec_flow_oid = macsec_flow_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_flow_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_flow_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_flow_stats failed: unknown result")

    def sai_thrift_get_macsec_flow_stats_ext(self, macsec_flow_oid, counter_ids, mode):
        """
        Parameters:
         - macsec_flow_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_macsec_flow_stats_ext(macsec_flow_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_macsec_flow_stats_ext()

    def send_sai_thrift_get_macsec_flow_stats_ext(self, macsec_flow_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_flow_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_flow_stats_ext_args()
        args.macsec_flow_oid = macsec_flow_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_flow_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_flow_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_flow_stats_ext failed: unknown result")

    def sai_thrift_clear_macsec_flow_stats(self, macsec_flow_oid, counter_ids):
        """
        Parameters:
         - macsec_flow_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_macsec_flow_stats(macsec_flow_oid, counter_ids)
        self.recv_sai_thrift_clear_macsec_flow_stats()

    def send_sai_thrift_clear_macsec_flow_stats(self, macsec_flow_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_macsec_flow_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_macsec_flow_stats_args()
        args.macsec_flow_oid = macsec_flow_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_macsec_flow_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_macsec_flow_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_macsec_sc(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_macsec_sc(attr_list)
        return self.recv_sai_thrift_create_macsec_sc()

    def send_sai_thrift_create_macsec_sc(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_macsec_sc', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_macsec_sc_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_macsec_sc(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_macsec_sc_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_macsec_sc failed: unknown result")

    def sai_thrift_remove_macsec_sc(self, macsec_sc_oid):
        """
        Parameters:
         - macsec_sc_oid

        """
        self.send_sai_thrift_remove_macsec_sc(macsec_sc_oid)
        self.recv_sai_thrift_remove_macsec_sc()

    def send_sai_thrift_remove_macsec_sc(self, macsec_sc_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_macsec_sc', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_macsec_sc_args()
        args.macsec_sc_oid = macsec_sc_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_macsec_sc(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_macsec_sc_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_macsec_sc_attribute(self, macsec_sc_oid, attr):
        """
        Parameters:
         - macsec_sc_oid
         - attr

        """
        self.send_sai_thrift_set_macsec_sc_attribute(macsec_sc_oid, attr)
        self.recv_sai_thrift_set_macsec_sc_attribute()

    def send_sai_thrift_set_macsec_sc_attribute(self, macsec_sc_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_macsec_sc_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_macsec_sc_attribute_args()
        args.macsec_sc_oid = macsec_sc_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_macsec_sc_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_macsec_sc_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_macsec_sc_attribute(self, macsec_sc_oid, attr_list):
        """
        Parameters:
         - macsec_sc_oid
         - attr_list

        """
        self.send_sai_thrift_get_macsec_sc_attribute(macsec_sc_oid, attr_list)
        return self.recv_sai_thrift_get_macsec_sc_attribute()

    def send_sai_thrift_get_macsec_sc_attribute(self, macsec_sc_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_sc_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_sc_attribute_args()
        args.macsec_sc_oid = macsec_sc_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_sc_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_sc_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_sc_attribute failed: unknown result")

    def sai_thrift_get_macsec_sc_stats(self, macsec_sc_oid, counter_ids):
        """
        Parameters:
         - macsec_sc_oid
         - counter_ids

        """
        self.send_sai_thrift_get_macsec_sc_stats(macsec_sc_oid, counter_ids)
        return self.recv_sai_thrift_get_macsec_sc_stats()

    def send_sai_thrift_get_macsec_sc_stats(self, macsec_sc_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_sc_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_sc_stats_args()
        args.macsec_sc_oid = macsec_sc_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_sc_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_sc_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_sc_stats failed: unknown result")

    def sai_thrift_get_macsec_sc_stats_ext(self, macsec_sc_oid, counter_ids, mode):
        """
        Parameters:
         - macsec_sc_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_macsec_sc_stats_ext(macsec_sc_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_macsec_sc_stats_ext()

    def send_sai_thrift_get_macsec_sc_stats_ext(self, macsec_sc_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_sc_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_sc_stats_ext_args()
        args.macsec_sc_oid = macsec_sc_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_sc_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_sc_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_sc_stats_ext failed: unknown result")

    def sai_thrift_clear_macsec_sc_stats(self, macsec_sc_oid, counter_ids):
        """
        Parameters:
         - macsec_sc_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_macsec_sc_stats(macsec_sc_oid, counter_ids)
        self.recv_sai_thrift_clear_macsec_sc_stats()

    def send_sai_thrift_clear_macsec_sc_stats(self, macsec_sc_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_macsec_sc_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_macsec_sc_stats_args()
        args.macsec_sc_oid = macsec_sc_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_macsec_sc_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_macsec_sc_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_macsec_sa(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_macsec_sa(attr_list)
        return self.recv_sai_thrift_create_macsec_sa()

    def send_sai_thrift_create_macsec_sa(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_macsec_sa', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_macsec_sa_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_macsec_sa(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_macsec_sa_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_macsec_sa failed: unknown result")

    def sai_thrift_remove_macsec_sa(self, macsec_sa_oid):
        """
        Parameters:
         - macsec_sa_oid

        """
        self.send_sai_thrift_remove_macsec_sa(macsec_sa_oid)
        self.recv_sai_thrift_remove_macsec_sa()

    def send_sai_thrift_remove_macsec_sa(self, macsec_sa_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_macsec_sa', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_macsec_sa_args()
        args.macsec_sa_oid = macsec_sa_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_macsec_sa(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_macsec_sa_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_macsec_sa_attribute(self, macsec_sa_oid, attr):
        """
        Parameters:
         - macsec_sa_oid
         - attr

        """
        self.send_sai_thrift_set_macsec_sa_attribute(macsec_sa_oid, attr)
        self.recv_sai_thrift_set_macsec_sa_attribute()

    def send_sai_thrift_set_macsec_sa_attribute(self, macsec_sa_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_macsec_sa_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_macsec_sa_attribute_args()
        args.macsec_sa_oid = macsec_sa_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_macsec_sa_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_macsec_sa_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_macsec_sa_attribute(self, macsec_sa_oid, attr_list):
        """
        Parameters:
         - macsec_sa_oid
         - attr_list

        """
        self.send_sai_thrift_get_macsec_sa_attribute(macsec_sa_oid, attr_list)
        return self.recv_sai_thrift_get_macsec_sa_attribute()

    def send_sai_thrift_get_macsec_sa_attribute(self, macsec_sa_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_sa_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_sa_attribute_args()
        args.macsec_sa_oid = macsec_sa_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_sa_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_sa_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_sa_attribute failed: unknown result")

    def sai_thrift_get_macsec_sa_stats(self, macsec_sa_oid, counter_ids):
        """
        Parameters:
         - macsec_sa_oid
         - counter_ids

        """
        self.send_sai_thrift_get_macsec_sa_stats(macsec_sa_oid, counter_ids)
        return self.recv_sai_thrift_get_macsec_sa_stats()

    def send_sai_thrift_get_macsec_sa_stats(self, macsec_sa_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_sa_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_sa_stats_args()
        args.macsec_sa_oid = macsec_sa_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_sa_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_sa_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_sa_stats failed: unknown result")

    def sai_thrift_get_macsec_sa_stats_ext(self, macsec_sa_oid, counter_ids, mode):
        """
        Parameters:
         - macsec_sa_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_macsec_sa_stats_ext(macsec_sa_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_macsec_sa_stats_ext()

    def send_sai_thrift_get_macsec_sa_stats_ext(self, macsec_sa_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_macsec_sa_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_macsec_sa_stats_ext_args()
        args.macsec_sa_oid = macsec_sa_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_macsec_sa_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_macsec_sa_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_macsec_sa_stats_ext failed: unknown result")

    def sai_thrift_clear_macsec_sa_stats(self, macsec_sa_oid, counter_ids):
        """
        Parameters:
         - macsec_sa_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_macsec_sa_stats(macsec_sa_oid, counter_ids)
        self.recv_sai_thrift_clear_macsec_sa_stats()

    def send_sai_thrift_clear_macsec_sa_stats(self, macsec_sa_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_macsec_sa_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_macsec_sa_stats_args()
        args.macsec_sa_oid = macsec_sa_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_macsec_sa_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_macsec_sa_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_mcast_fdb_entry(self, mcast_fdb_entry, attr_list):
        """
        Parameters:
         - mcast_fdb_entry
         - attr_list

        """
        self.send_sai_thrift_create_mcast_fdb_entry(mcast_fdb_entry, attr_list)
        self.recv_sai_thrift_create_mcast_fdb_entry()

    def send_sai_thrift_create_mcast_fdb_entry(self, mcast_fdb_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_mcast_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_mcast_fdb_entry_args()
        args.mcast_fdb_entry = mcast_fdb_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_mcast_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_mcast_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_remove_mcast_fdb_entry(self, mcast_fdb_entry):
        """
        Parameters:
         - mcast_fdb_entry

        """
        self.send_sai_thrift_remove_mcast_fdb_entry(mcast_fdb_entry)
        self.recv_sai_thrift_remove_mcast_fdb_entry()

    def send_sai_thrift_remove_mcast_fdb_entry(self, mcast_fdb_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_mcast_fdb_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_mcast_fdb_entry_args()
        args.mcast_fdb_entry = mcast_fdb_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_mcast_fdb_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_mcast_fdb_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_mcast_fdb_entry_attribute(self, mcast_fdb_entry, attr):
        """
        Parameters:
         - mcast_fdb_entry
         - attr

        """
        self.send_sai_thrift_set_mcast_fdb_entry_attribute(mcast_fdb_entry, attr)
        self.recv_sai_thrift_set_mcast_fdb_entry_attribute()

    def send_sai_thrift_set_mcast_fdb_entry_attribute(self, mcast_fdb_entry, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_mcast_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_mcast_fdb_entry_attribute_args()
        args.mcast_fdb_entry = mcast_fdb_entry
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_mcast_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_mcast_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_mcast_fdb_entry_attribute(self, mcast_fdb_entry, attr_list):
        """
        Parameters:
         - mcast_fdb_entry
         - attr_list

        """
        self.send_sai_thrift_get_mcast_fdb_entry_attribute(mcast_fdb_entry, attr_list)
        return self.recv_sai_thrift_get_mcast_fdb_entry_attribute()

    def send_sai_thrift_get_mcast_fdb_entry_attribute(self, mcast_fdb_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_mcast_fdb_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_mcast_fdb_entry_attribute_args()
        args.mcast_fdb_entry = mcast_fdb_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_mcast_fdb_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_mcast_fdb_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_mcast_fdb_entry_attribute failed: unknown result")

    def sai_thrift_create_mirror_session(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_mirror_session(attr_list)
        return self.recv_sai_thrift_create_mirror_session()

    def send_sai_thrift_create_mirror_session(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_mirror_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_mirror_session_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_mirror_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_mirror_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_mirror_session failed: unknown result")

    def sai_thrift_remove_mirror_session(self, mirror_session_oid):
        """
        Parameters:
         - mirror_session_oid

        """
        self.send_sai_thrift_remove_mirror_session(mirror_session_oid)
        self.recv_sai_thrift_remove_mirror_session()

    def send_sai_thrift_remove_mirror_session(self, mirror_session_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_mirror_session', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_mirror_session_args()
        args.mirror_session_oid = mirror_session_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_mirror_session(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_mirror_session_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_mirror_session_attribute(self, mirror_session_oid, attr):
        """
        Parameters:
         - mirror_session_oid
         - attr

        """
        self.send_sai_thrift_set_mirror_session_attribute(mirror_session_oid, attr)
        self.recv_sai_thrift_set_mirror_session_attribute()

    def send_sai_thrift_set_mirror_session_attribute(self, mirror_session_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_mirror_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_mirror_session_attribute_args()
        args.mirror_session_oid = mirror_session_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_mirror_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_mirror_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_mirror_session_attribute(self, mirror_session_oid, attr_list):
        """
        Parameters:
         - mirror_session_oid
         - attr_list

        """
        self.send_sai_thrift_get_mirror_session_attribute(mirror_session_oid, attr_list)
        return self.recv_sai_thrift_get_mirror_session_attribute()

    def send_sai_thrift_get_mirror_session_attribute(self, mirror_session_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_mirror_session_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_mirror_session_attribute_args()
        args.mirror_session_oid = mirror_session_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_mirror_session_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_mirror_session_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_mirror_session_attribute failed: unknown result")

    def sai_thrift_create_inseg_entry(self, inseg_entry, attr_list):
        """
        Parameters:
         - inseg_entry
         - attr_list

        """
        self.send_sai_thrift_create_inseg_entry(inseg_entry, attr_list)
        self.recv_sai_thrift_create_inseg_entry()

    def send_sai_thrift_create_inseg_entry(self, inseg_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_inseg_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_inseg_entry_args()
        args.inseg_entry = inseg_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_inseg_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_inseg_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_remove_inseg_entry(self, inseg_entry):
        """
        Parameters:
         - inseg_entry

        """
        self.send_sai_thrift_remove_inseg_entry(inseg_entry)
        self.recv_sai_thrift_remove_inseg_entry()

    def send_sai_thrift_remove_inseg_entry(self, inseg_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_inseg_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_inseg_entry_args()
        args.inseg_entry = inseg_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_inseg_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_inseg_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_inseg_entry_attribute(self, inseg_entry, attr):
        """
        Parameters:
         - inseg_entry
         - attr

        """
        self.send_sai_thrift_set_inseg_entry_attribute(inseg_entry, attr)
        self.recv_sai_thrift_set_inseg_entry_attribute()

    def send_sai_thrift_set_inseg_entry_attribute(self, inseg_entry, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_inseg_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_inseg_entry_attribute_args()
        args.inseg_entry = inseg_entry
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_inseg_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_inseg_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_inseg_entry_attribute(self, inseg_entry, attr_list):
        """
        Parameters:
         - inseg_entry
         - attr_list

        """
        self.send_sai_thrift_get_inseg_entry_attribute(inseg_entry, attr_list)
        return self.recv_sai_thrift_get_inseg_entry_attribute()

    def send_sai_thrift_get_inseg_entry_attribute(self, inseg_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_inseg_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_inseg_entry_attribute_args()
        args.inseg_entry = inseg_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_inseg_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_inseg_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_inseg_entry_attribute failed: unknown result")

    def sai_thrift_bulk_create_inseg_entry(self, inseg_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - inseg_entry
         - attr_count
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_create_inseg_entry(inseg_entry, attr_count, attr_list, mode)
        return self.recv_sai_thrift_bulk_create_inseg_entry()

    def send_sai_thrift_bulk_create_inseg_entry(self, inseg_entry, attr_count, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_create_inseg_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_create_inseg_entry_args()
        args.inseg_entry = inseg_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_create_inseg_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_create_inseg_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_create_inseg_entry failed: unknown result")

    def sai_thrift_bulk_remove_inseg_entry(self, inseg_entry, mode):
        """
        Parameters:
         - inseg_entry
         - mode

        """
        self.send_sai_thrift_bulk_remove_inseg_entry(inseg_entry, mode)
        return self.recv_sai_thrift_bulk_remove_inseg_entry()

    def send_sai_thrift_bulk_remove_inseg_entry(self, inseg_entry, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_remove_inseg_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_remove_inseg_entry_args()
        args.inseg_entry = inseg_entry
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_remove_inseg_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_remove_inseg_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_remove_inseg_entry failed: unknown result")

    def sai_thrift_bulk_set_inseg_entry_attribute(self, inseg_entry, attr_list, mode):
        """
        Parameters:
         - inseg_entry
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_set_inseg_entry_attribute(inseg_entry, attr_list, mode)
        return self.recv_sai_thrift_bulk_set_inseg_entry_attribute()

    def send_sai_thrift_bulk_set_inseg_entry_attribute(self, inseg_entry, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_set_inseg_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_set_inseg_entry_attribute_args()
        args.inseg_entry = inseg_entry
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_set_inseg_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_set_inseg_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_set_inseg_entry_attribute failed: unknown result")

    def sai_thrift_bulk_get_inseg_entry_attribute(self, inseg_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - inseg_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        self.send_sai_thrift_bulk_get_inseg_entry_attribute(inseg_entry, attr_count, attr_list, mode, object_statuses)
        return self.recv_sai_thrift_bulk_get_inseg_entry_attribute()

    def send_sai_thrift_bulk_get_inseg_entry_attribute(self, inseg_entry, attr_count, attr_list, mode, object_statuses):
        self._oprot.writeMessageBegin('sai_thrift_bulk_get_inseg_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_get_inseg_entry_attribute_args()
        args.inseg_entry = inseg_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.object_statuses = object_statuses
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_get_inseg_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_get_inseg_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_get_inseg_entry_attribute failed: unknown result")

    def sai_thrift_create_my_mac(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_my_mac(attr_list)
        return self.recv_sai_thrift_create_my_mac()

    def send_sai_thrift_create_my_mac(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_my_mac', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_my_mac_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_my_mac(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_my_mac_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_my_mac failed: unknown result")

    def sai_thrift_remove_my_mac(self, my_mac_oid):
        """
        Parameters:
         - my_mac_oid

        """
        self.send_sai_thrift_remove_my_mac(my_mac_oid)
        self.recv_sai_thrift_remove_my_mac()

    def send_sai_thrift_remove_my_mac(self, my_mac_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_my_mac', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_my_mac_args()
        args.my_mac_oid = my_mac_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_my_mac(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_my_mac_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_my_mac_attribute(self, my_mac_oid, attr):
        """
        Parameters:
         - my_mac_oid
         - attr

        """
        self.send_sai_thrift_set_my_mac_attribute(my_mac_oid, attr)
        self.recv_sai_thrift_set_my_mac_attribute()

    def send_sai_thrift_set_my_mac_attribute(self, my_mac_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_my_mac_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_my_mac_attribute_args()
        args.my_mac_oid = my_mac_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_my_mac_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_my_mac_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_my_mac_attribute(self, my_mac_oid, attr_list):
        """
        Parameters:
         - my_mac_oid
         - attr_list

        """
        self.send_sai_thrift_get_my_mac_attribute(my_mac_oid, attr_list)
        return self.recv_sai_thrift_get_my_mac_attribute()

    def send_sai_thrift_get_my_mac_attribute(self, my_mac_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_my_mac_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_my_mac_attribute_args()
        args.my_mac_oid = my_mac_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_my_mac_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_my_mac_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_my_mac_attribute failed: unknown result")

    def sai_thrift_create_nat_entry(self, nat_entry, attr_list):
        """
        Parameters:
         - nat_entry
         - attr_list

        """
        self.send_sai_thrift_create_nat_entry(nat_entry, attr_list)
        self.recv_sai_thrift_create_nat_entry()

    def send_sai_thrift_create_nat_entry(self, nat_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_nat_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_nat_entry_args()
        args.nat_entry = nat_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_nat_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_nat_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_remove_nat_entry(self, nat_entry):
        """
        Parameters:
         - nat_entry

        """
        self.send_sai_thrift_remove_nat_entry(nat_entry)
        self.recv_sai_thrift_remove_nat_entry()

    def send_sai_thrift_remove_nat_entry(self, nat_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_nat_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_nat_entry_args()
        args.nat_entry = nat_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_nat_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_nat_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_nat_entry_attribute(self, nat_entry, attr):
        """
        Parameters:
         - nat_entry
         - attr

        """
        self.send_sai_thrift_set_nat_entry_attribute(nat_entry, attr)
        self.recv_sai_thrift_set_nat_entry_attribute()

    def send_sai_thrift_set_nat_entry_attribute(self, nat_entry, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_nat_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_nat_entry_attribute_args()
        args.nat_entry = nat_entry
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_nat_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_nat_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_nat_entry_attribute(self, nat_entry, attr_list):
        """
        Parameters:
         - nat_entry
         - attr_list

        """
        self.send_sai_thrift_get_nat_entry_attribute(nat_entry, attr_list)
        return self.recv_sai_thrift_get_nat_entry_attribute()

    def send_sai_thrift_get_nat_entry_attribute(self, nat_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_nat_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_nat_entry_attribute_args()
        args.nat_entry = nat_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_nat_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_nat_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_nat_entry_attribute failed: unknown result")

    def sai_thrift_bulk_create_nat_entry(self, nat_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - nat_entry
         - attr_count
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_create_nat_entry(nat_entry, attr_count, attr_list, mode)
        return self.recv_sai_thrift_bulk_create_nat_entry()

    def send_sai_thrift_bulk_create_nat_entry(self, nat_entry, attr_count, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_create_nat_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_create_nat_entry_args()
        args.nat_entry = nat_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_create_nat_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_create_nat_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_create_nat_entry failed: unknown result")

    def sai_thrift_bulk_remove_nat_entry(self, nat_entry, mode):
        """
        Parameters:
         - nat_entry
         - mode

        """
        self.send_sai_thrift_bulk_remove_nat_entry(nat_entry, mode)
        return self.recv_sai_thrift_bulk_remove_nat_entry()

    def send_sai_thrift_bulk_remove_nat_entry(self, nat_entry, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_remove_nat_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_remove_nat_entry_args()
        args.nat_entry = nat_entry
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_remove_nat_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_remove_nat_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_remove_nat_entry failed: unknown result")

    def sai_thrift_bulk_set_nat_entry_attribute(self, nat_entry, attr_list, mode):
        """
        Parameters:
         - nat_entry
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_set_nat_entry_attribute(nat_entry, attr_list, mode)
        return self.recv_sai_thrift_bulk_set_nat_entry_attribute()

    def send_sai_thrift_bulk_set_nat_entry_attribute(self, nat_entry, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_set_nat_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_set_nat_entry_attribute_args()
        args.nat_entry = nat_entry
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_set_nat_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_set_nat_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_set_nat_entry_attribute failed: unknown result")

    def sai_thrift_bulk_get_nat_entry_attribute(self, nat_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - nat_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        self.send_sai_thrift_bulk_get_nat_entry_attribute(nat_entry, attr_count, attr_list, mode, object_statuses)
        return self.recv_sai_thrift_bulk_get_nat_entry_attribute()

    def send_sai_thrift_bulk_get_nat_entry_attribute(self, nat_entry, attr_count, attr_list, mode, object_statuses):
        self._oprot.writeMessageBegin('sai_thrift_bulk_get_nat_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_get_nat_entry_attribute_args()
        args.nat_entry = nat_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.object_statuses = object_statuses
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_get_nat_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_get_nat_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_get_nat_entry_attribute failed: unknown result")

    def sai_thrift_create_nat_zone_counter(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_nat_zone_counter(attr_list)
        return self.recv_sai_thrift_create_nat_zone_counter()

    def send_sai_thrift_create_nat_zone_counter(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_nat_zone_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_nat_zone_counter_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_nat_zone_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_nat_zone_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_nat_zone_counter failed: unknown result")

    def sai_thrift_remove_nat_zone_counter(self, nat_zone_counter_oid):
        """
        Parameters:
         - nat_zone_counter_oid

        """
        self.send_sai_thrift_remove_nat_zone_counter(nat_zone_counter_oid)
        self.recv_sai_thrift_remove_nat_zone_counter()

    def send_sai_thrift_remove_nat_zone_counter(self, nat_zone_counter_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_nat_zone_counter', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_nat_zone_counter_args()
        args.nat_zone_counter_oid = nat_zone_counter_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_nat_zone_counter(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_nat_zone_counter_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_nat_zone_counter_attribute(self, nat_zone_counter_oid, attr):
        """
        Parameters:
         - nat_zone_counter_oid
         - attr

        """
        self.send_sai_thrift_set_nat_zone_counter_attribute(nat_zone_counter_oid, attr)
        self.recv_sai_thrift_set_nat_zone_counter_attribute()

    def send_sai_thrift_set_nat_zone_counter_attribute(self, nat_zone_counter_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_nat_zone_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_nat_zone_counter_attribute_args()
        args.nat_zone_counter_oid = nat_zone_counter_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_nat_zone_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_nat_zone_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_nat_zone_counter_attribute(self, nat_zone_counter_oid, attr_list):
        """
        Parameters:
         - nat_zone_counter_oid
         - attr_list

        """
        self.send_sai_thrift_get_nat_zone_counter_attribute(nat_zone_counter_oid, attr_list)
        return self.recv_sai_thrift_get_nat_zone_counter_attribute()

    def send_sai_thrift_get_nat_zone_counter_attribute(self, nat_zone_counter_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_nat_zone_counter_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_nat_zone_counter_attribute_args()
        args.nat_zone_counter_oid = nat_zone_counter_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_nat_zone_counter_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_nat_zone_counter_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_nat_zone_counter_attribute failed: unknown result")

    def sai_thrift_create_neighbor_entry(self, neighbor_entry, attr_list):
        """
        Parameters:
         - neighbor_entry
         - attr_list

        """
        self.send_sai_thrift_create_neighbor_entry(neighbor_entry, attr_list)
        self.recv_sai_thrift_create_neighbor_entry()

    def send_sai_thrift_create_neighbor_entry(self, neighbor_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_neighbor_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_neighbor_entry_args()
        args.neighbor_entry = neighbor_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_neighbor_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_neighbor_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_remove_neighbor_entry(self, neighbor_entry):
        """
        Parameters:
         - neighbor_entry

        """
        self.send_sai_thrift_remove_neighbor_entry(neighbor_entry)
        self.recv_sai_thrift_remove_neighbor_entry()

    def send_sai_thrift_remove_neighbor_entry(self, neighbor_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_neighbor_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_neighbor_entry_args()
        args.neighbor_entry = neighbor_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_neighbor_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_neighbor_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_neighbor_entry_attribute(self, neighbor_entry, attr):
        """
        Parameters:
         - neighbor_entry
         - attr

        """
        self.send_sai_thrift_set_neighbor_entry_attribute(neighbor_entry, attr)
        self.recv_sai_thrift_set_neighbor_entry_attribute()

    def send_sai_thrift_set_neighbor_entry_attribute(self, neighbor_entry, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_neighbor_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_neighbor_entry_attribute_args()
        args.neighbor_entry = neighbor_entry
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_neighbor_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_neighbor_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_neighbor_entry_attribute(self, neighbor_entry, attr_list):
        """
        Parameters:
         - neighbor_entry
         - attr_list

        """
        self.send_sai_thrift_get_neighbor_entry_attribute(neighbor_entry, attr_list)
        return self.recv_sai_thrift_get_neighbor_entry_attribute()

    def send_sai_thrift_get_neighbor_entry_attribute(self, neighbor_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_neighbor_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_neighbor_entry_attribute_args()
        args.neighbor_entry = neighbor_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_neighbor_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_neighbor_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_neighbor_entry_attribute failed: unknown result")

    def sai_thrift_remove_all_neighbor_entries(self):
        self.send_sai_thrift_remove_all_neighbor_entries()
        self.recv_sai_thrift_remove_all_neighbor_entries()

    def send_sai_thrift_remove_all_neighbor_entries(self):
        self._oprot.writeMessageBegin('sai_thrift_remove_all_neighbor_entries', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_all_neighbor_entries_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_all_neighbor_entries(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_all_neighbor_entries_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_bulk_create_neighbor_entry(self, neighbor_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - neighbor_entry
         - attr_count
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_create_neighbor_entry(neighbor_entry, attr_count, attr_list, mode)
        return self.recv_sai_thrift_bulk_create_neighbor_entry()

    def send_sai_thrift_bulk_create_neighbor_entry(self, neighbor_entry, attr_count, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_create_neighbor_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_create_neighbor_entry_args()
        args.neighbor_entry = neighbor_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_create_neighbor_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_create_neighbor_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_create_neighbor_entry failed: unknown result")

    def sai_thrift_bulk_remove_neighbor_entry(self, neighbor_entry, mode):
        """
        Parameters:
         - neighbor_entry
         - mode

        """
        self.send_sai_thrift_bulk_remove_neighbor_entry(neighbor_entry, mode)
        return self.recv_sai_thrift_bulk_remove_neighbor_entry()

    def send_sai_thrift_bulk_remove_neighbor_entry(self, neighbor_entry, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_remove_neighbor_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_remove_neighbor_entry_args()
        args.neighbor_entry = neighbor_entry
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_remove_neighbor_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_remove_neighbor_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_remove_neighbor_entry failed: unknown result")

    def sai_thrift_bulk_set_neighbor_entry_attribute(self, neighbor_entry, attr_list, mode):
        """
        Parameters:
         - neighbor_entry
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_set_neighbor_entry_attribute(neighbor_entry, attr_list, mode)
        return self.recv_sai_thrift_bulk_set_neighbor_entry_attribute()

    def send_sai_thrift_bulk_set_neighbor_entry_attribute(self, neighbor_entry, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_set_neighbor_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_set_neighbor_entry_attribute_args()
        args.neighbor_entry = neighbor_entry
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_set_neighbor_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_set_neighbor_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_set_neighbor_entry_attribute failed: unknown result")

    def sai_thrift_bulk_get_neighbor_entry_attribute(self, neighbor_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - neighbor_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        self.send_sai_thrift_bulk_get_neighbor_entry_attribute(neighbor_entry, attr_count, attr_list, mode, object_statuses)
        return self.recv_sai_thrift_bulk_get_neighbor_entry_attribute()

    def send_sai_thrift_bulk_get_neighbor_entry_attribute(self, neighbor_entry, attr_count, attr_list, mode, object_statuses):
        self._oprot.writeMessageBegin('sai_thrift_bulk_get_neighbor_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_get_neighbor_entry_attribute_args()
        args.neighbor_entry = neighbor_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.object_statuses = object_statuses
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_get_neighbor_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_get_neighbor_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_get_neighbor_entry_attribute failed: unknown result")

    def sai_thrift_create_next_hop(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_next_hop(attr_list)
        return self.recv_sai_thrift_create_next_hop()

    def send_sai_thrift_create_next_hop(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_next_hop', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_next_hop_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_next_hop(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_next_hop_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop failed: unknown result")

    def sai_thrift_remove_next_hop(self, next_hop_oid):
        """
        Parameters:
         - next_hop_oid

        """
        self.send_sai_thrift_remove_next_hop(next_hop_oid)
        self.recv_sai_thrift_remove_next_hop()

    def send_sai_thrift_remove_next_hop(self, next_hop_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_next_hop', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_next_hop_args()
        args.next_hop_oid = next_hop_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_next_hop(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_next_hop_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_next_hop_attribute(self, next_hop_oid, attr):
        """
        Parameters:
         - next_hop_oid
         - attr

        """
        self.send_sai_thrift_set_next_hop_attribute(next_hop_oid, attr)
        self.recv_sai_thrift_set_next_hop_attribute()

    def send_sai_thrift_set_next_hop_attribute(self, next_hop_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_next_hop_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_next_hop_attribute_args()
        args.next_hop_oid = next_hop_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_next_hop_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_next_hop_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_next_hop_attribute(self, next_hop_oid, attr_list):
        """
        Parameters:
         - next_hop_oid
         - attr_list

        """
        self.send_sai_thrift_get_next_hop_attribute(next_hop_oid, attr_list)
        return self.recv_sai_thrift_get_next_hop_attribute()

    def send_sai_thrift_get_next_hop_attribute(self, next_hop_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_next_hop_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_next_hop_attribute_args()
        args.next_hop_oid = next_hop_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_next_hop_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_next_hop_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_attribute failed: unknown result")

    def sai_thrift_create_next_hop_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_next_hop_group(attr_list)
        return self.recv_sai_thrift_create_next_hop_group()

    def send_sai_thrift_create_next_hop_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_next_hop_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_next_hop_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_next_hop_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_next_hop_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop_group failed: unknown result")

    def sai_thrift_remove_next_hop_group(self, next_hop_group_oid):
        """
        Parameters:
         - next_hop_group_oid

        """
        self.send_sai_thrift_remove_next_hop_group(next_hop_group_oid)
        self.recv_sai_thrift_remove_next_hop_group()

    def send_sai_thrift_remove_next_hop_group(self, next_hop_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_next_hop_group_args()
        args.next_hop_group_oid = next_hop_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_next_hop_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_next_hop_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_next_hop_group_attribute(self, next_hop_group_oid, attr):
        """
        Parameters:
         - next_hop_group_oid
         - attr

        """
        self.send_sai_thrift_set_next_hop_group_attribute(next_hop_group_oid, attr)
        self.recv_sai_thrift_set_next_hop_group_attribute()

    def send_sai_thrift_set_next_hop_group_attribute(self, next_hop_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_next_hop_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_next_hop_group_attribute_args()
        args.next_hop_group_oid = next_hop_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_next_hop_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_next_hop_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_next_hop_group_attribute(self, next_hop_group_oid, attr_list):
        """
        Parameters:
         - next_hop_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_next_hop_group_attribute(next_hop_group_oid, attr_list)
        return self.recv_sai_thrift_get_next_hop_group_attribute()

    def send_sai_thrift_get_next_hop_group_attribute(self, next_hop_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_next_hop_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_next_hop_group_attribute_args()
        args.next_hop_group_oid = next_hop_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_next_hop_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_next_hop_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_group_attribute failed: unknown result")

    def sai_thrift_create_next_hop_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_next_hop_group_member(attr_list)
        return self.recv_sai_thrift_create_next_hop_group_member()

    def send_sai_thrift_create_next_hop_group_member(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_next_hop_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_next_hop_group_member_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_next_hop_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_next_hop_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop_group_member failed: unknown result")

    def sai_thrift_remove_next_hop_group_member(self, next_hop_group_member_oid):
        """
        Parameters:
         - next_hop_group_member_oid

        """
        self.send_sai_thrift_remove_next_hop_group_member(next_hop_group_member_oid)
        self.recv_sai_thrift_remove_next_hop_group_member()

    def send_sai_thrift_remove_next_hop_group_member(self, next_hop_group_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_next_hop_group_member_args()
        args.next_hop_group_member_oid = next_hop_group_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_next_hop_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_next_hop_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_next_hop_group_member_attribute(self, next_hop_group_member_oid, attr):
        """
        Parameters:
         - next_hop_group_member_oid
         - attr

        """
        self.send_sai_thrift_set_next_hop_group_member_attribute(next_hop_group_member_oid, attr)
        self.recv_sai_thrift_set_next_hop_group_member_attribute()

    def send_sai_thrift_set_next_hop_group_member_attribute(self, next_hop_group_member_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_next_hop_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_next_hop_group_member_attribute_args()
        args.next_hop_group_member_oid = next_hop_group_member_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_next_hop_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_next_hop_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_next_hop_group_member_attribute(self, next_hop_group_member_oid, attr_list):
        """
        Parameters:
         - next_hop_group_member_oid
         - attr_list

        """
        self.send_sai_thrift_get_next_hop_group_member_attribute(next_hop_group_member_oid, attr_list)
        return self.recv_sai_thrift_get_next_hop_group_member_attribute()

    def send_sai_thrift_get_next_hop_group_member_attribute(self, next_hop_group_member_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_next_hop_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_next_hop_group_member_attribute_args()
        args.next_hop_group_member_oid = next_hop_group_member_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_next_hop_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_next_hop_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_group_member_attribute failed: unknown result")

    def sai_thrift_create_next_hop_group_map(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_next_hop_group_map(attr_list)
        return self.recv_sai_thrift_create_next_hop_group_map()

    def send_sai_thrift_create_next_hop_group_map(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_next_hop_group_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_next_hop_group_map_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_next_hop_group_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_next_hop_group_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop_group_map failed: unknown result")

    def sai_thrift_remove_next_hop_group_map(self, next_hop_group_map_oid):
        """
        Parameters:
         - next_hop_group_map_oid

        """
        self.send_sai_thrift_remove_next_hop_group_map(next_hop_group_map_oid)
        self.recv_sai_thrift_remove_next_hop_group_map()

    def send_sai_thrift_remove_next_hop_group_map(self, next_hop_group_map_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_group_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_next_hop_group_map_args()
        args.next_hop_group_map_oid = next_hop_group_map_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_next_hop_group_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_next_hop_group_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_next_hop_group_map_attribute(self, next_hop_group_map_oid, attr):
        """
        Parameters:
         - next_hop_group_map_oid
         - attr

        """
        self.send_sai_thrift_set_next_hop_group_map_attribute(next_hop_group_map_oid, attr)
        self.recv_sai_thrift_set_next_hop_group_map_attribute()

    def send_sai_thrift_set_next_hop_group_map_attribute(self, next_hop_group_map_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_next_hop_group_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_next_hop_group_map_attribute_args()
        args.next_hop_group_map_oid = next_hop_group_map_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_next_hop_group_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_next_hop_group_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_next_hop_group_map_attribute(self, next_hop_group_map_oid, attr_list):
        """
        Parameters:
         - next_hop_group_map_oid
         - attr_list

        """
        self.send_sai_thrift_get_next_hop_group_map_attribute(next_hop_group_map_oid, attr_list)
        return self.recv_sai_thrift_get_next_hop_group_map_attribute()

    def send_sai_thrift_get_next_hop_group_map_attribute(self, next_hop_group_map_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_next_hop_group_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_next_hop_group_map_attribute_args()
        args.next_hop_group_map_oid = next_hop_group_map_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_next_hop_group_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_next_hop_group_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_group_map_attribute failed: unknown result")

    def sai_thrift_create_policer(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_policer(attr_list)
        return self.recv_sai_thrift_create_policer()

    def send_sai_thrift_create_policer(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_policer', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_policer_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_policer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_policer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_policer failed: unknown result")

    def sai_thrift_remove_policer(self, policer_oid):
        """
        Parameters:
         - policer_oid

        """
        self.send_sai_thrift_remove_policer(policer_oid)
        self.recv_sai_thrift_remove_policer()

    def send_sai_thrift_remove_policer(self, policer_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_policer', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_policer_args()
        args.policer_oid = policer_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_policer(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_policer_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_policer_attribute(self, policer_oid, attr):
        """
        Parameters:
         - policer_oid
         - attr

        """
        self.send_sai_thrift_set_policer_attribute(policer_oid, attr)
        self.recv_sai_thrift_set_policer_attribute()

    def send_sai_thrift_set_policer_attribute(self, policer_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_policer_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_policer_attribute_args()
        args.policer_oid = policer_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_policer_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_policer_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_policer_attribute(self, policer_oid, attr_list):
        """
        Parameters:
         - policer_oid
         - attr_list

        """
        self.send_sai_thrift_get_policer_attribute(policer_oid, attr_list)
        return self.recv_sai_thrift_get_policer_attribute()

    def send_sai_thrift_get_policer_attribute(self, policer_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_policer_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_policer_attribute_args()
        args.policer_oid = policer_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_policer_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_policer_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_policer_attribute failed: unknown result")

    def sai_thrift_get_policer_stats(self, policer_oid, counter_ids):
        """
        Parameters:
         - policer_oid
         - counter_ids

        """
        self.send_sai_thrift_get_policer_stats(policer_oid, counter_ids)
        return self.recv_sai_thrift_get_policer_stats()

    def send_sai_thrift_get_policer_stats(self, policer_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_policer_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_policer_stats_args()
        args.policer_oid = policer_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_policer_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_policer_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_policer_stats failed: unknown result")

    def sai_thrift_get_policer_stats_ext(self, policer_oid, counter_ids, mode):
        """
        Parameters:
         - policer_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_policer_stats_ext(policer_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_policer_stats_ext()

    def send_sai_thrift_get_policer_stats_ext(self, policer_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_policer_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_policer_stats_ext_args()
        args.policer_oid = policer_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_policer_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_policer_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_policer_stats_ext failed: unknown result")

    def sai_thrift_clear_policer_stats(self, policer_oid, counter_ids):
        """
        Parameters:
         - policer_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_policer_stats(policer_oid, counter_ids)
        self.recv_sai_thrift_clear_policer_stats()

    def send_sai_thrift_clear_policer_stats(self, policer_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_policer_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_policer_stats_args()
        args.policer_oid = policer_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_policer_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_policer_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_port(attr_list)
        return self.recv_sai_thrift_create_port()

    def send_sai_thrift_create_port(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_port_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_port failed: unknown result")

    def sai_thrift_remove_port(self, port_oid):
        """
        Parameters:
         - port_oid

        """
        self.send_sai_thrift_remove_port(port_oid)
        self.recv_sai_thrift_remove_port()

    def send_sai_thrift_remove_port(self, port_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_port_args()
        args.port_oid = port_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_port_attribute(self, port_oid, attr):
        """
        Parameters:
         - port_oid
         - attr

        """
        self.send_sai_thrift_set_port_attribute(port_oid, attr)
        self.recv_sai_thrift_set_port_attribute()

    def send_sai_thrift_set_port_attribute(self, port_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_port_attribute_args()
        args.port_oid = port_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_port_attribute(self, port_oid, attr_list):
        """
        Parameters:
         - port_oid
         - attr_list

        """
        self.send_sai_thrift_get_port_attribute(port_oid, attr_list)
        return self.recv_sai_thrift_get_port_attribute()

    def send_sai_thrift_get_port_attribute(self, port_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_attribute_args()
        args.port_oid = port_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_attribute failed: unknown result")

    def sai_thrift_get_port_stats(self, port_oid, counter_ids):
        """
        Parameters:
         - port_oid
         - counter_ids

        """
        self.send_sai_thrift_get_port_stats(port_oid, counter_ids)
        return self.recv_sai_thrift_get_port_stats()

    def send_sai_thrift_get_port_stats(self, port_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_stats_args()
        args.port_oid = port_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_stats failed: unknown result")

    def sai_thrift_get_port_stats_ext(self, port_oid, counter_ids, mode):
        """
        Parameters:
         - port_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_port_stats_ext(port_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_port_stats_ext()

    def send_sai_thrift_get_port_stats_ext(self, port_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_port_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_stats_ext_args()
        args.port_oid = port_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_stats_ext failed: unknown result")

    def sai_thrift_clear_port_stats(self, port_oid, counter_ids):
        """
        Parameters:
         - port_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_port_stats(port_oid, counter_ids)
        self.recv_sai_thrift_clear_port_stats()

    def send_sai_thrift_clear_port_stats(self, port_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_port_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_port_stats_args()
        args.port_oid = port_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_port_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_port_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_clear_port_all_stats(self, port_oid):
        """
        Parameters:
         - port_oid

        """
        self.send_sai_thrift_clear_port_all_stats(port_oid)
        self.recv_sai_thrift_clear_port_all_stats()

    def send_sai_thrift_clear_port_all_stats(self, port_oid):
        self._oprot.writeMessageBegin('sai_thrift_clear_port_all_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_port_all_stats_args()
        args.port_oid = port_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_port_all_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_port_all_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_port_pool(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_port_pool(attr_list)
        return self.recv_sai_thrift_create_port_pool()

    def send_sai_thrift_create_port_pool(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_port_pool', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_port_pool_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_port_pool(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_port_pool_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_port_pool failed: unknown result")

    def sai_thrift_remove_port_pool(self, port_pool_oid):
        """
        Parameters:
         - port_pool_oid

        """
        self.send_sai_thrift_remove_port_pool(port_pool_oid)
        self.recv_sai_thrift_remove_port_pool()

    def send_sai_thrift_remove_port_pool(self, port_pool_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_port_pool', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_port_pool_args()
        args.port_pool_oid = port_pool_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_port_pool(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_port_pool_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_port_pool_attribute(self, port_pool_oid, attr):
        """
        Parameters:
         - port_pool_oid
         - attr

        """
        self.send_sai_thrift_set_port_pool_attribute(port_pool_oid, attr)
        self.recv_sai_thrift_set_port_pool_attribute()

    def send_sai_thrift_set_port_pool_attribute(self, port_pool_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_port_pool_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_port_pool_attribute_args()
        args.port_pool_oid = port_pool_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_port_pool_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_port_pool_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_port_pool_attribute(self, port_pool_oid, attr_list):
        """
        Parameters:
         - port_pool_oid
         - attr_list

        """
        self.send_sai_thrift_get_port_pool_attribute(port_pool_oid, attr_list)
        return self.recv_sai_thrift_get_port_pool_attribute()

    def send_sai_thrift_get_port_pool_attribute(self, port_pool_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_port_pool_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_pool_attribute_args()
        args.port_pool_oid = port_pool_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_pool_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_pool_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_pool_attribute failed: unknown result")

    def sai_thrift_get_port_pool_stats(self, port_pool_oid, counter_ids):
        """
        Parameters:
         - port_pool_oid
         - counter_ids

        """
        self.send_sai_thrift_get_port_pool_stats(port_pool_oid, counter_ids)
        return self.recv_sai_thrift_get_port_pool_stats()

    def send_sai_thrift_get_port_pool_stats(self, port_pool_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_port_pool_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_pool_stats_args()
        args.port_pool_oid = port_pool_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_pool_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_pool_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_pool_stats failed: unknown result")

    def sai_thrift_get_port_pool_stats_ext(self, port_pool_oid, counter_ids, mode):
        """
        Parameters:
         - port_pool_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_port_pool_stats_ext(port_pool_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_port_pool_stats_ext()

    def send_sai_thrift_get_port_pool_stats_ext(self, port_pool_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_port_pool_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_pool_stats_ext_args()
        args.port_pool_oid = port_pool_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_pool_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_pool_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_pool_stats_ext failed: unknown result")

    def sai_thrift_clear_port_pool_stats(self, port_pool_oid, counter_ids):
        """
        Parameters:
         - port_pool_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_port_pool_stats(port_pool_oid, counter_ids)
        self.recv_sai_thrift_clear_port_pool_stats()

    def send_sai_thrift_clear_port_pool_stats(self, port_pool_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_port_pool_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_port_pool_stats_args()
        args.port_pool_oid = port_pool_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_port_pool_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_port_pool_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_port_serdes(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_port_serdes(attr_list)
        return self.recv_sai_thrift_create_port_serdes()

    def send_sai_thrift_create_port_serdes(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_port_serdes', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_port_serdes_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_port_serdes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_port_serdes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_port_serdes failed: unknown result")

    def sai_thrift_remove_port_serdes(self, port_serdes_oid):
        """
        Parameters:
         - port_serdes_oid

        """
        self.send_sai_thrift_remove_port_serdes(port_serdes_oid)
        self.recv_sai_thrift_remove_port_serdes()

    def send_sai_thrift_remove_port_serdes(self, port_serdes_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_port_serdes', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_port_serdes_args()
        args.port_serdes_oid = port_serdes_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_port_serdes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_port_serdes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_port_serdes_attribute(self, port_serdes_oid, attr):
        """
        Parameters:
         - port_serdes_oid
         - attr

        """
        self.send_sai_thrift_set_port_serdes_attribute(port_serdes_oid, attr)
        self.recv_sai_thrift_set_port_serdes_attribute()

    def send_sai_thrift_set_port_serdes_attribute(self, port_serdes_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_port_serdes_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_port_serdes_attribute_args()
        args.port_serdes_oid = port_serdes_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_port_serdes_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_port_serdes_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_port_serdes_attribute(self, port_serdes_oid, attr_list):
        """
        Parameters:
         - port_serdes_oid
         - attr_list

        """
        self.send_sai_thrift_get_port_serdes_attribute(port_serdes_oid, attr_list)
        return self.recv_sai_thrift_get_port_serdes_attribute()

    def send_sai_thrift_get_port_serdes_attribute(self, port_serdes_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_port_serdes_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_serdes_attribute_args()
        args.port_serdes_oid = port_serdes_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_serdes_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_serdes_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_serdes_attribute failed: unknown result")

    def sai_thrift_create_port_connector(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_port_connector(attr_list)
        return self.recv_sai_thrift_create_port_connector()

    def send_sai_thrift_create_port_connector(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_port_connector', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_port_connector_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_port_connector(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_port_connector_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_port_connector failed: unknown result")

    def sai_thrift_remove_port_connector(self, port_connector_oid):
        """
        Parameters:
         - port_connector_oid

        """
        self.send_sai_thrift_remove_port_connector(port_connector_oid)
        self.recv_sai_thrift_remove_port_connector()

    def send_sai_thrift_remove_port_connector(self, port_connector_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_port_connector', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_port_connector_args()
        args.port_connector_oid = port_connector_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_port_connector(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_port_connector_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_port_connector_attribute(self, port_connector_oid, attr):
        """
        Parameters:
         - port_connector_oid
         - attr

        """
        self.send_sai_thrift_set_port_connector_attribute(port_connector_oid, attr)
        self.recv_sai_thrift_set_port_connector_attribute()

    def send_sai_thrift_set_port_connector_attribute(self, port_connector_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_port_connector_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_port_connector_attribute_args()
        args.port_connector_oid = port_connector_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_port_connector_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_port_connector_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_port_connector_attribute(self, port_connector_oid, attr_list):
        """
        Parameters:
         - port_connector_oid
         - attr_list

        """
        self.send_sai_thrift_get_port_connector_attribute(port_connector_oid, attr_list)
        return self.recv_sai_thrift_get_port_connector_attribute()

    def send_sai_thrift_get_port_connector_attribute(self, port_connector_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_port_connector_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_port_connector_attribute_args()
        args.port_connector_oid = port_connector_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_port_connector_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_port_connector_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_connector_attribute failed: unknown result")

    def sai_thrift_create_qos_map(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_qos_map(attr_list)
        return self.recv_sai_thrift_create_qos_map()

    def send_sai_thrift_create_qos_map(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_qos_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_qos_map_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_qos_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_qos_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_qos_map failed: unknown result")

    def sai_thrift_remove_qos_map(self, qos_map_oid):
        """
        Parameters:
         - qos_map_oid

        """
        self.send_sai_thrift_remove_qos_map(qos_map_oid)
        self.recv_sai_thrift_remove_qos_map()

    def send_sai_thrift_remove_qos_map(self, qos_map_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_qos_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_qos_map_args()
        args.qos_map_oid = qos_map_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_qos_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_qos_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_qos_map_attribute(self, qos_map_oid, attr):
        """
        Parameters:
         - qos_map_oid
         - attr

        """
        self.send_sai_thrift_set_qos_map_attribute(qos_map_oid, attr)
        self.recv_sai_thrift_set_qos_map_attribute()

    def send_sai_thrift_set_qos_map_attribute(self, qos_map_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_qos_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_qos_map_attribute_args()
        args.qos_map_oid = qos_map_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_qos_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_qos_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_qos_map_attribute(self, qos_map_oid, attr_list):
        """
        Parameters:
         - qos_map_oid
         - attr_list

        """
        self.send_sai_thrift_get_qos_map_attribute(qos_map_oid, attr_list)
        return self.recv_sai_thrift_get_qos_map_attribute()

    def send_sai_thrift_get_qos_map_attribute(self, qos_map_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_qos_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_qos_map_attribute_args()
        args.qos_map_oid = qos_map_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_qos_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_qos_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_qos_map_attribute failed: unknown result")

    def sai_thrift_create_queue(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_queue(attr_list)
        return self.recv_sai_thrift_create_queue()

    def send_sai_thrift_create_queue(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_queue', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_queue_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_queue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_queue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_queue failed: unknown result")

    def sai_thrift_remove_queue(self, queue_oid):
        """
        Parameters:
         - queue_oid

        """
        self.send_sai_thrift_remove_queue(queue_oid)
        self.recv_sai_thrift_remove_queue()

    def send_sai_thrift_remove_queue(self, queue_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_queue', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_queue_args()
        args.queue_oid = queue_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_queue(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_queue_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_queue_attribute(self, queue_oid, attr):
        """
        Parameters:
         - queue_oid
         - attr

        """
        self.send_sai_thrift_set_queue_attribute(queue_oid, attr)
        self.recv_sai_thrift_set_queue_attribute()

    def send_sai_thrift_set_queue_attribute(self, queue_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_queue_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_queue_attribute_args()
        args.queue_oid = queue_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_queue_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_queue_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_queue_attribute(self, queue_oid, attr_list):
        """
        Parameters:
         - queue_oid
         - attr_list

        """
        self.send_sai_thrift_get_queue_attribute(queue_oid, attr_list)
        return self.recv_sai_thrift_get_queue_attribute()

    def send_sai_thrift_get_queue_attribute(self, queue_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_queue_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_queue_attribute_args()
        args.queue_oid = queue_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_queue_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_queue_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_queue_attribute failed: unknown result")

    def sai_thrift_get_queue_stats(self, queue_oid, counter_ids):
        """
        Parameters:
         - queue_oid
         - counter_ids

        """
        self.send_sai_thrift_get_queue_stats(queue_oid, counter_ids)
        return self.recv_sai_thrift_get_queue_stats()

    def send_sai_thrift_get_queue_stats(self, queue_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_queue_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_queue_stats_args()
        args.queue_oid = queue_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_queue_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_queue_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_queue_stats failed: unknown result")

    def sai_thrift_get_queue_stats_ext(self, queue_oid, counter_ids, mode):
        """
        Parameters:
         - queue_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_queue_stats_ext(queue_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_queue_stats_ext()

    def send_sai_thrift_get_queue_stats_ext(self, queue_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_queue_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_queue_stats_ext_args()
        args.queue_oid = queue_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_queue_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_queue_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_queue_stats_ext failed: unknown result")

    def sai_thrift_clear_queue_stats(self, queue_oid, counter_ids):
        """
        Parameters:
         - queue_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_queue_stats(queue_oid, counter_ids)
        self.recv_sai_thrift_clear_queue_stats()

    def send_sai_thrift_clear_queue_stats(self, queue_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_queue_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_queue_stats_args()
        args.queue_oid = queue_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_queue_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_queue_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_route_entry(self, route_entry, attr_list):
        """
        Parameters:
         - route_entry
         - attr_list

        """
        self.send_sai_thrift_create_route_entry(route_entry, attr_list)
        self.recv_sai_thrift_create_route_entry()

    def send_sai_thrift_create_route_entry(self, route_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_route_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_route_entry_args()
        args.route_entry = route_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_route_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_route_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_remove_route_entry(self, route_entry):
        """
        Parameters:
         - route_entry

        """
        self.send_sai_thrift_remove_route_entry(route_entry)
        self.recv_sai_thrift_remove_route_entry()

    def send_sai_thrift_remove_route_entry(self, route_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_route_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_route_entry_args()
        args.route_entry = route_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_route_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_route_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_route_entry_attribute(self, route_entry, attr):
        """
        Parameters:
         - route_entry
         - attr

        """
        self.send_sai_thrift_set_route_entry_attribute(route_entry, attr)
        self.recv_sai_thrift_set_route_entry_attribute()

    def send_sai_thrift_set_route_entry_attribute(self, route_entry, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_route_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_route_entry_attribute_args()
        args.route_entry = route_entry
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_route_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_route_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_route_entry_attribute(self, route_entry, attr_list):
        """
        Parameters:
         - route_entry
         - attr_list

        """
        self.send_sai_thrift_get_route_entry_attribute(route_entry, attr_list)
        return self.recv_sai_thrift_get_route_entry_attribute()

    def send_sai_thrift_get_route_entry_attribute(self, route_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_route_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_route_entry_attribute_args()
        args.route_entry = route_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_route_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_route_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_route_entry_attribute failed: unknown result")

    def sai_thrift_bulk_create_route_entry(self, route_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - route_entry
         - attr_count
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_create_route_entry(route_entry, attr_count, attr_list, mode)
        return self.recv_sai_thrift_bulk_create_route_entry()

    def send_sai_thrift_bulk_create_route_entry(self, route_entry, attr_count, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_create_route_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_create_route_entry_args()
        args.route_entry = route_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_create_route_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_create_route_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_create_route_entry failed: unknown result")

    def sai_thrift_bulk_remove_route_entry(self, route_entry, mode):
        """
        Parameters:
         - route_entry
         - mode

        """
        self.send_sai_thrift_bulk_remove_route_entry(route_entry, mode)
        return self.recv_sai_thrift_bulk_remove_route_entry()

    def send_sai_thrift_bulk_remove_route_entry(self, route_entry, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_remove_route_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_remove_route_entry_args()
        args.route_entry = route_entry
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_remove_route_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_remove_route_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_remove_route_entry failed: unknown result")

    def sai_thrift_bulk_set_route_entry_attribute(self, route_entry, attr_list, mode):
        """
        Parameters:
         - route_entry
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_set_route_entry_attribute(route_entry, attr_list, mode)
        return self.recv_sai_thrift_bulk_set_route_entry_attribute()

    def send_sai_thrift_bulk_set_route_entry_attribute(self, route_entry, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_set_route_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_set_route_entry_attribute_args()
        args.route_entry = route_entry
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_set_route_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_set_route_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_set_route_entry_attribute failed: unknown result")

    def sai_thrift_bulk_get_route_entry_attribute(self, route_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - route_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        self.send_sai_thrift_bulk_get_route_entry_attribute(route_entry, attr_count, attr_list, mode, object_statuses)
        return self.recv_sai_thrift_bulk_get_route_entry_attribute()

    def send_sai_thrift_bulk_get_route_entry_attribute(self, route_entry, attr_count, attr_list, mode, object_statuses):
        self._oprot.writeMessageBegin('sai_thrift_bulk_get_route_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_get_route_entry_attribute_args()
        args.route_entry = route_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.object_statuses = object_statuses
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_get_route_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_get_route_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_get_route_entry_attribute failed: unknown result")

    def sai_thrift_create_router_interface(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_router_interface(attr_list)
        return self.recv_sai_thrift_create_router_interface()

    def send_sai_thrift_create_router_interface(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_router_interface', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_router_interface_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_router_interface(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_router_interface_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_router_interface failed: unknown result")

    def sai_thrift_remove_router_interface(self, router_interface_oid):
        """
        Parameters:
         - router_interface_oid

        """
        self.send_sai_thrift_remove_router_interface(router_interface_oid)
        self.recv_sai_thrift_remove_router_interface()

    def send_sai_thrift_remove_router_interface(self, router_interface_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_router_interface', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_router_interface_args()
        args.router_interface_oid = router_interface_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_router_interface(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_router_interface_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_router_interface_attribute(self, router_interface_oid, attr):
        """
        Parameters:
         - router_interface_oid
         - attr

        """
        self.send_sai_thrift_set_router_interface_attribute(router_interface_oid, attr)
        self.recv_sai_thrift_set_router_interface_attribute()

    def send_sai_thrift_set_router_interface_attribute(self, router_interface_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_router_interface_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_router_interface_attribute_args()
        args.router_interface_oid = router_interface_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_router_interface_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_router_interface_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_router_interface_attribute(self, router_interface_oid, attr_list):
        """
        Parameters:
         - router_interface_oid
         - attr_list

        """
        self.send_sai_thrift_get_router_interface_attribute(router_interface_oid, attr_list)
        return self.recv_sai_thrift_get_router_interface_attribute()

    def send_sai_thrift_get_router_interface_attribute(self, router_interface_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_router_interface_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_router_interface_attribute_args()
        args.router_interface_oid = router_interface_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_router_interface_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_router_interface_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_router_interface_attribute failed: unknown result")

    def sai_thrift_get_router_interface_stats(self, router_interface_oid, counter_ids):
        """
        Parameters:
         - router_interface_oid
         - counter_ids

        """
        self.send_sai_thrift_get_router_interface_stats(router_interface_oid, counter_ids)
        return self.recv_sai_thrift_get_router_interface_stats()

    def send_sai_thrift_get_router_interface_stats(self, router_interface_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_router_interface_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_router_interface_stats_args()
        args.router_interface_oid = router_interface_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_router_interface_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_router_interface_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_router_interface_stats failed: unknown result")

    def sai_thrift_get_router_interface_stats_ext(self, router_interface_oid, counter_ids, mode):
        """
        Parameters:
         - router_interface_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_router_interface_stats_ext(router_interface_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_router_interface_stats_ext()

    def send_sai_thrift_get_router_interface_stats_ext(self, router_interface_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_router_interface_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_router_interface_stats_ext_args()
        args.router_interface_oid = router_interface_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_router_interface_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_router_interface_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_router_interface_stats_ext failed: unknown result")

    def sai_thrift_clear_router_interface_stats(self, router_interface_oid, counter_ids):
        """
        Parameters:
         - router_interface_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_router_interface_stats(router_interface_oid, counter_ids)
        self.recv_sai_thrift_clear_router_interface_stats()

    def send_sai_thrift_clear_router_interface_stats(self, router_interface_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_router_interface_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_router_interface_stats_args()
        args.router_interface_oid = router_interface_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_router_interface_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_router_interface_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_rpf_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_rpf_group(attr_list)
        return self.recv_sai_thrift_create_rpf_group()

    def send_sai_thrift_create_rpf_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_rpf_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_rpf_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_rpf_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_rpf_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_rpf_group failed: unknown result")

    def sai_thrift_remove_rpf_group(self, rpf_group_oid):
        """
        Parameters:
         - rpf_group_oid

        """
        self.send_sai_thrift_remove_rpf_group(rpf_group_oid)
        self.recv_sai_thrift_remove_rpf_group()

    def send_sai_thrift_remove_rpf_group(self, rpf_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_rpf_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_rpf_group_args()
        args.rpf_group_oid = rpf_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_rpf_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_rpf_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_rpf_group_attribute(self, rpf_group_oid, attr):
        """
        Parameters:
         - rpf_group_oid
         - attr

        """
        self.send_sai_thrift_set_rpf_group_attribute(rpf_group_oid, attr)
        self.recv_sai_thrift_set_rpf_group_attribute()

    def send_sai_thrift_set_rpf_group_attribute(self, rpf_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_rpf_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_rpf_group_attribute_args()
        args.rpf_group_oid = rpf_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_rpf_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_rpf_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_rpf_group_attribute(self, rpf_group_oid, attr_list):
        """
        Parameters:
         - rpf_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_rpf_group_attribute(rpf_group_oid, attr_list)
        return self.recv_sai_thrift_get_rpf_group_attribute()

    def send_sai_thrift_get_rpf_group_attribute(self, rpf_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_rpf_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_rpf_group_attribute_args()
        args.rpf_group_oid = rpf_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_rpf_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_rpf_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_rpf_group_attribute failed: unknown result")

    def sai_thrift_create_rpf_group_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_rpf_group_member(attr_list)
        return self.recv_sai_thrift_create_rpf_group_member()

    def send_sai_thrift_create_rpf_group_member(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_rpf_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_rpf_group_member_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_rpf_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_rpf_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_rpf_group_member failed: unknown result")

    def sai_thrift_remove_rpf_group_member(self, rpf_group_member_oid):
        """
        Parameters:
         - rpf_group_member_oid

        """
        self.send_sai_thrift_remove_rpf_group_member(rpf_group_member_oid)
        self.recv_sai_thrift_remove_rpf_group_member()

    def send_sai_thrift_remove_rpf_group_member(self, rpf_group_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_rpf_group_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_rpf_group_member_args()
        args.rpf_group_member_oid = rpf_group_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_rpf_group_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_rpf_group_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_rpf_group_member_attribute(self, rpf_group_member_oid, attr):
        """
        Parameters:
         - rpf_group_member_oid
         - attr

        """
        self.send_sai_thrift_set_rpf_group_member_attribute(rpf_group_member_oid, attr)
        self.recv_sai_thrift_set_rpf_group_member_attribute()

    def send_sai_thrift_set_rpf_group_member_attribute(self, rpf_group_member_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_rpf_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_rpf_group_member_attribute_args()
        args.rpf_group_member_oid = rpf_group_member_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_rpf_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_rpf_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_rpf_group_member_attribute(self, rpf_group_member_oid, attr_list):
        """
        Parameters:
         - rpf_group_member_oid
         - attr_list

        """
        self.send_sai_thrift_get_rpf_group_member_attribute(rpf_group_member_oid, attr_list)
        return self.recv_sai_thrift_get_rpf_group_member_attribute()

    def send_sai_thrift_get_rpf_group_member_attribute(self, rpf_group_member_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_rpf_group_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_rpf_group_member_attribute_args()
        args.rpf_group_member_oid = rpf_group_member_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_rpf_group_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_rpf_group_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_rpf_group_member_attribute failed: unknown result")

    def sai_thrift_create_samplepacket(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_samplepacket(attr_list)
        return self.recv_sai_thrift_create_samplepacket()

    def send_sai_thrift_create_samplepacket(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_samplepacket', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_samplepacket_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_samplepacket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_samplepacket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_samplepacket failed: unknown result")

    def sai_thrift_remove_samplepacket(self, samplepacket_oid):
        """
        Parameters:
         - samplepacket_oid

        """
        self.send_sai_thrift_remove_samplepacket(samplepacket_oid)
        self.recv_sai_thrift_remove_samplepacket()

    def send_sai_thrift_remove_samplepacket(self, samplepacket_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_samplepacket', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_samplepacket_args()
        args.samplepacket_oid = samplepacket_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_samplepacket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_samplepacket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_samplepacket_attribute(self, samplepacket_oid, attr):
        """
        Parameters:
         - samplepacket_oid
         - attr

        """
        self.send_sai_thrift_set_samplepacket_attribute(samplepacket_oid, attr)
        self.recv_sai_thrift_set_samplepacket_attribute()

    def send_sai_thrift_set_samplepacket_attribute(self, samplepacket_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_samplepacket_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_samplepacket_attribute_args()
        args.samplepacket_oid = samplepacket_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_samplepacket_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_samplepacket_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_samplepacket_attribute(self, samplepacket_oid, attr_list):
        """
        Parameters:
         - samplepacket_oid
         - attr_list

        """
        self.send_sai_thrift_get_samplepacket_attribute(samplepacket_oid, attr_list)
        return self.recv_sai_thrift_get_samplepacket_attribute()

    def send_sai_thrift_get_samplepacket_attribute(self, samplepacket_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_samplepacket_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_samplepacket_attribute_args()
        args.samplepacket_oid = samplepacket_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_samplepacket_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_samplepacket_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_samplepacket_attribute failed: unknown result")

    def sai_thrift_create_scheduler(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_scheduler(attr_list)
        return self.recv_sai_thrift_create_scheduler()

    def send_sai_thrift_create_scheduler(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_scheduler', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_scheduler_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_scheduler(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_scheduler_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_scheduler failed: unknown result")

    def sai_thrift_remove_scheduler(self, scheduler_oid):
        """
        Parameters:
         - scheduler_oid

        """
        self.send_sai_thrift_remove_scheduler(scheduler_oid)
        self.recv_sai_thrift_remove_scheduler()

    def send_sai_thrift_remove_scheduler(self, scheduler_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_scheduler', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_scheduler_args()
        args.scheduler_oid = scheduler_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_scheduler(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_scheduler_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_scheduler_attribute(self, scheduler_oid, attr):
        """
        Parameters:
         - scheduler_oid
         - attr

        """
        self.send_sai_thrift_set_scheduler_attribute(scheduler_oid, attr)
        self.recv_sai_thrift_set_scheduler_attribute()

    def send_sai_thrift_set_scheduler_attribute(self, scheduler_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_scheduler_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_scheduler_attribute_args()
        args.scheduler_oid = scheduler_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_scheduler_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_scheduler_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_scheduler_attribute(self, scheduler_oid, attr_list):
        """
        Parameters:
         - scheduler_oid
         - attr_list

        """
        self.send_sai_thrift_get_scheduler_attribute(scheduler_oid, attr_list)
        return self.recv_sai_thrift_get_scheduler_attribute()

    def send_sai_thrift_get_scheduler_attribute(self, scheduler_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_scheduler_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_scheduler_attribute_args()
        args.scheduler_oid = scheduler_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_scheduler_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_scheduler_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_scheduler_attribute failed: unknown result")

    def sai_thrift_create_scheduler_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_scheduler_group(attr_list)
        return self.recv_sai_thrift_create_scheduler_group()

    def send_sai_thrift_create_scheduler_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_scheduler_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_scheduler_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_scheduler_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_scheduler_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_scheduler_group failed: unknown result")

    def sai_thrift_remove_scheduler_group(self, scheduler_group_oid):
        """
        Parameters:
         - scheduler_group_oid

        """
        self.send_sai_thrift_remove_scheduler_group(scheduler_group_oid)
        self.recv_sai_thrift_remove_scheduler_group()

    def send_sai_thrift_remove_scheduler_group(self, scheduler_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_scheduler_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_scheduler_group_args()
        args.scheduler_group_oid = scheduler_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_scheduler_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_scheduler_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_scheduler_group_attribute(self, scheduler_group_oid, attr):
        """
        Parameters:
         - scheduler_group_oid
         - attr

        """
        self.send_sai_thrift_set_scheduler_group_attribute(scheduler_group_oid, attr)
        self.recv_sai_thrift_set_scheduler_group_attribute()

    def send_sai_thrift_set_scheduler_group_attribute(self, scheduler_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_scheduler_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_scheduler_group_attribute_args()
        args.scheduler_group_oid = scheduler_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_scheduler_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_scheduler_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_scheduler_group_attribute(self, scheduler_group_oid, attr_list):
        """
        Parameters:
         - scheduler_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_scheduler_group_attribute(scheduler_group_oid, attr_list)
        return self.recv_sai_thrift_get_scheduler_group_attribute()

    def send_sai_thrift_get_scheduler_group_attribute(self, scheduler_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_scheduler_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_scheduler_group_attribute_args()
        args.scheduler_group_oid = scheduler_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_scheduler_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_scheduler_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_scheduler_group_attribute failed: unknown result")

    def sai_thrift_create_srv6_sidlist(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_srv6_sidlist(attr_list)
        return self.recv_sai_thrift_create_srv6_sidlist()

    def send_sai_thrift_create_srv6_sidlist(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_srv6_sidlist', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_srv6_sidlist_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_srv6_sidlist(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_srv6_sidlist_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_srv6_sidlist failed: unknown result")

    def sai_thrift_remove_srv6_sidlist(self, srv6_sidlist_oid):
        """
        Parameters:
         - srv6_sidlist_oid

        """
        self.send_sai_thrift_remove_srv6_sidlist(srv6_sidlist_oid)
        self.recv_sai_thrift_remove_srv6_sidlist()

    def send_sai_thrift_remove_srv6_sidlist(self, srv6_sidlist_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_srv6_sidlist', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_srv6_sidlist_args()
        args.srv6_sidlist_oid = srv6_sidlist_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_srv6_sidlist(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_srv6_sidlist_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_srv6_sidlist_attribute(self, srv6_sidlist_oid, attr):
        """
        Parameters:
         - srv6_sidlist_oid
         - attr

        """
        self.send_sai_thrift_set_srv6_sidlist_attribute(srv6_sidlist_oid, attr)
        self.recv_sai_thrift_set_srv6_sidlist_attribute()

    def send_sai_thrift_set_srv6_sidlist_attribute(self, srv6_sidlist_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_srv6_sidlist_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_srv6_sidlist_attribute_args()
        args.srv6_sidlist_oid = srv6_sidlist_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_srv6_sidlist_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_srv6_sidlist_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_srv6_sidlist_attribute(self, srv6_sidlist_oid, attr_list):
        """
        Parameters:
         - srv6_sidlist_oid
         - attr_list

        """
        self.send_sai_thrift_get_srv6_sidlist_attribute(srv6_sidlist_oid, attr_list)
        return self.recv_sai_thrift_get_srv6_sidlist_attribute()

    def send_sai_thrift_get_srv6_sidlist_attribute(self, srv6_sidlist_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_srv6_sidlist_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_srv6_sidlist_attribute_args()
        args.srv6_sidlist_oid = srv6_sidlist_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_srv6_sidlist_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_srv6_sidlist_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_srv6_sidlist_attribute failed: unknown result")

    def sai_thrift_create_my_sid_entry(self, my_sid_entry, attr_list):
        """
        Parameters:
         - my_sid_entry
         - attr_list

        """
        self.send_sai_thrift_create_my_sid_entry(my_sid_entry, attr_list)
        self.recv_sai_thrift_create_my_sid_entry()

    def send_sai_thrift_create_my_sid_entry(self, my_sid_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_my_sid_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_my_sid_entry_args()
        args.my_sid_entry = my_sid_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_my_sid_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_my_sid_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_remove_my_sid_entry(self, my_sid_entry):
        """
        Parameters:
         - my_sid_entry

        """
        self.send_sai_thrift_remove_my_sid_entry(my_sid_entry)
        self.recv_sai_thrift_remove_my_sid_entry()

    def send_sai_thrift_remove_my_sid_entry(self, my_sid_entry):
        self._oprot.writeMessageBegin('sai_thrift_remove_my_sid_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_my_sid_entry_args()
        args.my_sid_entry = my_sid_entry
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_my_sid_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_my_sid_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_my_sid_entry_attribute(self, my_sid_entry, attr):
        """
        Parameters:
         - my_sid_entry
         - attr

        """
        self.send_sai_thrift_set_my_sid_entry_attribute(my_sid_entry, attr)
        self.recv_sai_thrift_set_my_sid_entry_attribute()

    def send_sai_thrift_set_my_sid_entry_attribute(self, my_sid_entry, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_my_sid_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_my_sid_entry_attribute_args()
        args.my_sid_entry = my_sid_entry
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_my_sid_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_my_sid_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_my_sid_entry_attribute(self, my_sid_entry, attr_list):
        """
        Parameters:
         - my_sid_entry
         - attr_list

        """
        self.send_sai_thrift_get_my_sid_entry_attribute(my_sid_entry, attr_list)
        return self.recv_sai_thrift_get_my_sid_entry_attribute()

    def send_sai_thrift_get_my_sid_entry_attribute(self, my_sid_entry, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_my_sid_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_my_sid_entry_attribute_args()
        args.my_sid_entry = my_sid_entry
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_my_sid_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_my_sid_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_my_sid_entry_attribute failed: unknown result")

    def sai_thrift_bulk_create_my_sid_entry(self, my_sid_entry, attr_count, attr_list, mode):
        """
        Parameters:
         - my_sid_entry
         - attr_count
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_create_my_sid_entry(my_sid_entry, attr_count, attr_list, mode)
        return self.recv_sai_thrift_bulk_create_my_sid_entry()

    def send_sai_thrift_bulk_create_my_sid_entry(self, my_sid_entry, attr_count, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_create_my_sid_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_create_my_sid_entry_args()
        args.my_sid_entry = my_sid_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_create_my_sid_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_create_my_sid_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_create_my_sid_entry failed: unknown result")

    def sai_thrift_bulk_remove_my_sid_entry(self, my_sid_entry, mode):
        """
        Parameters:
         - my_sid_entry
         - mode

        """
        self.send_sai_thrift_bulk_remove_my_sid_entry(my_sid_entry, mode)
        return self.recv_sai_thrift_bulk_remove_my_sid_entry()

    def send_sai_thrift_bulk_remove_my_sid_entry(self, my_sid_entry, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_remove_my_sid_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_remove_my_sid_entry_args()
        args.my_sid_entry = my_sid_entry
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_remove_my_sid_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_remove_my_sid_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_remove_my_sid_entry failed: unknown result")

    def sai_thrift_bulk_set_my_sid_entry_attribute(self, my_sid_entry, attr_list, mode):
        """
        Parameters:
         - my_sid_entry
         - attr_list
         - mode

        """
        self.send_sai_thrift_bulk_set_my_sid_entry_attribute(my_sid_entry, attr_list, mode)
        return self.recv_sai_thrift_bulk_set_my_sid_entry_attribute()

    def send_sai_thrift_bulk_set_my_sid_entry_attribute(self, my_sid_entry, attr_list, mode):
        self._oprot.writeMessageBegin('sai_thrift_bulk_set_my_sid_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_set_my_sid_entry_attribute_args()
        args.my_sid_entry = my_sid_entry
        args.attr_list = attr_list
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_set_my_sid_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_set_my_sid_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_set_my_sid_entry_attribute failed: unknown result")

    def sai_thrift_bulk_get_my_sid_entry_attribute(self, my_sid_entry, attr_count, attr_list, mode, object_statuses):
        """
        Parameters:
         - my_sid_entry
         - attr_count
         - attr_list
         - mode
         - object_statuses

        """
        self.send_sai_thrift_bulk_get_my_sid_entry_attribute(my_sid_entry, attr_count, attr_list, mode, object_statuses)
        return self.recv_sai_thrift_bulk_get_my_sid_entry_attribute()

    def send_sai_thrift_bulk_get_my_sid_entry_attribute(self, my_sid_entry, attr_count, attr_list, mode, object_statuses):
        self._oprot.writeMessageBegin('sai_thrift_bulk_get_my_sid_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_bulk_get_my_sid_entry_attribute_args()
        args.my_sid_entry = my_sid_entry
        args.attr_count = attr_count
        args.attr_list = attr_list
        args.mode = mode
        args.object_statuses = object_statuses
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_bulk_get_my_sid_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_bulk_get_my_sid_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_bulk_get_my_sid_entry_attribute failed: unknown result")

    def sai_thrift_create_stp(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_stp(attr_list)
        return self.recv_sai_thrift_create_stp()

    def send_sai_thrift_create_stp(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_stp', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_stp_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_stp(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_stp_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_stp failed: unknown result")

    def sai_thrift_remove_stp(self, stp_oid):
        """
        Parameters:
         - stp_oid

        """
        self.send_sai_thrift_remove_stp(stp_oid)
        self.recv_sai_thrift_remove_stp()

    def send_sai_thrift_remove_stp(self, stp_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_stp', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_stp_args()
        args.stp_oid = stp_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_stp(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_stp_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_stp_attribute(self, stp_oid, attr):
        """
        Parameters:
         - stp_oid
         - attr

        """
        self.send_sai_thrift_set_stp_attribute(stp_oid, attr)
        self.recv_sai_thrift_set_stp_attribute()

    def send_sai_thrift_set_stp_attribute(self, stp_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_stp_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_stp_attribute_args()
        args.stp_oid = stp_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_stp_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_stp_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_stp_attribute(self, stp_oid, attr_list):
        """
        Parameters:
         - stp_oid
         - attr_list

        """
        self.send_sai_thrift_get_stp_attribute(stp_oid, attr_list)
        return self.recv_sai_thrift_get_stp_attribute()

    def send_sai_thrift_get_stp_attribute(self, stp_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_stp_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_stp_attribute_args()
        args.stp_oid = stp_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_stp_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_stp_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_stp_attribute failed: unknown result")

    def sai_thrift_create_stp_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_stp_port(attr_list)
        return self.recv_sai_thrift_create_stp_port()

    def send_sai_thrift_create_stp_port(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_stp_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_stp_port_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_stp_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_stp_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_stp_port failed: unknown result")

    def sai_thrift_remove_stp_port(self, stp_port_oid):
        """
        Parameters:
         - stp_port_oid

        """
        self.send_sai_thrift_remove_stp_port(stp_port_oid)
        self.recv_sai_thrift_remove_stp_port()

    def send_sai_thrift_remove_stp_port(self, stp_port_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_stp_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_stp_port_args()
        args.stp_port_oid = stp_port_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_stp_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_stp_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_stp_port_attribute(self, stp_port_oid, attr):
        """
        Parameters:
         - stp_port_oid
         - attr

        """
        self.send_sai_thrift_set_stp_port_attribute(stp_port_oid, attr)
        self.recv_sai_thrift_set_stp_port_attribute()

    def send_sai_thrift_set_stp_port_attribute(self, stp_port_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_stp_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_stp_port_attribute_args()
        args.stp_port_oid = stp_port_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_stp_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_stp_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_stp_port_attribute(self, stp_port_oid, attr_list):
        """
        Parameters:
         - stp_port_oid
         - attr_list

        """
        self.send_sai_thrift_get_stp_port_attribute(stp_port_oid, attr_list)
        return self.recv_sai_thrift_get_stp_port_attribute()

    def send_sai_thrift_get_stp_port_attribute(self, stp_port_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_stp_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_stp_port_attribute_args()
        args.stp_port_oid = stp_port_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_stp_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_stp_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_stp_port_attribute failed: unknown result")

    def sai_thrift_switch_register_read(self, platform_context, device_addr, start_reg_addr):
        """
        Parameters:
         - platform_context
         - device_addr
         - start_reg_addr

        """
        self.send_sai_thrift_switch_register_read(platform_context, device_addr, start_reg_addr)
        return self.recv_sai_thrift_switch_register_read()

    def send_sai_thrift_switch_register_read(self, platform_context, device_addr, start_reg_addr):
        self._oprot.writeMessageBegin('sai_thrift_switch_register_read', TMessageType.CALL, self._seqid)
        args = sai_thrift_switch_register_read_args()
        args.platform_context = platform_context
        args.device_addr = device_addr
        args.start_reg_addr = start_reg_addr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_switch_register_read(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_switch_register_read_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_switch_register_read failed: unknown result")

    def sai_thrift_switch_register_write(self, platform_context, device_addr, start_reg_addr, reg_val):
        """
        Parameters:
         - platform_context
         - device_addr
         - start_reg_addr
         - reg_val

        """
        self.send_sai_thrift_switch_register_write(platform_context, device_addr, start_reg_addr, reg_val)
        self.recv_sai_thrift_switch_register_write()

    def send_sai_thrift_switch_register_write(self, platform_context, device_addr, start_reg_addr, reg_val):
        self._oprot.writeMessageBegin('sai_thrift_switch_register_write', TMessageType.CALL, self._seqid)
        args = sai_thrift_switch_register_write_args()
        args.platform_context = platform_context
        args.device_addr = device_addr
        args.start_reg_addr = start_reg_addr
        args.reg_val = reg_val
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_switch_register_write(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_switch_register_write_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_switch_mdio_read(self, device_addr, start_reg_addr):
        """
        Parameters:
         - device_addr
         - start_reg_addr

        """
        self.send_sai_thrift_switch_mdio_read(device_addr, start_reg_addr)
        return self.recv_sai_thrift_switch_mdio_read()

    def send_sai_thrift_switch_mdio_read(self, device_addr, start_reg_addr):
        self._oprot.writeMessageBegin('sai_thrift_switch_mdio_read', TMessageType.CALL, self._seqid)
        args = sai_thrift_switch_mdio_read_args()
        args.device_addr = device_addr
        args.start_reg_addr = start_reg_addr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_switch_mdio_read(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_switch_mdio_read_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_switch_mdio_read failed: unknown result")

    def sai_thrift_switch_mdio_write(self, device_addr, start_reg_addr, reg_val):
        """
        Parameters:
         - device_addr
         - start_reg_addr
         - reg_val

        """
        self.send_sai_thrift_switch_mdio_write(device_addr, start_reg_addr, reg_val)
        self.recv_sai_thrift_switch_mdio_write()

    def send_sai_thrift_switch_mdio_write(self, device_addr, start_reg_addr, reg_val):
        self._oprot.writeMessageBegin('sai_thrift_switch_mdio_write', TMessageType.CALL, self._seqid)
        args = sai_thrift_switch_mdio_write_args()
        args.device_addr = device_addr
        args.start_reg_addr = start_reg_addr
        args.reg_val = reg_val
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_switch_mdio_write(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_switch_mdio_write_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_switch_mdio_cl22_read(self, device_addr, start_reg_addr):
        """
        Parameters:
         - device_addr
         - start_reg_addr

        """
        self.send_sai_thrift_switch_mdio_cl22_read(device_addr, start_reg_addr)
        return self.recv_sai_thrift_switch_mdio_cl22_read()

    def send_sai_thrift_switch_mdio_cl22_read(self, device_addr, start_reg_addr):
        self._oprot.writeMessageBegin('sai_thrift_switch_mdio_cl22_read', TMessageType.CALL, self._seqid)
        args = sai_thrift_switch_mdio_cl22_read_args()
        args.device_addr = device_addr
        args.start_reg_addr = start_reg_addr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_switch_mdio_cl22_read(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_switch_mdio_cl22_read_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_switch_mdio_cl22_read failed: unknown result")

    def sai_thrift_switch_mdio_cl22_write(self, device_addr, start_reg_addr, reg_val):
        """
        Parameters:
         - device_addr
         - start_reg_addr
         - reg_val

        """
        self.send_sai_thrift_switch_mdio_cl22_write(device_addr, start_reg_addr, reg_val)
        self.recv_sai_thrift_switch_mdio_cl22_write()

    def send_sai_thrift_switch_mdio_cl22_write(self, device_addr, start_reg_addr, reg_val):
        self._oprot.writeMessageBegin('sai_thrift_switch_mdio_cl22_write', TMessageType.CALL, self._seqid)
        args = sai_thrift_switch_mdio_cl22_write_args()
        args.device_addr = device_addr
        args.start_reg_addr = start_reg_addr
        args.reg_val = reg_val
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_switch_mdio_cl22_write(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_switch_mdio_cl22_write_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_switch(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_switch(attr_list)
        return self.recv_sai_thrift_create_switch()

    def send_sai_thrift_create_switch(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_switch', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_switch_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_switch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_switch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_switch failed: unknown result")

    def sai_thrift_remove_switch(self):
        self.send_sai_thrift_remove_switch()
        self.recv_sai_thrift_remove_switch()

    def send_sai_thrift_remove_switch(self):
        self._oprot.writeMessageBegin('sai_thrift_remove_switch', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_switch_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_switch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_switch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_switch_attribute(self, attr):
        """
        Parameters:
         - attr

        """
        self.send_sai_thrift_set_switch_attribute(attr)
        self.recv_sai_thrift_set_switch_attribute()

    def send_sai_thrift_set_switch_attribute(self, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_switch_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_switch_attribute_args()
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_switch_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_switch_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_switch_attribute(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_get_switch_attribute(attr_list)
        return self.recv_sai_thrift_get_switch_attribute()

    def send_sai_thrift_get_switch_attribute(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_switch_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_switch_attribute_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_switch_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_switch_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_switch_attribute failed: unknown result")

    def sai_thrift_get_switch_stats(self, counter_ids):
        """
        Parameters:
         - counter_ids

        """
        self.send_sai_thrift_get_switch_stats(counter_ids)
        return self.recv_sai_thrift_get_switch_stats()

    def send_sai_thrift_get_switch_stats(self, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_switch_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_switch_stats_args()
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_switch_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_switch_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_switch_stats failed: unknown result")

    def sai_thrift_get_switch_stats_ext(self, counter_ids, mode):
        """
        Parameters:
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_switch_stats_ext(counter_ids, mode)
        return self.recv_sai_thrift_get_switch_stats_ext()

    def send_sai_thrift_get_switch_stats_ext(self, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_switch_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_switch_stats_ext_args()
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_switch_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_switch_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_switch_stats_ext failed: unknown result")

    def sai_thrift_clear_switch_stats(self, counter_ids):
        """
        Parameters:
         - counter_ids

        """
        self.send_sai_thrift_clear_switch_stats(counter_ids)
        self.recv_sai_thrift_clear_switch_stats()

    def send_sai_thrift_clear_switch_stats(self, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_switch_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_switch_stats_args()
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_switch_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_switch_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_switch_tunnel(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_switch_tunnel(attr_list)
        return self.recv_sai_thrift_create_switch_tunnel()

    def send_sai_thrift_create_switch_tunnel(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_switch_tunnel', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_switch_tunnel_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_switch_tunnel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_switch_tunnel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_switch_tunnel failed: unknown result")

    def sai_thrift_remove_switch_tunnel(self, switch_tunnel_oid):
        """
        Parameters:
         - switch_tunnel_oid

        """
        self.send_sai_thrift_remove_switch_tunnel(switch_tunnel_oid)
        self.recv_sai_thrift_remove_switch_tunnel()

    def send_sai_thrift_remove_switch_tunnel(self, switch_tunnel_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_switch_tunnel', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_switch_tunnel_args()
        args.switch_tunnel_oid = switch_tunnel_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_switch_tunnel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_switch_tunnel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_switch_tunnel_attribute(self, switch_tunnel_oid, attr):
        """
        Parameters:
         - switch_tunnel_oid
         - attr

        """
        self.send_sai_thrift_set_switch_tunnel_attribute(switch_tunnel_oid, attr)
        self.recv_sai_thrift_set_switch_tunnel_attribute()

    def send_sai_thrift_set_switch_tunnel_attribute(self, switch_tunnel_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_switch_tunnel_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_switch_tunnel_attribute_args()
        args.switch_tunnel_oid = switch_tunnel_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_switch_tunnel_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_switch_tunnel_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_switch_tunnel_attribute(self, switch_tunnel_oid, attr_list):
        """
        Parameters:
         - switch_tunnel_oid
         - attr_list

        """
        self.send_sai_thrift_get_switch_tunnel_attribute(switch_tunnel_oid, attr_list)
        return self.recv_sai_thrift_get_switch_tunnel_attribute()

    def send_sai_thrift_get_switch_tunnel_attribute(self, switch_tunnel_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_switch_tunnel_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_switch_tunnel_attribute_args()
        args.switch_tunnel_oid = switch_tunnel_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_switch_tunnel_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_switch_tunnel_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_switch_tunnel_attribute failed: unknown result")

    def sai_thrift_create_system_port(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_system_port(attr_list)
        return self.recv_sai_thrift_create_system_port()

    def send_sai_thrift_create_system_port(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_system_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_system_port_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_system_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_system_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_system_port failed: unknown result")

    def sai_thrift_remove_system_port(self, system_port_oid):
        """
        Parameters:
         - system_port_oid

        """
        self.send_sai_thrift_remove_system_port(system_port_oid)
        self.recv_sai_thrift_remove_system_port()

    def send_sai_thrift_remove_system_port(self, system_port_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_system_port', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_system_port_args()
        args.system_port_oid = system_port_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_system_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_system_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_system_port_attribute(self, system_port_oid, attr):
        """
        Parameters:
         - system_port_oid
         - attr

        """
        self.send_sai_thrift_set_system_port_attribute(system_port_oid, attr)
        self.recv_sai_thrift_set_system_port_attribute()

    def send_sai_thrift_set_system_port_attribute(self, system_port_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_system_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_system_port_attribute_args()
        args.system_port_oid = system_port_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_system_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_system_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_system_port_attribute(self, system_port_oid, attr_list):
        """
        Parameters:
         - system_port_oid
         - attr_list

        """
        self.send_sai_thrift_get_system_port_attribute(system_port_oid, attr_list)
        return self.recv_sai_thrift_get_system_port_attribute()

    def send_sai_thrift_get_system_port_attribute(self, system_port_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_system_port_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_system_port_attribute_args()
        args.system_port_oid = system_port_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_system_port_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_system_port_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_system_port_attribute failed: unknown result")

    def sai_thrift_create_tam(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam(attr_list)
        return self.recv_sai_thrift_create_tam()

    def send_sai_thrift_create_tam(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam failed: unknown result")

    def sai_thrift_remove_tam(self, tam_oid):
        """
        Parameters:
         - tam_oid

        """
        self.send_sai_thrift_remove_tam(tam_oid)
        self.recv_sai_thrift_remove_tam()

    def send_sai_thrift_remove_tam(self, tam_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_args()
        args.tam_oid = tam_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_tam_attribute(self, tam_oid, attr):
        """
        Parameters:
         - tam_oid
         - attr

        """
        self.send_sai_thrift_set_tam_attribute(tam_oid, attr)
        self.recv_sai_thrift_set_tam_attribute()

    def send_sai_thrift_set_tam_attribute(self, tam_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_attribute_args()
        args.tam_oid = tam_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_attribute(self, tam_oid, attr_list):
        """
        Parameters:
         - tam_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_attribute(tam_oid, attr_list)
        return self.recv_sai_thrift_get_tam_attribute()

    def send_sai_thrift_get_tam_attribute(self, tam_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_attribute_args()
        args.tam_oid = tam_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_attribute failed: unknown result")

    def sai_thrift_create_tam_math_func(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_math_func(attr_list)
        return self.recv_sai_thrift_create_tam_math_func()

    def send_sai_thrift_create_tam_math_func(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_math_func', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_math_func_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_math_func(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_math_func_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_math_func failed: unknown result")

    def sai_thrift_remove_tam_math_func(self, tam_math_func_oid):
        """
        Parameters:
         - tam_math_func_oid

        """
        self.send_sai_thrift_remove_tam_math_func(tam_math_func_oid)
        self.recv_sai_thrift_remove_tam_math_func()

    def send_sai_thrift_remove_tam_math_func(self, tam_math_func_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_math_func', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_math_func_args()
        args.tam_math_func_oid = tam_math_func_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_math_func(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_math_func_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_math_func_attribute(self, tam_math_func_oid, attr_list):
        """
        Parameters:
         - tam_math_func_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_math_func_attribute(tam_math_func_oid, attr_list)
        return self.recv_sai_thrift_get_tam_math_func_attribute()

    def send_sai_thrift_get_tam_math_func_attribute(self, tam_math_func_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_math_func_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_math_func_attribute_args()
        args.tam_math_func_oid = tam_math_func_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_math_func_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_math_func_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_math_func_attribute failed: unknown result")

    def sai_thrift_set_tam_math_func_attribute(self, tam_math_func_oid, attr):
        """
        Parameters:
         - tam_math_func_oid
         - attr

        """
        self.send_sai_thrift_set_tam_math_func_attribute(tam_math_func_oid, attr)
        self.recv_sai_thrift_set_tam_math_func_attribute()

    def send_sai_thrift_set_tam_math_func_attribute(self, tam_math_func_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_math_func_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_math_func_attribute_args()
        args.tam_math_func_oid = tam_math_func_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_math_func_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_math_func_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tam_event_threshold(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_event_threshold(attr_list)
        return self.recv_sai_thrift_create_tam_event_threshold()

    def send_sai_thrift_create_tam_event_threshold(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_event_threshold', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_event_threshold_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_event_threshold(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_event_threshold_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_event_threshold failed: unknown result")

    def sai_thrift_remove_tam_event_threshold(self, tam_event_threshold_oid):
        """
        Parameters:
         - tam_event_threshold_oid

        """
        self.send_sai_thrift_remove_tam_event_threshold(tam_event_threshold_oid)
        self.recv_sai_thrift_remove_tam_event_threshold()

    def send_sai_thrift_remove_tam_event_threshold(self, tam_event_threshold_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_event_threshold', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_event_threshold_args()
        args.tam_event_threshold_oid = tam_event_threshold_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_event_threshold(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_event_threshold_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_event_threshold_attribute(self, tam_event_threshold_oid, attr_list):
        """
        Parameters:
         - tam_event_threshold_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_event_threshold_attribute(tam_event_threshold_oid, attr_list)
        return self.recv_sai_thrift_get_tam_event_threshold_attribute()

    def send_sai_thrift_get_tam_event_threshold_attribute(self, tam_event_threshold_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_event_threshold_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_event_threshold_attribute_args()
        args.tam_event_threshold_oid = tam_event_threshold_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_event_threshold_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_event_threshold_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_event_threshold_attribute failed: unknown result")

    def sai_thrift_set_tam_event_threshold_attribute(self, tam_event_threshold_oid, attr):
        """
        Parameters:
         - tam_event_threshold_oid
         - attr

        """
        self.send_sai_thrift_set_tam_event_threshold_attribute(tam_event_threshold_oid, attr)
        self.recv_sai_thrift_set_tam_event_threshold_attribute()

    def send_sai_thrift_set_tam_event_threshold_attribute(self, tam_event_threshold_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_event_threshold_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_event_threshold_attribute_args()
        args.tam_event_threshold_oid = tam_event_threshold_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_event_threshold_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_event_threshold_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tam_int(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_int(attr_list)
        return self.recv_sai_thrift_create_tam_int()

    def send_sai_thrift_create_tam_int(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_int', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_int_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_int(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_int_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_int failed: unknown result")

    def sai_thrift_remove_tam_int(self, tam_int_oid):
        """
        Parameters:
         - tam_int_oid

        """
        self.send_sai_thrift_remove_tam_int(tam_int_oid)
        self.recv_sai_thrift_remove_tam_int()

    def send_sai_thrift_remove_tam_int(self, tam_int_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_int', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_int_args()
        args.tam_int_oid = tam_int_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_int(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_int_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_int_attribute(self, tam_int_oid, attr_list):
        """
        Parameters:
         - tam_int_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_int_attribute(tam_int_oid, attr_list)
        return self.recv_sai_thrift_get_tam_int_attribute()

    def send_sai_thrift_get_tam_int_attribute(self, tam_int_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_int_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_int_attribute_args()
        args.tam_int_oid = tam_int_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_int_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_int_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_int_attribute failed: unknown result")

    def sai_thrift_set_tam_int_attribute(self, tam_int_oid, attr):
        """
        Parameters:
         - tam_int_oid
         - attr

        """
        self.send_sai_thrift_set_tam_int_attribute(tam_int_oid, attr)
        self.recv_sai_thrift_set_tam_int_attribute()

    def send_sai_thrift_set_tam_int_attribute(self, tam_int_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_int_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_int_attribute_args()
        args.tam_int_oid = tam_int_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_int_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_int_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tam_tel_type(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_tel_type(attr_list)
        return self.recv_sai_thrift_create_tam_tel_type()

    def send_sai_thrift_create_tam_tel_type(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_tel_type', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_tel_type_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_tel_type(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_tel_type_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_tel_type failed: unknown result")

    def sai_thrift_remove_tam_tel_type(self, tam_tel_type_oid):
        """
        Parameters:
         - tam_tel_type_oid

        """
        self.send_sai_thrift_remove_tam_tel_type(tam_tel_type_oid)
        self.recv_sai_thrift_remove_tam_tel_type()

    def send_sai_thrift_remove_tam_tel_type(self, tam_tel_type_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_tel_type', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_tel_type_args()
        args.tam_tel_type_oid = tam_tel_type_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_tel_type(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_tel_type_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_tel_type_attribute(self, tam_tel_type_oid, attr_list):
        """
        Parameters:
         - tam_tel_type_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_tel_type_attribute(tam_tel_type_oid, attr_list)
        return self.recv_sai_thrift_get_tam_tel_type_attribute()

    def send_sai_thrift_get_tam_tel_type_attribute(self, tam_tel_type_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_tel_type_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_tel_type_attribute_args()
        args.tam_tel_type_oid = tam_tel_type_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_tel_type_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_tel_type_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_tel_type_attribute failed: unknown result")

    def sai_thrift_set_tam_tel_type_attribute(self, tam_tel_type_oid, attr):
        """
        Parameters:
         - tam_tel_type_oid
         - attr

        """
        self.send_sai_thrift_set_tam_tel_type_attribute(tam_tel_type_oid, attr)
        self.recv_sai_thrift_set_tam_tel_type_attribute()

    def send_sai_thrift_set_tam_tel_type_attribute(self, tam_tel_type_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_tel_type_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_tel_type_attribute_args()
        args.tam_tel_type_oid = tam_tel_type_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_tel_type_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_tel_type_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tam_report(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_report(attr_list)
        return self.recv_sai_thrift_create_tam_report()

    def send_sai_thrift_create_tam_report(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_report', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_report_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_report(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_report_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_report failed: unknown result")

    def sai_thrift_remove_tam_report(self, tam_report_oid):
        """
        Parameters:
         - tam_report_oid

        """
        self.send_sai_thrift_remove_tam_report(tam_report_oid)
        self.recv_sai_thrift_remove_tam_report()

    def send_sai_thrift_remove_tam_report(self, tam_report_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_report', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_report_args()
        args.tam_report_oid = tam_report_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_report(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_report_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_report_attribute(self, tam_report_oid, attr_list):
        """
        Parameters:
         - tam_report_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_report_attribute(tam_report_oid, attr_list)
        return self.recv_sai_thrift_get_tam_report_attribute()

    def send_sai_thrift_get_tam_report_attribute(self, tam_report_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_report_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_report_attribute_args()
        args.tam_report_oid = tam_report_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_report_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_report_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_report_attribute failed: unknown result")

    def sai_thrift_set_tam_report_attribute(self, tam_report_oid, attr):
        """
        Parameters:
         - tam_report_oid
         - attr

        """
        self.send_sai_thrift_set_tam_report_attribute(tam_report_oid, attr)
        self.recv_sai_thrift_set_tam_report_attribute()

    def send_sai_thrift_set_tam_report_attribute(self, tam_report_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_report_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_report_attribute_args()
        args.tam_report_oid = tam_report_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_report_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_report_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tam_telemetry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_telemetry(attr_list)
        return self.recv_sai_thrift_create_tam_telemetry()

    def send_sai_thrift_create_tam_telemetry(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_telemetry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_telemetry_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_telemetry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_telemetry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_telemetry failed: unknown result")

    def sai_thrift_remove_tam_telemetry(self, tam_telemetry_oid):
        """
        Parameters:
         - tam_telemetry_oid

        """
        self.send_sai_thrift_remove_tam_telemetry(tam_telemetry_oid)
        self.recv_sai_thrift_remove_tam_telemetry()

    def send_sai_thrift_remove_tam_telemetry(self, tam_telemetry_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_telemetry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_telemetry_args()
        args.tam_telemetry_oid = tam_telemetry_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_telemetry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_telemetry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_telemetry_attribute(self, tam_telemetry_oid, attr_list):
        """
        Parameters:
         - tam_telemetry_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_telemetry_attribute(tam_telemetry_oid, attr_list)
        return self.recv_sai_thrift_get_tam_telemetry_attribute()

    def send_sai_thrift_get_tam_telemetry_attribute(self, tam_telemetry_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_telemetry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_telemetry_attribute_args()
        args.tam_telemetry_oid = tam_telemetry_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_telemetry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_telemetry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_telemetry_attribute failed: unknown result")

    def sai_thrift_set_tam_telemetry_attribute(self, tam_telemetry_oid, attr):
        """
        Parameters:
         - tam_telemetry_oid
         - attr

        """
        self.send_sai_thrift_set_tam_telemetry_attribute(tam_telemetry_oid, attr)
        self.recv_sai_thrift_set_tam_telemetry_attribute()

    def send_sai_thrift_set_tam_telemetry_attribute(self, tam_telemetry_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_telemetry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_telemetry_attribute_args()
        args.tam_telemetry_oid = tam_telemetry_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_telemetry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_telemetry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tam_transport(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_transport(attr_list)
        return self.recv_sai_thrift_create_tam_transport()

    def send_sai_thrift_create_tam_transport(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_transport', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_transport_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_transport(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_transport_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_transport failed: unknown result")

    def sai_thrift_remove_tam_transport(self, tam_transport_oid):
        """
        Parameters:
         - tam_transport_oid

        """
        self.send_sai_thrift_remove_tam_transport(tam_transport_oid)
        self.recv_sai_thrift_remove_tam_transport()

    def send_sai_thrift_remove_tam_transport(self, tam_transport_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_transport', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_transport_args()
        args.tam_transport_oid = tam_transport_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_transport(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_transport_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_transport_attribute(self, tam_transport_oid, attr_list):
        """
        Parameters:
         - tam_transport_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_transport_attribute(tam_transport_oid, attr_list)
        return self.recv_sai_thrift_get_tam_transport_attribute()

    def send_sai_thrift_get_tam_transport_attribute(self, tam_transport_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_transport_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_transport_attribute_args()
        args.tam_transport_oid = tam_transport_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_transport_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_transport_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_transport_attribute failed: unknown result")

    def sai_thrift_set_tam_transport_attribute(self, tam_transport_oid, attr):
        """
        Parameters:
         - tam_transport_oid
         - attr

        """
        self.send_sai_thrift_set_tam_transport_attribute(tam_transport_oid, attr)
        self.recv_sai_thrift_set_tam_transport_attribute()

    def send_sai_thrift_set_tam_transport_attribute(self, tam_transport_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_transport_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_transport_attribute_args()
        args.tam_transport_oid = tam_transport_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_transport_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_transport_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tam_collector(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_collector(attr_list)
        return self.recv_sai_thrift_create_tam_collector()

    def send_sai_thrift_create_tam_collector(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_collector', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_collector_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_collector(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_collector_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_collector failed: unknown result")

    def sai_thrift_remove_tam_collector(self, tam_collector_oid):
        """
        Parameters:
         - tam_collector_oid

        """
        self.send_sai_thrift_remove_tam_collector(tam_collector_oid)
        self.recv_sai_thrift_remove_tam_collector()

    def send_sai_thrift_remove_tam_collector(self, tam_collector_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_collector', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_collector_args()
        args.tam_collector_oid = tam_collector_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_collector(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_collector_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_collector_attribute(self, tam_collector_oid, attr_list):
        """
        Parameters:
         - tam_collector_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_collector_attribute(tam_collector_oid, attr_list)
        return self.recv_sai_thrift_get_tam_collector_attribute()

    def send_sai_thrift_get_tam_collector_attribute(self, tam_collector_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_collector_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_collector_attribute_args()
        args.tam_collector_oid = tam_collector_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_collector_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_collector_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_collector_attribute failed: unknown result")

    def sai_thrift_set_tam_collector_attribute(self, tam_collector_oid, attr):
        """
        Parameters:
         - tam_collector_oid
         - attr

        """
        self.send_sai_thrift_set_tam_collector_attribute(tam_collector_oid, attr)
        self.recv_sai_thrift_set_tam_collector_attribute()

    def send_sai_thrift_set_tam_collector_attribute(self, tam_collector_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_collector_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_collector_attribute_args()
        args.tam_collector_oid = tam_collector_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_collector_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_collector_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tam_event_action(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_event_action(attr_list)
        return self.recv_sai_thrift_create_tam_event_action()

    def send_sai_thrift_create_tam_event_action(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_event_action', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_event_action_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_event_action(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_event_action_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_event_action failed: unknown result")

    def sai_thrift_remove_tam_event_action(self, tam_event_action_oid):
        """
        Parameters:
         - tam_event_action_oid

        """
        self.send_sai_thrift_remove_tam_event_action(tam_event_action_oid)
        self.recv_sai_thrift_remove_tam_event_action()

    def send_sai_thrift_remove_tam_event_action(self, tam_event_action_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_event_action', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_event_action_args()
        args.tam_event_action_oid = tam_event_action_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_event_action(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_event_action_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_event_action_attribute(self, tam_event_action_oid, attr_list):
        """
        Parameters:
         - tam_event_action_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_event_action_attribute(tam_event_action_oid, attr_list)
        return self.recv_sai_thrift_get_tam_event_action_attribute()

    def send_sai_thrift_get_tam_event_action_attribute(self, tam_event_action_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_event_action_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_event_action_attribute_args()
        args.tam_event_action_oid = tam_event_action_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_event_action_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_event_action_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_event_action_attribute failed: unknown result")

    def sai_thrift_set_tam_event_action_attribute(self, tam_event_action_oid, attr):
        """
        Parameters:
         - tam_event_action_oid
         - attr

        """
        self.send_sai_thrift_set_tam_event_action_attribute(tam_event_action_oid, attr)
        self.recv_sai_thrift_set_tam_event_action_attribute()

    def send_sai_thrift_set_tam_event_action_attribute(self, tam_event_action_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_event_action_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_event_action_attribute_args()
        args.tam_event_action_oid = tam_event_action_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_event_action_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_event_action_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tam_event(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tam_event(attr_list)
        return self.recv_sai_thrift_create_tam_event()

    def send_sai_thrift_create_tam_event(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tam_event', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tam_event_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tam_event(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tam_event_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tam_event failed: unknown result")

    def sai_thrift_remove_tam_event(self, tam_event_oid):
        """
        Parameters:
         - tam_event_oid

        """
        self.send_sai_thrift_remove_tam_event(tam_event_oid)
        self.recv_sai_thrift_remove_tam_event()

    def send_sai_thrift_remove_tam_event(self, tam_event_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tam_event', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tam_event_args()
        args.tam_event_oid = tam_event_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tam_event(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tam_event_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tam_event_attribute(self, tam_event_oid, attr_list):
        """
        Parameters:
         - tam_event_oid
         - attr_list

        """
        self.send_sai_thrift_get_tam_event_attribute(tam_event_oid, attr_list)
        return self.recv_sai_thrift_get_tam_event_attribute()

    def send_sai_thrift_get_tam_event_attribute(self, tam_event_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tam_event_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tam_event_attribute_args()
        args.tam_event_oid = tam_event_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tam_event_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tam_event_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tam_event_attribute failed: unknown result")

    def sai_thrift_set_tam_event_attribute(self, tam_event_oid, attr):
        """
        Parameters:
         - tam_event_oid
         - attr

        """
        self.send_sai_thrift_set_tam_event_attribute(tam_event_oid, attr)
        self.recv_sai_thrift_set_tam_event_attribute()

    def send_sai_thrift_set_tam_event_attribute(self, tam_event_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tam_event_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tam_event_attribute_args()
        args.tam_event_oid = tam_event_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tam_event_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tam_event_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tunnel_map(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tunnel_map(attr_list)
        return self.recv_sai_thrift_create_tunnel_map()

    def send_sai_thrift_create_tunnel_map(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tunnel_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tunnel_map_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tunnel_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tunnel_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel_map failed: unknown result")

    def sai_thrift_remove_tunnel_map(self, tunnel_map_oid):
        """
        Parameters:
         - tunnel_map_oid

        """
        self.send_sai_thrift_remove_tunnel_map(tunnel_map_oid)
        self.recv_sai_thrift_remove_tunnel_map()

    def send_sai_thrift_remove_tunnel_map(self, tunnel_map_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tunnel_map', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tunnel_map_args()
        args.tunnel_map_oid = tunnel_map_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tunnel_map(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tunnel_map_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_tunnel_map_attribute(self, tunnel_map_oid, attr):
        """
        Parameters:
         - tunnel_map_oid
         - attr

        """
        self.send_sai_thrift_set_tunnel_map_attribute(tunnel_map_oid, attr)
        self.recv_sai_thrift_set_tunnel_map_attribute()

    def send_sai_thrift_set_tunnel_map_attribute(self, tunnel_map_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tunnel_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tunnel_map_attribute_args()
        args.tunnel_map_oid = tunnel_map_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tunnel_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tunnel_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tunnel_map_attribute(self, tunnel_map_oid, attr_list):
        """
        Parameters:
         - tunnel_map_oid
         - attr_list

        """
        self.send_sai_thrift_get_tunnel_map_attribute(tunnel_map_oid, attr_list)
        return self.recv_sai_thrift_get_tunnel_map_attribute()

    def send_sai_thrift_get_tunnel_map_attribute(self, tunnel_map_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_map_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_map_attribute_args()
        args.tunnel_map_oid = tunnel_map_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_map_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_map_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_map_attribute failed: unknown result")

    def sai_thrift_create_tunnel(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tunnel(attr_list)
        return self.recv_sai_thrift_create_tunnel()

    def send_sai_thrift_create_tunnel(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tunnel', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tunnel_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tunnel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tunnel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel failed: unknown result")

    def sai_thrift_remove_tunnel(self, tunnel_oid):
        """
        Parameters:
         - tunnel_oid

        """
        self.send_sai_thrift_remove_tunnel(tunnel_oid)
        self.recv_sai_thrift_remove_tunnel()

    def send_sai_thrift_remove_tunnel(self, tunnel_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tunnel', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tunnel_args()
        args.tunnel_oid = tunnel_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tunnel(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tunnel_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_tunnel_attribute(self, tunnel_oid, attr):
        """
        Parameters:
         - tunnel_oid
         - attr

        """
        self.send_sai_thrift_set_tunnel_attribute(tunnel_oid, attr)
        self.recv_sai_thrift_set_tunnel_attribute()

    def send_sai_thrift_set_tunnel_attribute(self, tunnel_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tunnel_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tunnel_attribute_args()
        args.tunnel_oid = tunnel_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tunnel_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tunnel_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tunnel_attribute(self, tunnel_oid, attr_list):
        """
        Parameters:
         - tunnel_oid
         - attr_list

        """
        self.send_sai_thrift_get_tunnel_attribute(tunnel_oid, attr_list)
        return self.recv_sai_thrift_get_tunnel_attribute()

    def send_sai_thrift_get_tunnel_attribute(self, tunnel_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_attribute_args()
        args.tunnel_oid = tunnel_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_attribute failed: unknown result")

    def sai_thrift_get_tunnel_stats(self, tunnel_oid, counter_ids):
        """
        Parameters:
         - tunnel_oid
         - counter_ids

        """
        self.send_sai_thrift_get_tunnel_stats(tunnel_oid, counter_ids)
        return self.recv_sai_thrift_get_tunnel_stats()

    def send_sai_thrift_get_tunnel_stats(self, tunnel_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_stats_args()
        args.tunnel_oid = tunnel_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_stats failed: unknown result")

    def sai_thrift_get_tunnel_stats_ext(self, tunnel_oid, counter_ids, mode):
        """
        Parameters:
         - tunnel_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_tunnel_stats_ext(tunnel_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_tunnel_stats_ext()

    def send_sai_thrift_get_tunnel_stats_ext(self, tunnel_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_stats_ext_args()
        args.tunnel_oid = tunnel_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_stats_ext failed: unknown result")

    def sai_thrift_clear_tunnel_stats(self, tunnel_oid, counter_ids):
        """
        Parameters:
         - tunnel_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_tunnel_stats(tunnel_oid, counter_ids)
        self.recv_sai_thrift_clear_tunnel_stats()

    def send_sai_thrift_clear_tunnel_stats(self, tunnel_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_tunnel_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_tunnel_stats_args()
        args.tunnel_oid = tunnel_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_tunnel_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_tunnel_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_tunnel_term_table_entry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tunnel_term_table_entry(attr_list)
        return self.recv_sai_thrift_create_tunnel_term_table_entry()

    def send_sai_thrift_create_tunnel_term_table_entry(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tunnel_term_table_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tunnel_term_table_entry_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tunnel_term_table_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tunnel_term_table_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel_term_table_entry failed: unknown result")

    def sai_thrift_remove_tunnel_term_table_entry(self, tunnel_term_table_entry_oid):
        """
        Parameters:
         - tunnel_term_table_entry_oid

        """
        self.send_sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_oid)
        self.recv_sai_thrift_remove_tunnel_term_table_entry()

    def send_sai_thrift_remove_tunnel_term_table_entry(self, tunnel_term_table_entry_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tunnel_term_table_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tunnel_term_table_entry_args()
        args.tunnel_term_table_entry_oid = tunnel_term_table_entry_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tunnel_term_table_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tunnel_term_table_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_oid, attr):
        """
        Parameters:
         - tunnel_term_table_entry_oid
         - attr

        """
        self.send_sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_oid, attr)
        self.recv_sai_thrift_set_tunnel_term_table_entry_attribute()

    def send_sai_thrift_set_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tunnel_term_table_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tunnel_term_table_entry_attribute_args()
        args.tunnel_term_table_entry_oid = tunnel_term_table_entry_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tunnel_term_table_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tunnel_term_table_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_oid, attr_list):
        """
        Parameters:
         - tunnel_term_table_entry_oid
         - attr_list

        """
        self.send_sai_thrift_get_tunnel_term_table_entry_attribute(tunnel_term_table_entry_oid, attr_list)
        return self.recv_sai_thrift_get_tunnel_term_table_entry_attribute()

    def send_sai_thrift_get_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_term_table_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_term_table_entry_attribute_args()
        args.tunnel_term_table_entry_oid = tunnel_term_table_entry_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_term_table_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_term_table_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_term_table_entry_attribute failed: unknown result")

    def sai_thrift_create_tunnel_map_entry(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_tunnel_map_entry(attr_list)
        return self.recv_sai_thrift_create_tunnel_map_entry()

    def send_sai_thrift_create_tunnel_map_entry(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_tunnel_map_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_tunnel_map_entry_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_tunnel_map_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_tunnel_map_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel_map_entry failed: unknown result")

    def sai_thrift_remove_tunnel_map_entry(self, tunnel_map_entry_oid):
        """
        Parameters:
         - tunnel_map_entry_oid

        """
        self.send_sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_oid)
        self.recv_sai_thrift_remove_tunnel_map_entry()

    def send_sai_thrift_remove_tunnel_map_entry(self, tunnel_map_entry_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_tunnel_map_entry', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_tunnel_map_entry_args()
        args.tunnel_map_entry_oid = tunnel_map_entry_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_tunnel_map_entry(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_tunnel_map_entry_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_tunnel_map_entry_attribute(self, tunnel_map_entry_oid, attr):
        """
        Parameters:
         - tunnel_map_entry_oid
         - attr

        """
        self.send_sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_oid, attr)
        self.recv_sai_thrift_set_tunnel_map_entry_attribute()

    def send_sai_thrift_set_tunnel_map_entry_attribute(self, tunnel_map_entry_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_tunnel_map_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_tunnel_map_entry_attribute_args()
        args.tunnel_map_entry_oid = tunnel_map_entry_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_tunnel_map_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_tunnel_map_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_tunnel_map_entry_attribute(self, tunnel_map_entry_oid, attr_list):
        """
        Parameters:
         - tunnel_map_entry_oid
         - attr_list

        """
        self.send_sai_thrift_get_tunnel_map_entry_attribute(tunnel_map_entry_oid, attr_list)
        return self.recv_sai_thrift_get_tunnel_map_entry_attribute()

    def send_sai_thrift_get_tunnel_map_entry_attribute(self, tunnel_map_entry_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_tunnel_map_entry_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_tunnel_map_entry_attribute_args()
        args.tunnel_map_entry_oid = tunnel_map_entry_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_tunnel_map_entry_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_tunnel_map_entry_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_map_entry_attribute failed: unknown result")

    def sai_thrift_create_udf(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_udf(attr_list)
        return self.recv_sai_thrift_create_udf()

    def send_sai_thrift_create_udf(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_udf', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_udf_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_udf(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_udf_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_udf failed: unknown result")

    def sai_thrift_remove_udf(self, udf_oid):
        """
        Parameters:
         - udf_oid

        """
        self.send_sai_thrift_remove_udf(udf_oid)
        self.recv_sai_thrift_remove_udf()

    def send_sai_thrift_remove_udf(self, udf_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_udf', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_udf_args()
        args.udf_oid = udf_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_udf(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_udf_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_udf_attribute(self, udf_oid, attr):
        """
        Parameters:
         - udf_oid
         - attr

        """
        self.send_sai_thrift_set_udf_attribute(udf_oid, attr)
        self.recv_sai_thrift_set_udf_attribute()

    def send_sai_thrift_set_udf_attribute(self, udf_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_udf_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_udf_attribute_args()
        args.udf_oid = udf_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_udf_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_udf_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_udf_attribute(self, udf_oid, attr_list):
        """
        Parameters:
         - udf_oid
         - attr_list

        """
        self.send_sai_thrift_get_udf_attribute(udf_oid, attr_list)
        return self.recv_sai_thrift_get_udf_attribute()

    def send_sai_thrift_get_udf_attribute(self, udf_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_udf_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_udf_attribute_args()
        args.udf_oid = udf_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_udf_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_udf_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_udf_attribute failed: unknown result")

    def sai_thrift_create_udf_match(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_udf_match(attr_list)
        return self.recv_sai_thrift_create_udf_match()

    def send_sai_thrift_create_udf_match(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_udf_match', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_udf_match_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_udf_match(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_udf_match_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_udf_match failed: unknown result")

    def sai_thrift_remove_udf_match(self, udf_match_oid):
        """
        Parameters:
         - udf_match_oid

        """
        self.send_sai_thrift_remove_udf_match(udf_match_oid)
        self.recv_sai_thrift_remove_udf_match()

    def send_sai_thrift_remove_udf_match(self, udf_match_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_udf_match', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_udf_match_args()
        args.udf_match_oid = udf_match_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_udf_match(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_udf_match_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_udf_match_attribute(self, udf_match_oid, attr):
        """
        Parameters:
         - udf_match_oid
         - attr

        """
        self.send_sai_thrift_set_udf_match_attribute(udf_match_oid, attr)
        self.recv_sai_thrift_set_udf_match_attribute()

    def send_sai_thrift_set_udf_match_attribute(self, udf_match_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_udf_match_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_udf_match_attribute_args()
        args.udf_match_oid = udf_match_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_udf_match_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_udf_match_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_udf_match_attribute(self, udf_match_oid, attr_list):
        """
        Parameters:
         - udf_match_oid
         - attr_list

        """
        self.send_sai_thrift_get_udf_match_attribute(udf_match_oid, attr_list)
        return self.recv_sai_thrift_get_udf_match_attribute()

    def send_sai_thrift_get_udf_match_attribute(self, udf_match_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_udf_match_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_udf_match_attribute_args()
        args.udf_match_oid = udf_match_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_udf_match_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_udf_match_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_udf_match_attribute failed: unknown result")

    def sai_thrift_create_udf_group(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_udf_group(attr_list)
        return self.recv_sai_thrift_create_udf_group()

    def send_sai_thrift_create_udf_group(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_udf_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_udf_group_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_udf_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_udf_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_udf_group failed: unknown result")

    def sai_thrift_remove_udf_group(self, udf_group_oid):
        """
        Parameters:
         - udf_group_oid

        """
        self.send_sai_thrift_remove_udf_group(udf_group_oid)
        self.recv_sai_thrift_remove_udf_group()

    def send_sai_thrift_remove_udf_group(self, udf_group_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_udf_group', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_udf_group_args()
        args.udf_group_oid = udf_group_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_udf_group(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_udf_group_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_udf_group_attribute(self, udf_group_oid, attr):
        """
        Parameters:
         - udf_group_oid
         - attr

        """
        self.send_sai_thrift_set_udf_group_attribute(udf_group_oid, attr)
        self.recv_sai_thrift_set_udf_group_attribute()

    def send_sai_thrift_set_udf_group_attribute(self, udf_group_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_udf_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_udf_group_attribute_args()
        args.udf_group_oid = udf_group_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_udf_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_udf_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_udf_group_attribute(self, udf_group_oid, attr_list):
        """
        Parameters:
         - udf_group_oid
         - attr_list

        """
        self.send_sai_thrift_get_udf_group_attribute(udf_group_oid, attr_list)
        return self.recv_sai_thrift_get_udf_group_attribute()

    def send_sai_thrift_get_udf_group_attribute(self, udf_group_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_udf_group_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_udf_group_attribute_args()
        args.udf_group_oid = udf_group_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_udf_group_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_udf_group_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_udf_group_attribute failed: unknown result")

    def sai_thrift_create_virtual_router(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_virtual_router(attr_list)
        return self.recv_sai_thrift_create_virtual_router()

    def send_sai_thrift_create_virtual_router(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_virtual_router', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_virtual_router_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_virtual_router(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_virtual_router_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_virtual_router failed: unknown result")

    def sai_thrift_remove_virtual_router(self, virtual_router_oid):
        """
        Parameters:
         - virtual_router_oid

        """
        self.send_sai_thrift_remove_virtual_router(virtual_router_oid)
        self.recv_sai_thrift_remove_virtual_router()

    def send_sai_thrift_remove_virtual_router(self, virtual_router_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_virtual_router', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_virtual_router_args()
        args.virtual_router_oid = virtual_router_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_virtual_router(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_virtual_router_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_virtual_router_attribute(self, virtual_router_oid, attr):
        """
        Parameters:
         - virtual_router_oid
         - attr

        """
        self.send_sai_thrift_set_virtual_router_attribute(virtual_router_oid, attr)
        self.recv_sai_thrift_set_virtual_router_attribute()

    def send_sai_thrift_set_virtual_router_attribute(self, virtual_router_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_virtual_router_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_virtual_router_attribute_args()
        args.virtual_router_oid = virtual_router_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_virtual_router_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_virtual_router_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_virtual_router_attribute(self, virtual_router_oid, attr_list):
        """
        Parameters:
         - virtual_router_oid
         - attr_list

        """
        self.send_sai_thrift_get_virtual_router_attribute(virtual_router_oid, attr_list)
        return self.recv_sai_thrift_get_virtual_router_attribute()

    def send_sai_thrift_get_virtual_router_attribute(self, virtual_router_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_virtual_router_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_virtual_router_attribute_args()
        args.virtual_router_oid = virtual_router_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_virtual_router_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_virtual_router_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_virtual_router_attribute failed: unknown result")

    def sai_thrift_create_vlan(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_vlan(attr_list)
        return self.recv_sai_thrift_create_vlan()

    def send_sai_thrift_create_vlan(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_vlan', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_vlan_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_vlan(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_vlan_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_vlan failed: unknown result")

    def sai_thrift_remove_vlan(self, vlan_oid):
        """
        Parameters:
         - vlan_oid

        """
        self.send_sai_thrift_remove_vlan(vlan_oid)
        self.recv_sai_thrift_remove_vlan()

    def send_sai_thrift_remove_vlan(self, vlan_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_vlan', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_vlan_args()
        args.vlan_oid = vlan_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_vlan(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_vlan_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_vlan_attribute(self, vlan_oid, attr):
        """
        Parameters:
         - vlan_oid
         - attr

        """
        self.send_sai_thrift_set_vlan_attribute(vlan_oid, attr)
        self.recv_sai_thrift_set_vlan_attribute()

    def send_sai_thrift_set_vlan_attribute(self, vlan_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_vlan_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_vlan_attribute_args()
        args.vlan_oid = vlan_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_vlan_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_vlan_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_vlan_attribute(self, vlan_oid, attr_list):
        """
        Parameters:
         - vlan_oid
         - attr_list

        """
        self.send_sai_thrift_get_vlan_attribute(vlan_oid, attr_list)
        return self.recv_sai_thrift_get_vlan_attribute()

    def send_sai_thrift_get_vlan_attribute(self, vlan_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_vlan_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_vlan_attribute_args()
        args.vlan_oid = vlan_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_vlan_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_vlan_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_attribute failed: unknown result")

    def sai_thrift_create_vlan_member(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_vlan_member(attr_list)
        return self.recv_sai_thrift_create_vlan_member()

    def send_sai_thrift_create_vlan_member(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_vlan_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_vlan_member_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_vlan_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_vlan_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_vlan_member failed: unknown result")

    def sai_thrift_remove_vlan_member(self, vlan_member_oid):
        """
        Parameters:
         - vlan_member_oid

        """
        self.send_sai_thrift_remove_vlan_member(vlan_member_oid)
        self.recv_sai_thrift_remove_vlan_member()

    def send_sai_thrift_remove_vlan_member(self, vlan_member_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_vlan_member', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_vlan_member_args()
        args.vlan_member_oid = vlan_member_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_vlan_member(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_vlan_member_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_vlan_member_attribute(self, vlan_member_oid, attr):
        """
        Parameters:
         - vlan_member_oid
         - attr

        """
        self.send_sai_thrift_set_vlan_member_attribute(vlan_member_oid, attr)
        self.recv_sai_thrift_set_vlan_member_attribute()

    def send_sai_thrift_set_vlan_member_attribute(self, vlan_member_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_vlan_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_vlan_member_attribute_args()
        args.vlan_member_oid = vlan_member_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_vlan_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_vlan_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_vlan_member_attribute(self, vlan_member_oid, attr_list):
        """
        Parameters:
         - vlan_member_oid
         - attr_list

        """
        self.send_sai_thrift_get_vlan_member_attribute(vlan_member_oid, attr_list)
        return self.recv_sai_thrift_get_vlan_member_attribute()

    def send_sai_thrift_get_vlan_member_attribute(self, vlan_member_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_vlan_member_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_vlan_member_attribute_args()
        args.vlan_member_oid = vlan_member_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_vlan_member_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_vlan_member_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_member_attribute failed: unknown result")

    def sai_thrift_get_vlan_stats(self, vlan_oid, counter_ids):
        """
        Parameters:
         - vlan_oid
         - counter_ids

        """
        self.send_sai_thrift_get_vlan_stats(vlan_oid, counter_ids)
        return self.recv_sai_thrift_get_vlan_stats()

    def send_sai_thrift_get_vlan_stats(self, vlan_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_get_vlan_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_vlan_stats_args()
        args.vlan_oid = vlan_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_vlan_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_vlan_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_stats failed: unknown result")

    def sai_thrift_get_vlan_stats_ext(self, vlan_oid, counter_ids, mode):
        """
        Parameters:
         - vlan_oid
         - counter_ids
         - mode

        """
        self.send_sai_thrift_get_vlan_stats_ext(vlan_oid, counter_ids, mode)
        return self.recv_sai_thrift_get_vlan_stats_ext()

    def send_sai_thrift_get_vlan_stats_ext(self, vlan_oid, counter_ids, mode):
        self._oprot.writeMessageBegin('sai_thrift_get_vlan_stats_ext', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_vlan_stats_ext_args()
        args.vlan_oid = vlan_oid
        args.counter_ids = counter_ids
        args.mode = mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_vlan_stats_ext(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_vlan_stats_ext_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_stats_ext failed: unknown result")

    def sai_thrift_clear_vlan_stats(self, vlan_oid, counter_ids):
        """
        Parameters:
         - vlan_oid
         - counter_ids

        """
        self.send_sai_thrift_clear_vlan_stats(vlan_oid, counter_ids)
        self.recv_sai_thrift_clear_vlan_stats()

    def send_sai_thrift_clear_vlan_stats(self, vlan_oid, counter_ids):
        self._oprot.writeMessageBegin('sai_thrift_clear_vlan_stats', TMessageType.CALL, self._seqid)
        args = sai_thrift_clear_vlan_stats_args()
        args.vlan_oid = vlan_oid
        args.counter_ids = counter_ids
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_clear_vlan_stats(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_clear_vlan_stats_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_create_wred(self, attr_list):
        """
        Parameters:
         - attr_list

        """
        self.send_sai_thrift_create_wred(attr_list)
        return self.recv_sai_thrift_create_wred()

    def send_sai_thrift_create_wred(self, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_create_wred', TMessageType.CALL, self._seqid)
        args = sai_thrift_create_wred_args()
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_create_wred(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_create_wred_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_wred failed: unknown result")

    def sai_thrift_remove_wred(self, wred_oid):
        """
        Parameters:
         - wred_oid

        """
        self.send_sai_thrift_remove_wred(wred_oid)
        self.recv_sai_thrift_remove_wred()

    def send_sai_thrift_remove_wred(self, wred_oid):
        self._oprot.writeMessageBegin('sai_thrift_remove_wred', TMessageType.CALL, self._seqid)
        args = sai_thrift_remove_wred_args()
        args.wred_oid = wred_oid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_remove_wred(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_remove_wred_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_set_wred_attribute(self, wred_oid, attr):
        """
        Parameters:
         - wred_oid
         - attr

        """
        self.send_sai_thrift_set_wred_attribute(wred_oid, attr)
        self.recv_sai_thrift_set_wred_attribute()

    def send_sai_thrift_set_wred_attribute(self, wred_oid, attr):
        self._oprot.writeMessageBegin('sai_thrift_set_wred_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_set_wred_attribute_args()
        args.wred_oid = wred_oid
        args.attr = attr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_set_wred_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_set_wred_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def sai_thrift_get_wred_attribute(self, wred_oid, attr_list):
        """
        Parameters:
         - wred_oid
         - attr_list

        """
        self.send_sai_thrift_get_wred_attribute(wred_oid, attr_list)
        return self.recv_sai_thrift_get_wred_attribute()

    def send_sai_thrift_get_wred_attribute(self, wred_oid, attr_list):
        self._oprot.writeMessageBegin('sai_thrift_get_wred_attribute', TMessageType.CALL, self._seqid)
        args = sai_thrift_get_wred_attribute_args()
        args.wred_oid = wred_oid
        args.attr_list = attr_list
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_get_wred_attribute(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_get_wred_attribute_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_wred_attribute failed: unknown result")

    def sai_thrift_query_attribute_enum_values_capability(self, object_type, attr_id, caps_count):
        """
        Parameters:
         - object_type
         - attr_id
         - caps_count

        """
        self.send_sai_thrift_query_attribute_enum_values_capability(object_type, attr_id, caps_count)
        return self.recv_sai_thrift_query_attribute_enum_values_capability()

    def send_sai_thrift_query_attribute_enum_values_capability(self, object_type, attr_id, caps_count):
        self._oprot.writeMessageBegin('sai_thrift_query_attribute_enum_values_capability', TMessageType.CALL, self._seqid)
        args = sai_thrift_query_attribute_enum_values_capability_args()
        args.object_type = object_type
        args.attr_id = attr_id
        args.caps_count = caps_count
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_query_attribute_enum_values_capability(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_query_attribute_enum_values_capability_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_query_attribute_enum_values_capability failed: unknown result")

    def sai_thrift_object_type_get_availability(self, object_type, attr_id, attr_type):
        """
        Parameters:
         - object_type
         - attr_id
         - attr_type

        """
        self.send_sai_thrift_object_type_get_availability(object_type, attr_id, attr_type)
        return self.recv_sai_thrift_object_type_get_availability()

    def send_sai_thrift_object_type_get_availability(self, object_type, attr_id, attr_type):
        self._oprot.writeMessageBegin('sai_thrift_object_type_get_availability', TMessageType.CALL, self._seqid)
        args = sai_thrift_object_type_get_availability_args()
        args.object_type = object_type
        args.attr_id = attr_id
        args.attr_type = attr_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_object_type_get_availability(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_object_type_get_availability_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_object_type_get_availability failed: unknown result")

    def sai_thrift_switch_id_query(self, object_id):
        """
        Parameters:
         - object_id

        """
        self.send_sai_thrift_switch_id_query(object_id)
        return self.recv_sai_thrift_switch_id_query()

    def send_sai_thrift_switch_id_query(self, object_id):
        self._oprot.writeMessageBegin('sai_thrift_switch_id_query', TMessageType.CALL, self._seqid)
        args = sai_thrift_switch_id_query_args()
        args.object_id = object_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_switch_id_query(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_switch_id_query_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_switch_id_query failed: unknown result")

    def sai_thrift_object_type_query(self, object_id):
        """
        Parameters:
         - object_id

        """
        self.send_sai_thrift_object_type_query(object_id)
        return self.recv_sai_thrift_object_type_query()

    def send_sai_thrift_object_type_query(self, object_id):
        self._oprot.writeMessageBegin('sai_thrift_object_type_query', TMessageType.CALL, self._seqid)
        args = sai_thrift_object_type_query_args()
        args.object_id = object_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_object_type_query(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_object_type_query_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_object_type_query failed: unknown result")

    def sai_thrift_api_uninitialize(self):
        self.send_sai_thrift_api_uninitialize()
        return self.recv_sai_thrift_api_uninitialize()

    def send_sai_thrift_api_uninitialize(self):
        self._oprot.writeMessageBegin('sai_thrift_api_uninitialize', TMessageType.CALL, self._seqid)
        args = sai_thrift_api_uninitialize_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sai_thrift_api_uninitialize(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sai_thrift_api_uninitialize_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_api_uninitialize failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["sai_thrift_create_acl_table"] = Processor.process_sai_thrift_create_acl_table
        self._processMap["sai_thrift_remove_acl_table"] = Processor.process_sai_thrift_remove_acl_table
        self._processMap["sai_thrift_set_acl_table_attribute"] = Processor.process_sai_thrift_set_acl_table_attribute
        self._processMap["sai_thrift_get_acl_table_attribute"] = Processor.process_sai_thrift_get_acl_table_attribute
        self._processMap["sai_thrift_create_acl_entry"] = Processor.process_sai_thrift_create_acl_entry
        self._processMap["sai_thrift_remove_acl_entry"] = Processor.process_sai_thrift_remove_acl_entry
        self._processMap["sai_thrift_set_acl_entry_attribute"] = Processor.process_sai_thrift_set_acl_entry_attribute
        self._processMap["sai_thrift_get_acl_entry_attribute"] = Processor.process_sai_thrift_get_acl_entry_attribute
        self._processMap["sai_thrift_create_acl_counter"] = Processor.process_sai_thrift_create_acl_counter
        self._processMap["sai_thrift_remove_acl_counter"] = Processor.process_sai_thrift_remove_acl_counter
        self._processMap["sai_thrift_set_acl_counter_attribute"] = Processor.process_sai_thrift_set_acl_counter_attribute
        self._processMap["sai_thrift_get_acl_counter_attribute"] = Processor.process_sai_thrift_get_acl_counter_attribute
        self._processMap["sai_thrift_create_acl_range"] = Processor.process_sai_thrift_create_acl_range
        self._processMap["sai_thrift_remove_acl_range"] = Processor.process_sai_thrift_remove_acl_range
        self._processMap["sai_thrift_set_acl_range_attribute"] = Processor.process_sai_thrift_set_acl_range_attribute
        self._processMap["sai_thrift_get_acl_range_attribute"] = Processor.process_sai_thrift_get_acl_range_attribute
        self._processMap["sai_thrift_create_acl_table_group"] = Processor.process_sai_thrift_create_acl_table_group
        self._processMap["sai_thrift_remove_acl_table_group"] = Processor.process_sai_thrift_remove_acl_table_group
        self._processMap["sai_thrift_set_acl_table_group_attribute"] = Processor.process_sai_thrift_set_acl_table_group_attribute
        self._processMap["sai_thrift_get_acl_table_group_attribute"] = Processor.process_sai_thrift_get_acl_table_group_attribute
        self._processMap["sai_thrift_create_acl_table_group_member"] = Processor.process_sai_thrift_create_acl_table_group_member
        self._processMap["sai_thrift_remove_acl_table_group_member"] = Processor.process_sai_thrift_remove_acl_table_group_member
        self._processMap["sai_thrift_set_acl_table_group_member_attribute"] = Processor.process_sai_thrift_set_acl_table_group_member_attribute
        self._processMap["sai_thrift_get_acl_table_group_member_attribute"] = Processor.process_sai_thrift_get_acl_table_group_member_attribute
        self._processMap["sai_thrift_create_bfd_session"] = Processor.process_sai_thrift_create_bfd_session
        self._processMap["sai_thrift_remove_bfd_session"] = Processor.process_sai_thrift_remove_bfd_session
        self._processMap["sai_thrift_set_bfd_session_attribute"] = Processor.process_sai_thrift_set_bfd_session_attribute
        self._processMap["sai_thrift_get_bfd_session_attribute"] = Processor.process_sai_thrift_get_bfd_session_attribute
        self._processMap["sai_thrift_get_bfd_session_stats"] = Processor.process_sai_thrift_get_bfd_session_stats
        self._processMap["sai_thrift_get_bfd_session_stats_ext"] = Processor.process_sai_thrift_get_bfd_session_stats_ext
        self._processMap["sai_thrift_clear_bfd_session_stats"] = Processor.process_sai_thrift_clear_bfd_session_stats
        self._processMap["sai_thrift_create_bridge_port"] = Processor.process_sai_thrift_create_bridge_port
        self._processMap["sai_thrift_remove_bridge_port"] = Processor.process_sai_thrift_remove_bridge_port
        self._processMap["sai_thrift_set_bridge_port_attribute"] = Processor.process_sai_thrift_set_bridge_port_attribute
        self._processMap["sai_thrift_get_bridge_port_attribute"] = Processor.process_sai_thrift_get_bridge_port_attribute
        self._processMap["sai_thrift_get_bridge_port_stats"] = Processor.process_sai_thrift_get_bridge_port_stats
        self._processMap["sai_thrift_get_bridge_port_stats_ext"] = Processor.process_sai_thrift_get_bridge_port_stats_ext
        self._processMap["sai_thrift_clear_bridge_port_stats"] = Processor.process_sai_thrift_clear_bridge_port_stats
        self._processMap["sai_thrift_create_bridge"] = Processor.process_sai_thrift_create_bridge
        self._processMap["sai_thrift_remove_bridge"] = Processor.process_sai_thrift_remove_bridge
        self._processMap["sai_thrift_set_bridge_attribute"] = Processor.process_sai_thrift_set_bridge_attribute
        self._processMap["sai_thrift_get_bridge_attribute"] = Processor.process_sai_thrift_get_bridge_attribute
        self._processMap["sai_thrift_get_bridge_stats"] = Processor.process_sai_thrift_get_bridge_stats
        self._processMap["sai_thrift_get_bridge_stats_ext"] = Processor.process_sai_thrift_get_bridge_stats_ext
        self._processMap["sai_thrift_clear_bridge_stats"] = Processor.process_sai_thrift_clear_bridge_stats
        self._processMap["sai_thrift_create_ingress_priority_group"] = Processor.process_sai_thrift_create_ingress_priority_group
        self._processMap["sai_thrift_remove_ingress_priority_group"] = Processor.process_sai_thrift_remove_ingress_priority_group
        self._processMap["sai_thrift_set_ingress_priority_group_attribute"] = Processor.process_sai_thrift_set_ingress_priority_group_attribute
        self._processMap["sai_thrift_get_ingress_priority_group_attribute"] = Processor.process_sai_thrift_get_ingress_priority_group_attribute
        self._processMap["sai_thrift_get_ingress_priority_group_stats"] = Processor.process_sai_thrift_get_ingress_priority_group_stats
        self._processMap["sai_thrift_get_ingress_priority_group_stats_ext"] = Processor.process_sai_thrift_get_ingress_priority_group_stats_ext
        self._processMap["sai_thrift_clear_ingress_priority_group_stats"] = Processor.process_sai_thrift_clear_ingress_priority_group_stats
        self._processMap["sai_thrift_create_buffer_pool"] = Processor.process_sai_thrift_create_buffer_pool
        self._processMap["sai_thrift_remove_buffer_pool"] = Processor.process_sai_thrift_remove_buffer_pool
        self._processMap["sai_thrift_set_buffer_pool_attribute"] = Processor.process_sai_thrift_set_buffer_pool_attribute
        self._processMap["sai_thrift_get_buffer_pool_attribute"] = Processor.process_sai_thrift_get_buffer_pool_attribute
        self._processMap["sai_thrift_get_buffer_pool_stats"] = Processor.process_sai_thrift_get_buffer_pool_stats
        self._processMap["sai_thrift_get_buffer_pool_stats_ext"] = Processor.process_sai_thrift_get_buffer_pool_stats_ext
        self._processMap["sai_thrift_clear_buffer_pool_stats"] = Processor.process_sai_thrift_clear_buffer_pool_stats
        self._processMap["sai_thrift_create_buffer_profile"] = Processor.process_sai_thrift_create_buffer_profile
        self._processMap["sai_thrift_remove_buffer_profile"] = Processor.process_sai_thrift_remove_buffer_profile
        self._processMap["sai_thrift_set_buffer_profile_attribute"] = Processor.process_sai_thrift_set_buffer_profile_attribute
        self._processMap["sai_thrift_get_buffer_profile_attribute"] = Processor.process_sai_thrift_get_buffer_profile_attribute
        self._processMap["sai_thrift_create_counter"] = Processor.process_sai_thrift_create_counter
        self._processMap["sai_thrift_remove_counter"] = Processor.process_sai_thrift_remove_counter
        self._processMap["sai_thrift_set_counter_attribute"] = Processor.process_sai_thrift_set_counter_attribute
        self._processMap["sai_thrift_get_counter_attribute"] = Processor.process_sai_thrift_get_counter_attribute
        self._processMap["sai_thrift_get_counter_stats"] = Processor.process_sai_thrift_get_counter_stats
        self._processMap["sai_thrift_get_counter_stats_ext"] = Processor.process_sai_thrift_get_counter_stats_ext
        self._processMap["sai_thrift_clear_counter_stats"] = Processor.process_sai_thrift_clear_counter_stats
        self._processMap["sai_thrift_create_debug_counter"] = Processor.process_sai_thrift_create_debug_counter
        self._processMap["sai_thrift_remove_debug_counter"] = Processor.process_sai_thrift_remove_debug_counter
        self._processMap["sai_thrift_set_debug_counter_attribute"] = Processor.process_sai_thrift_set_debug_counter_attribute
        self._processMap["sai_thrift_get_debug_counter_attribute"] = Processor.process_sai_thrift_get_debug_counter_attribute
        self._processMap["sai_thrift_create_dtel"] = Processor.process_sai_thrift_create_dtel
        self._processMap["sai_thrift_remove_dtel"] = Processor.process_sai_thrift_remove_dtel
        self._processMap["sai_thrift_set_dtel_attribute"] = Processor.process_sai_thrift_set_dtel_attribute
        self._processMap["sai_thrift_get_dtel_attribute"] = Processor.process_sai_thrift_get_dtel_attribute
        self._processMap["sai_thrift_create_dtel_queue_report"] = Processor.process_sai_thrift_create_dtel_queue_report
        self._processMap["sai_thrift_remove_dtel_queue_report"] = Processor.process_sai_thrift_remove_dtel_queue_report
        self._processMap["sai_thrift_set_dtel_queue_report_attribute"] = Processor.process_sai_thrift_set_dtel_queue_report_attribute
        self._processMap["sai_thrift_get_dtel_queue_report_attribute"] = Processor.process_sai_thrift_get_dtel_queue_report_attribute
        self._processMap["sai_thrift_create_dtel_int_session"] = Processor.process_sai_thrift_create_dtel_int_session
        self._processMap["sai_thrift_remove_dtel_int_session"] = Processor.process_sai_thrift_remove_dtel_int_session
        self._processMap["sai_thrift_set_dtel_int_session_attribute"] = Processor.process_sai_thrift_set_dtel_int_session_attribute
        self._processMap["sai_thrift_get_dtel_int_session_attribute"] = Processor.process_sai_thrift_get_dtel_int_session_attribute
        self._processMap["sai_thrift_create_dtel_report_session"] = Processor.process_sai_thrift_create_dtel_report_session
        self._processMap["sai_thrift_remove_dtel_report_session"] = Processor.process_sai_thrift_remove_dtel_report_session
        self._processMap["sai_thrift_set_dtel_report_session_attribute"] = Processor.process_sai_thrift_set_dtel_report_session_attribute
        self._processMap["sai_thrift_get_dtel_report_session_attribute"] = Processor.process_sai_thrift_get_dtel_report_session_attribute
        self._processMap["sai_thrift_create_dtel_event"] = Processor.process_sai_thrift_create_dtel_event
        self._processMap["sai_thrift_remove_dtel_event"] = Processor.process_sai_thrift_remove_dtel_event
        self._processMap["sai_thrift_set_dtel_event_attribute"] = Processor.process_sai_thrift_set_dtel_event_attribute
        self._processMap["sai_thrift_get_dtel_event_attribute"] = Processor.process_sai_thrift_get_dtel_event_attribute
        self._processMap["sai_thrift_create_fdb_entry"] = Processor.process_sai_thrift_create_fdb_entry
        self._processMap["sai_thrift_remove_fdb_entry"] = Processor.process_sai_thrift_remove_fdb_entry
        self._processMap["sai_thrift_set_fdb_entry_attribute"] = Processor.process_sai_thrift_set_fdb_entry_attribute
        self._processMap["sai_thrift_get_fdb_entry_attribute"] = Processor.process_sai_thrift_get_fdb_entry_attribute
        self._processMap["sai_thrift_flush_fdb_entries"] = Processor.process_sai_thrift_flush_fdb_entries
        self._processMap["sai_thrift_bulk_create_fdb_entry"] = Processor.process_sai_thrift_bulk_create_fdb_entry
        self._processMap["sai_thrift_bulk_remove_fdb_entry"] = Processor.process_sai_thrift_bulk_remove_fdb_entry
        self._processMap["sai_thrift_bulk_set_fdb_entry_attribute"] = Processor.process_sai_thrift_bulk_set_fdb_entry_attribute
        self._processMap["sai_thrift_bulk_get_fdb_entry_attribute"] = Processor.process_sai_thrift_bulk_get_fdb_entry_attribute
        self._processMap["sai_thrift_create_generic_programmable"] = Processor.process_sai_thrift_create_generic_programmable
        self._processMap["sai_thrift_remove_generic_programmable"] = Processor.process_sai_thrift_remove_generic_programmable
        self._processMap["sai_thrift_set_generic_programmable_attribute"] = Processor.process_sai_thrift_set_generic_programmable_attribute
        self._processMap["sai_thrift_get_generic_programmable_attribute"] = Processor.process_sai_thrift_get_generic_programmable_attribute
        self._processMap["sai_thrift_create_fine_grained_hash_field"] = Processor.process_sai_thrift_create_fine_grained_hash_field
        self._processMap["sai_thrift_remove_fine_grained_hash_field"] = Processor.process_sai_thrift_remove_fine_grained_hash_field
        self._processMap["sai_thrift_set_fine_grained_hash_field_attribute"] = Processor.process_sai_thrift_set_fine_grained_hash_field_attribute
        self._processMap["sai_thrift_get_fine_grained_hash_field_attribute"] = Processor.process_sai_thrift_get_fine_grained_hash_field_attribute
        self._processMap["sai_thrift_create_hash"] = Processor.process_sai_thrift_create_hash
        self._processMap["sai_thrift_remove_hash"] = Processor.process_sai_thrift_remove_hash
        self._processMap["sai_thrift_set_hash_attribute"] = Processor.process_sai_thrift_set_hash_attribute
        self._processMap["sai_thrift_get_hash_attribute"] = Processor.process_sai_thrift_get_hash_attribute
        self._processMap["sai_thrift_create_hostif_trap_group"] = Processor.process_sai_thrift_create_hostif_trap_group
        self._processMap["sai_thrift_remove_hostif_trap_group"] = Processor.process_sai_thrift_remove_hostif_trap_group
        self._processMap["sai_thrift_set_hostif_trap_group_attribute"] = Processor.process_sai_thrift_set_hostif_trap_group_attribute
        self._processMap["sai_thrift_get_hostif_trap_group_attribute"] = Processor.process_sai_thrift_get_hostif_trap_group_attribute
        self._processMap["sai_thrift_create_hostif_trap"] = Processor.process_sai_thrift_create_hostif_trap
        self._processMap["sai_thrift_remove_hostif_trap"] = Processor.process_sai_thrift_remove_hostif_trap
        self._processMap["sai_thrift_set_hostif_trap_attribute"] = Processor.process_sai_thrift_set_hostif_trap_attribute
        self._processMap["sai_thrift_get_hostif_trap_attribute"] = Processor.process_sai_thrift_get_hostif_trap_attribute
        self._processMap["sai_thrift_create_hostif_user_defined_trap"] = Processor.process_sai_thrift_create_hostif_user_defined_trap
        self._processMap["sai_thrift_remove_hostif_user_defined_trap"] = Processor.process_sai_thrift_remove_hostif_user_defined_trap
        self._processMap["sai_thrift_set_hostif_user_defined_trap_attribute"] = Processor.process_sai_thrift_set_hostif_user_defined_trap_attribute
        self._processMap["sai_thrift_get_hostif_user_defined_trap_attribute"] = Processor.process_sai_thrift_get_hostif_user_defined_trap_attribute
        self._processMap["sai_thrift_create_hostif"] = Processor.process_sai_thrift_create_hostif
        self._processMap["sai_thrift_remove_hostif"] = Processor.process_sai_thrift_remove_hostif
        self._processMap["sai_thrift_set_hostif_attribute"] = Processor.process_sai_thrift_set_hostif_attribute
        self._processMap["sai_thrift_get_hostif_attribute"] = Processor.process_sai_thrift_get_hostif_attribute
        self._processMap["sai_thrift_create_hostif_table_entry"] = Processor.process_sai_thrift_create_hostif_table_entry
        self._processMap["sai_thrift_remove_hostif_table_entry"] = Processor.process_sai_thrift_remove_hostif_table_entry
        self._processMap["sai_thrift_set_hostif_table_entry_attribute"] = Processor.process_sai_thrift_set_hostif_table_entry_attribute
        self._processMap["sai_thrift_get_hostif_table_entry_attribute"] = Processor.process_sai_thrift_get_hostif_table_entry_attribute
        self._processMap["sai_thrift_recv_hostif_packet"] = Processor.process_sai_thrift_recv_hostif_packet
        self._processMap["sai_thrift_send_hostif_packet"] = Processor.process_sai_thrift_send_hostif_packet
        self._processMap["sai_thrift_allocate_hostif_packet"] = Processor.process_sai_thrift_allocate_hostif_packet
        self._processMap["sai_thrift_free_hostif_packet"] = Processor.process_sai_thrift_free_hostif_packet
        self._processMap["sai_thrift_create_ipmc_entry"] = Processor.process_sai_thrift_create_ipmc_entry
        self._processMap["sai_thrift_remove_ipmc_entry"] = Processor.process_sai_thrift_remove_ipmc_entry
        self._processMap["sai_thrift_set_ipmc_entry_attribute"] = Processor.process_sai_thrift_set_ipmc_entry_attribute
        self._processMap["sai_thrift_get_ipmc_entry_attribute"] = Processor.process_sai_thrift_get_ipmc_entry_attribute
        self._processMap["sai_thrift_create_ipmc_group"] = Processor.process_sai_thrift_create_ipmc_group
        self._processMap["sai_thrift_remove_ipmc_group"] = Processor.process_sai_thrift_remove_ipmc_group
        self._processMap["sai_thrift_set_ipmc_group_attribute"] = Processor.process_sai_thrift_set_ipmc_group_attribute
        self._processMap["sai_thrift_get_ipmc_group_attribute"] = Processor.process_sai_thrift_get_ipmc_group_attribute
        self._processMap["sai_thrift_create_ipmc_group_member"] = Processor.process_sai_thrift_create_ipmc_group_member
        self._processMap["sai_thrift_remove_ipmc_group_member"] = Processor.process_sai_thrift_remove_ipmc_group_member
        self._processMap["sai_thrift_set_ipmc_group_member_attribute"] = Processor.process_sai_thrift_set_ipmc_group_member_attribute
        self._processMap["sai_thrift_get_ipmc_group_member_attribute"] = Processor.process_sai_thrift_get_ipmc_group_member_attribute
        self._processMap["sai_thrift_create_ipsec"] = Processor.process_sai_thrift_create_ipsec
        self._processMap["sai_thrift_remove_ipsec"] = Processor.process_sai_thrift_remove_ipsec
        self._processMap["sai_thrift_set_ipsec_attribute"] = Processor.process_sai_thrift_set_ipsec_attribute
        self._processMap["sai_thrift_get_ipsec_attribute"] = Processor.process_sai_thrift_get_ipsec_attribute
        self._processMap["sai_thrift_create_ipsec_port"] = Processor.process_sai_thrift_create_ipsec_port
        self._processMap["sai_thrift_remove_ipsec_port"] = Processor.process_sai_thrift_remove_ipsec_port
        self._processMap["sai_thrift_set_ipsec_port_attribute"] = Processor.process_sai_thrift_set_ipsec_port_attribute
        self._processMap["sai_thrift_get_ipsec_port_attribute"] = Processor.process_sai_thrift_get_ipsec_port_attribute
        self._processMap["sai_thrift_get_ipsec_port_stats"] = Processor.process_sai_thrift_get_ipsec_port_stats
        self._processMap["sai_thrift_get_ipsec_port_stats_ext"] = Processor.process_sai_thrift_get_ipsec_port_stats_ext
        self._processMap["sai_thrift_clear_ipsec_port_stats"] = Processor.process_sai_thrift_clear_ipsec_port_stats
        self._processMap["sai_thrift_create_ipsec_sa"] = Processor.process_sai_thrift_create_ipsec_sa
        self._processMap["sai_thrift_remove_ipsec_sa"] = Processor.process_sai_thrift_remove_ipsec_sa
        self._processMap["sai_thrift_set_ipsec_sa_attribute"] = Processor.process_sai_thrift_set_ipsec_sa_attribute
        self._processMap["sai_thrift_get_ipsec_sa_attribute"] = Processor.process_sai_thrift_get_ipsec_sa_attribute
        self._processMap["sai_thrift_get_ipsec_sa_stats"] = Processor.process_sai_thrift_get_ipsec_sa_stats
        self._processMap["sai_thrift_get_ipsec_sa_stats_ext"] = Processor.process_sai_thrift_get_ipsec_sa_stats_ext
        self._processMap["sai_thrift_clear_ipsec_sa_stats"] = Processor.process_sai_thrift_clear_ipsec_sa_stats
        self._processMap["sai_thrift_create_isolation_group"] = Processor.process_sai_thrift_create_isolation_group
        self._processMap["sai_thrift_remove_isolation_group"] = Processor.process_sai_thrift_remove_isolation_group
        self._processMap["sai_thrift_set_isolation_group_attribute"] = Processor.process_sai_thrift_set_isolation_group_attribute
        self._processMap["sai_thrift_get_isolation_group_attribute"] = Processor.process_sai_thrift_get_isolation_group_attribute
        self._processMap["sai_thrift_create_isolation_group_member"] = Processor.process_sai_thrift_create_isolation_group_member
        self._processMap["sai_thrift_remove_isolation_group_member"] = Processor.process_sai_thrift_remove_isolation_group_member
        self._processMap["sai_thrift_set_isolation_group_member_attribute"] = Processor.process_sai_thrift_set_isolation_group_member_attribute
        self._processMap["sai_thrift_get_isolation_group_member_attribute"] = Processor.process_sai_thrift_get_isolation_group_member_attribute
        self._processMap["sai_thrift_create_l2mc_entry"] = Processor.process_sai_thrift_create_l2mc_entry
        self._processMap["sai_thrift_remove_l2mc_entry"] = Processor.process_sai_thrift_remove_l2mc_entry
        self._processMap["sai_thrift_set_l2mc_entry_attribute"] = Processor.process_sai_thrift_set_l2mc_entry_attribute
        self._processMap["sai_thrift_get_l2mc_entry_attribute"] = Processor.process_sai_thrift_get_l2mc_entry_attribute
        self._processMap["sai_thrift_create_l2mc_group"] = Processor.process_sai_thrift_create_l2mc_group
        self._processMap["sai_thrift_remove_l2mc_group"] = Processor.process_sai_thrift_remove_l2mc_group
        self._processMap["sai_thrift_set_l2mc_group_attribute"] = Processor.process_sai_thrift_set_l2mc_group_attribute
        self._processMap["sai_thrift_get_l2mc_group_attribute"] = Processor.process_sai_thrift_get_l2mc_group_attribute
        self._processMap["sai_thrift_create_l2mc_group_member"] = Processor.process_sai_thrift_create_l2mc_group_member
        self._processMap["sai_thrift_remove_l2mc_group_member"] = Processor.process_sai_thrift_remove_l2mc_group_member
        self._processMap["sai_thrift_set_l2mc_group_member_attribute"] = Processor.process_sai_thrift_set_l2mc_group_member_attribute
        self._processMap["sai_thrift_get_l2mc_group_member_attribute"] = Processor.process_sai_thrift_get_l2mc_group_member_attribute
        self._processMap["sai_thrift_create_lag"] = Processor.process_sai_thrift_create_lag
        self._processMap["sai_thrift_remove_lag"] = Processor.process_sai_thrift_remove_lag
        self._processMap["sai_thrift_set_lag_attribute"] = Processor.process_sai_thrift_set_lag_attribute
        self._processMap["sai_thrift_get_lag_attribute"] = Processor.process_sai_thrift_get_lag_attribute
        self._processMap["sai_thrift_create_lag_member"] = Processor.process_sai_thrift_create_lag_member
        self._processMap["sai_thrift_remove_lag_member"] = Processor.process_sai_thrift_remove_lag_member
        self._processMap["sai_thrift_set_lag_member_attribute"] = Processor.process_sai_thrift_set_lag_member_attribute
        self._processMap["sai_thrift_get_lag_member_attribute"] = Processor.process_sai_thrift_get_lag_member_attribute
        self._processMap["sai_thrift_create_macsec"] = Processor.process_sai_thrift_create_macsec
        self._processMap["sai_thrift_remove_macsec"] = Processor.process_sai_thrift_remove_macsec
        self._processMap["sai_thrift_set_macsec_attribute"] = Processor.process_sai_thrift_set_macsec_attribute
        self._processMap["sai_thrift_get_macsec_attribute"] = Processor.process_sai_thrift_get_macsec_attribute
        self._processMap["sai_thrift_create_macsec_port"] = Processor.process_sai_thrift_create_macsec_port
        self._processMap["sai_thrift_remove_macsec_port"] = Processor.process_sai_thrift_remove_macsec_port
        self._processMap["sai_thrift_set_macsec_port_attribute"] = Processor.process_sai_thrift_set_macsec_port_attribute
        self._processMap["sai_thrift_get_macsec_port_attribute"] = Processor.process_sai_thrift_get_macsec_port_attribute
        self._processMap["sai_thrift_get_macsec_port_stats"] = Processor.process_sai_thrift_get_macsec_port_stats
        self._processMap["sai_thrift_get_macsec_port_stats_ext"] = Processor.process_sai_thrift_get_macsec_port_stats_ext
        self._processMap["sai_thrift_clear_macsec_port_stats"] = Processor.process_sai_thrift_clear_macsec_port_stats
        self._processMap["sai_thrift_create_macsec_flow"] = Processor.process_sai_thrift_create_macsec_flow
        self._processMap["sai_thrift_remove_macsec_flow"] = Processor.process_sai_thrift_remove_macsec_flow
        self._processMap["sai_thrift_set_macsec_flow_attribute"] = Processor.process_sai_thrift_set_macsec_flow_attribute
        self._processMap["sai_thrift_get_macsec_flow_attribute"] = Processor.process_sai_thrift_get_macsec_flow_attribute
        self._processMap["sai_thrift_get_macsec_flow_stats"] = Processor.process_sai_thrift_get_macsec_flow_stats
        self._processMap["sai_thrift_get_macsec_flow_stats_ext"] = Processor.process_sai_thrift_get_macsec_flow_stats_ext
        self._processMap["sai_thrift_clear_macsec_flow_stats"] = Processor.process_sai_thrift_clear_macsec_flow_stats
        self._processMap["sai_thrift_create_macsec_sc"] = Processor.process_sai_thrift_create_macsec_sc
        self._processMap["sai_thrift_remove_macsec_sc"] = Processor.process_sai_thrift_remove_macsec_sc
        self._processMap["sai_thrift_set_macsec_sc_attribute"] = Processor.process_sai_thrift_set_macsec_sc_attribute
        self._processMap["sai_thrift_get_macsec_sc_attribute"] = Processor.process_sai_thrift_get_macsec_sc_attribute
        self._processMap["sai_thrift_get_macsec_sc_stats"] = Processor.process_sai_thrift_get_macsec_sc_stats
        self._processMap["sai_thrift_get_macsec_sc_stats_ext"] = Processor.process_sai_thrift_get_macsec_sc_stats_ext
        self._processMap["sai_thrift_clear_macsec_sc_stats"] = Processor.process_sai_thrift_clear_macsec_sc_stats
        self._processMap["sai_thrift_create_macsec_sa"] = Processor.process_sai_thrift_create_macsec_sa
        self._processMap["sai_thrift_remove_macsec_sa"] = Processor.process_sai_thrift_remove_macsec_sa
        self._processMap["sai_thrift_set_macsec_sa_attribute"] = Processor.process_sai_thrift_set_macsec_sa_attribute
        self._processMap["sai_thrift_get_macsec_sa_attribute"] = Processor.process_sai_thrift_get_macsec_sa_attribute
        self._processMap["sai_thrift_get_macsec_sa_stats"] = Processor.process_sai_thrift_get_macsec_sa_stats
        self._processMap["sai_thrift_get_macsec_sa_stats_ext"] = Processor.process_sai_thrift_get_macsec_sa_stats_ext
        self._processMap["sai_thrift_clear_macsec_sa_stats"] = Processor.process_sai_thrift_clear_macsec_sa_stats
        self._processMap["sai_thrift_create_mcast_fdb_entry"] = Processor.process_sai_thrift_create_mcast_fdb_entry
        self._processMap["sai_thrift_remove_mcast_fdb_entry"] = Processor.process_sai_thrift_remove_mcast_fdb_entry
        self._processMap["sai_thrift_set_mcast_fdb_entry_attribute"] = Processor.process_sai_thrift_set_mcast_fdb_entry_attribute
        self._processMap["sai_thrift_get_mcast_fdb_entry_attribute"] = Processor.process_sai_thrift_get_mcast_fdb_entry_attribute
        self._processMap["sai_thrift_create_mirror_session"] = Processor.process_sai_thrift_create_mirror_session
        self._processMap["sai_thrift_remove_mirror_session"] = Processor.process_sai_thrift_remove_mirror_session
        self._processMap["sai_thrift_set_mirror_session_attribute"] = Processor.process_sai_thrift_set_mirror_session_attribute
        self._processMap["sai_thrift_get_mirror_session_attribute"] = Processor.process_sai_thrift_get_mirror_session_attribute
        self._processMap["sai_thrift_create_inseg_entry"] = Processor.process_sai_thrift_create_inseg_entry
        self._processMap["sai_thrift_remove_inseg_entry"] = Processor.process_sai_thrift_remove_inseg_entry
        self._processMap["sai_thrift_set_inseg_entry_attribute"] = Processor.process_sai_thrift_set_inseg_entry_attribute
        self._processMap["sai_thrift_get_inseg_entry_attribute"] = Processor.process_sai_thrift_get_inseg_entry_attribute
        self._processMap["sai_thrift_bulk_create_inseg_entry"] = Processor.process_sai_thrift_bulk_create_inseg_entry
        self._processMap["sai_thrift_bulk_remove_inseg_entry"] = Processor.process_sai_thrift_bulk_remove_inseg_entry
        self._processMap["sai_thrift_bulk_set_inseg_entry_attribute"] = Processor.process_sai_thrift_bulk_set_inseg_entry_attribute
        self._processMap["sai_thrift_bulk_get_inseg_entry_attribute"] = Processor.process_sai_thrift_bulk_get_inseg_entry_attribute
        self._processMap["sai_thrift_create_my_mac"] = Processor.process_sai_thrift_create_my_mac
        self._processMap["sai_thrift_remove_my_mac"] = Processor.process_sai_thrift_remove_my_mac
        self._processMap["sai_thrift_set_my_mac_attribute"] = Processor.process_sai_thrift_set_my_mac_attribute
        self._processMap["sai_thrift_get_my_mac_attribute"] = Processor.process_sai_thrift_get_my_mac_attribute
        self._processMap["sai_thrift_create_nat_entry"] = Processor.process_sai_thrift_create_nat_entry
        self._processMap["sai_thrift_remove_nat_entry"] = Processor.process_sai_thrift_remove_nat_entry
        self._processMap["sai_thrift_set_nat_entry_attribute"] = Processor.process_sai_thrift_set_nat_entry_attribute
        self._processMap["sai_thrift_get_nat_entry_attribute"] = Processor.process_sai_thrift_get_nat_entry_attribute
        self._processMap["sai_thrift_bulk_create_nat_entry"] = Processor.process_sai_thrift_bulk_create_nat_entry
        self._processMap["sai_thrift_bulk_remove_nat_entry"] = Processor.process_sai_thrift_bulk_remove_nat_entry
        self._processMap["sai_thrift_bulk_set_nat_entry_attribute"] = Processor.process_sai_thrift_bulk_set_nat_entry_attribute
        self._processMap["sai_thrift_bulk_get_nat_entry_attribute"] = Processor.process_sai_thrift_bulk_get_nat_entry_attribute
        self._processMap["sai_thrift_create_nat_zone_counter"] = Processor.process_sai_thrift_create_nat_zone_counter
        self._processMap["sai_thrift_remove_nat_zone_counter"] = Processor.process_sai_thrift_remove_nat_zone_counter
        self._processMap["sai_thrift_set_nat_zone_counter_attribute"] = Processor.process_sai_thrift_set_nat_zone_counter_attribute
        self._processMap["sai_thrift_get_nat_zone_counter_attribute"] = Processor.process_sai_thrift_get_nat_zone_counter_attribute
        self._processMap["sai_thrift_create_neighbor_entry"] = Processor.process_sai_thrift_create_neighbor_entry
        self._processMap["sai_thrift_remove_neighbor_entry"] = Processor.process_sai_thrift_remove_neighbor_entry
        self._processMap["sai_thrift_set_neighbor_entry_attribute"] = Processor.process_sai_thrift_set_neighbor_entry_attribute
        self._processMap["sai_thrift_get_neighbor_entry_attribute"] = Processor.process_sai_thrift_get_neighbor_entry_attribute
        self._processMap["sai_thrift_remove_all_neighbor_entries"] = Processor.process_sai_thrift_remove_all_neighbor_entries
        self._processMap["sai_thrift_bulk_create_neighbor_entry"] = Processor.process_sai_thrift_bulk_create_neighbor_entry
        self._processMap["sai_thrift_bulk_remove_neighbor_entry"] = Processor.process_sai_thrift_bulk_remove_neighbor_entry
        self._processMap["sai_thrift_bulk_set_neighbor_entry_attribute"] = Processor.process_sai_thrift_bulk_set_neighbor_entry_attribute
        self._processMap["sai_thrift_bulk_get_neighbor_entry_attribute"] = Processor.process_sai_thrift_bulk_get_neighbor_entry_attribute
        self._processMap["sai_thrift_create_next_hop"] = Processor.process_sai_thrift_create_next_hop
        self._processMap["sai_thrift_remove_next_hop"] = Processor.process_sai_thrift_remove_next_hop
        self._processMap["sai_thrift_set_next_hop_attribute"] = Processor.process_sai_thrift_set_next_hop_attribute
        self._processMap["sai_thrift_get_next_hop_attribute"] = Processor.process_sai_thrift_get_next_hop_attribute
        self._processMap["sai_thrift_create_next_hop_group"] = Processor.process_sai_thrift_create_next_hop_group
        self._processMap["sai_thrift_remove_next_hop_group"] = Processor.process_sai_thrift_remove_next_hop_group
        self._processMap["sai_thrift_set_next_hop_group_attribute"] = Processor.process_sai_thrift_set_next_hop_group_attribute
        self._processMap["sai_thrift_get_next_hop_group_attribute"] = Processor.process_sai_thrift_get_next_hop_group_attribute
        self._processMap["sai_thrift_create_next_hop_group_member"] = Processor.process_sai_thrift_create_next_hop_group_member
        self._processMap["sai_thrift_remove_next_hop_group_member"] = Processor.process_sai_thrift_remove_next_hop_group_member
        self._processMap["sai_thrift_set_next_hop_group_member_attribute"] = Processor.process_sai_thrift_set_next_hop_group_member_attribute
        self._processMap["sai_thrift_get_next_hop_group_member_attribute"] = Processor.process_sai_thrift_get_next_hop_group_member_attribute
        self._processMap["sai_thrift_create_next_hop_group_map"] = Processor.process_sai_thrift_create_next_hop_group_map
        self._processMap["sai_thrift_remove_next_hop_group_map"] = Processor.process_sai_thrift_remove_next_hop_group_map
        self._processMap["sai_thrift_set_next_hop_group_map_attribute"] = Processor.process_sai_thrift_set_next_hop_group_map_attribute
        self._processMap["sai_thrift_get_next_hop_group_map_attribute"] = Processor.process_sai_thrift_get_next_hop_group_map_attribute
        self._processMap["sai_thrift_create_policer"] = Processor.process_sai_thrift_create_policer
        self._processMap["sai_thrift_remove_policer"] = Processor.process_sai_thrift_remove_policer
        self._processMap["sai_thrift_set_policer_attribute"] = Processor.process_sai_thrift_set_policer_attribute
        self._processMap["sai_thrift_get_policer_attribute"] = Processor.process_sai_thrift_get_policer_attribute
        self._processMap["sai_thrift_get_policer_stats"] = Processor.process_sai_thrift_get_policer_stats
        self._processMap["sai_thrift_get_policer_stats_ext"] = Processor.process_sai_thrift_get_policer_stats_ext
        self._processMap["sai_thrift_clear_policer_stats"] = Processor.process_sai_thrift_clear_policer_stats
        self._processMap["sai_thrift_create_port"] = Processor.process_sai_thrift_create_port
        self._processMap["sai_thrift_remove_port"] = Processor.process_sai_thrift_remove_port
        self._processMap["sai_thrift_set_port_attribute"] = Processor.process_sai_thrift_set_port_attribute
        self._processMap["sai_thrift_get_port_attribute"] = Processor.process_sai_thrift_get_port_attribute
        self._processMap["sai_thrift_get_port_stats"] = Processor.process_sai_thrift_get_port_stats
        self._processMap["sai_thrift_get_port_stats_ext"] = Processor.process_sai_thrift_get_port_stats_ext
        self._processMap["sai_thrift_clear_port_stats"] = Processor.process_sai_thrift_clear_port_stats
        self._processMap["sai_thrift_clear_port_all_stats"] = Processor.process_sai_thrift_clear_port_all_stats
        self._processMap["sai_thrift_create_port_pool"] = Processor.process_sai_thrift_create_port_pool
        self._processMap["sai_thrift_remove_port_pool"] = Processor.process_sai_thrift_remove_port_pool
        self._processMap["sai_thrift_set_port_pool_attribute"] = Processor.process_sai_thrift_set_port_pool_attribute
        self._processMap["sai_thrift_get_port_pool_attribute"] = Processor.process_sai_thrift_get_port_pool_attribute
        self._processMap["sai_thrift_get_port_pool_stats"] = Processor.process_sai_thrift_get_port_pool_stats
        self._processMap["sai_thrift_get_port_pool_stats_ext"] = Processor.process_sai_thrift_get_port_pool_stats_ext
        self._processMap["sai_thrift_clear_port_pool_stats"] = Processor.process_sai_thrift_clear_port_pool_stats
        self._processMap["sai_thrift_create_port_serdes"] = Processor.process_sai_thrift_create_port_serdes
        self._processMap["sai_thrift_remove_port_serdes"] = Processor.process_sai_thrift_remove_port_serdes
        self._processMap["sai_thrift_set_port_serdes_attribute"] = Processor.process_sai_thrift_set_port_serdes_attribute
        self._processMap["sai_thrift_get_port_serdes_attribute"] = Processor.process_sai_thrift_get_port_serdes_attribute
        self._processMap["sai_thrift_create_port_connector"] = Processor.process_sai_thrift_create_port_connector
        self._processMap["sai_thrift_remove_port_connector"] = Processor.process_sai_thrift_remove_port_connector
        self._processMap["sai_thrift_set_port_connector_attribute"] = Processor.process_sai_thrift_set_port_connector_attribute
        self._processMap["sai_thrift_get_port_connector_attribute"] = Processor.process_sai_thrift_get_port_connector_attribute
        self._processMap["sai_thrift_create_qos_map"] = Processor.process_sai_thrift_create_qos_map
        self._processMap["sai_thrift_remove_qos_map"] = Processor.process_sai_thrift_remove_qos_map
        self._processMap["sai_thrift_set_qos_map_attribute"] = Processor.process_sai_thrift_set_qos_map_attribute
        self._processMap["sai_thrift_get_qos_map_attribute"] = Processor.process_sai_thrift_get_qos_map_attribute
        self._processMap["sai_thrift_create_queue"] = Processor.process_sai_thrift_create_queue
        self._processMap["sai_thrift_remove_queue"] = Processor.process_sai_thrift_remove_queue
        self._processMap["sai_thrift_set_queue_attribute"] = Processor.process_sai_thrift_set_queue_attribute
        self._processMap["sai_thrift_get_queue_attribute"] = Processor.process_sai_thrift_get_queue_attribute
        self._processMap["sai_thrift_get_queue_stats"] = Processor.process_sai_thrift_get_queue_stats
        self._processMap["sai_thrift_get_queue_stats_ext"] = Processor.process_sai_thrift_get_queue_stats_ext
        self._processMap["sai_thrift_clear_queue_stats"] = Processor.process_sai_thrift_clear_queue_stats
        self._processMap["sai_thrift_create_route_entry"] = Processor.process_sai_thrift_create_route_entry
        self._processMap["sai_thrift_remove_route_entry"] = Processor.process_sai_thrift_remove_route_entry
        self._processMap["sai_thrift_set_route_entry_attribute"] = Processor.process_sai_thrift_set_route_entry_attribute
        self._processMap["sai_thrift_get_route_entry_attribute"] = Processor.process_sai_thrift_get_route_entry_attribute
        self._processMap["sai_thrift_bulk_create_route_entry"] = Processor.process_sai_thrift_bulk_create_route_entry
        self._processMap["sai_thrift_bulk_remove_route_entry"] = Processor.process_sai_thrift_bulk_remove_route_entry
        self._processMap["sai_thrift_bulk_set_route_entry_attribute"] = Processor.process_sai_thrift_bulk_set_route_entry_attribute
        self._processMap["sai_thrift_bulk_get_route_entry_attribute"] = Processor.process_sai_thrift_bulk_get_route_entry_attribute
        self._processMap["sai_thrift_create_router_interface"] = Processor.process_sai_thrift_create_router_interface
        self._processMap["sai_thrift_remove_router_interface"] = Processor.process_sai_thrift_remove_router_interface
        self._processMap["sai_thrift_set_router_interface_attribute"] = Processor.process_sai_thrift_set_router_interface_attribute
        self._processMap["sai_thrift_get_router_interface_attribute"] = Processor.process_sai_thrift_get_router_interface_attribute
        self._processMap["sai_thrift_get_router_interface_stats"] = Processor.process_sai_thrift_get_router_interface_stats
        self._processMap["sai_thrift_get_router_interface_stats_ext"] = Processor.process_sai_thrift_get_router_interface_stats_ext
        self._processMap["sai_thrift_clear_router_interface_stats"] = Processor.process_sai_thrift_clear_router_interface_stats
        self._processMap["sai_thrift_create_rpf_group"] = Processor.process_sai_thrift_create_rpf_group
        self._processMap["sai_thrift_remove_rpf_group"] = Processor.process_sai_thrift_remove_rpf_group
        self._processMap["sai_thrift_set_rpf_group_attribute"] = Processor.process_sai_thrift_set_rpf_group_attribute
        self._processMap["sai_thrift_get_rpf_group_attribute"] = Processor.process_sai_thrift_get_rpf_group_attribute
        self._processMap["sai_thrift_create_rpf_group_member"] = Processor.process_sai_thrift_create_rpf_group_member
        self._processMap["sai_thrift_remove_rpf_group_member"] = Processor.process_sai_thrift_remove_rpf_group_member
        self._processMap["sai_thrift_set_rpf_group_member_attribute"] = Processor.process_sai_thrift_set_rpf_group_member_attribute
        self._processMap["sai_thrift_get_rpf_group_member_attribute"] = Processor.process_sai_thrift_get_rpf_group_member_attribute
        self._processMap["sai_thrift_create_samplepacket"] = Processor.process_sai_thrift_create_samplepacket
        self._processMap["sai_thrift_remove_samplepacket"] = Processor.process_sai_thrift_remove_samplepacket
        self._processMap["sai_thrift_set_samplepacket_attribute"] = Processor.process_sai_thrift_set_samplepacket_attribute
        self._processMap["sai_thrift_get_samplepacket_attribute"] = Processor.process_sai_thrift_get_samplepacket_attribute
        self._processMap["sai_thrift_create_scheduler"] = Processor.process_sai_thrift_create_scheduler
        self._processMap["sai_thrift_remove_scheduler"] = Processor.process_sai_thrift_remove_scheduler
        self._processMap["sai_thrift_set_scheduler_attribute"] = Processor.process_sai_thrift_set_scheduler_attribute
        self._processMap["sai_thrift_get_scheduler_attribute"] = Processor.process_sai_thrift_get_scheduler_attribute
        self._processMap["sai_thrift_create_scheduler_group"] = Processor.process_sai_thrift_create_scheduler_group
        self._processMap["sai_thrift_remove_scheduler_group"] = Processor.process_sai_thrift_remove_scheduler_group
        self._processMap["sai_thrift_set_scheduler_group_attribute"] = Processor.process_sai_thrift_set_scheduler_group_attribute
        self._processMap["sai_thrift_get_scheduler_group_attribute"] = Processor.process_sai_thrift_get_scheduler_group_attribute
        self._processMap["sai_thrift_create_srv6_sidlist"] = Processor.process_sai_thrift_create_srv6_sidlist
        self._processMap["sai_thrift_remove_srv6_sidlist"] = Processor.process_sai_thrift_remove_srv6_sidlist
        self._processMap["sai_thrift_set_srv6_sidlist_attribute"] = Processor.process_sai_thrift_set_srv6_sidlist_attribute
        self._processMap["sai_thrift_get_srv6_sidlist_attribute"] = Processor.process_sai_thrift_get_srv6_sidlist_attribute
        self._processMap["sai_thrift_create_my_sid_entry"] = Processor.process_sai_thrift_create_my_sid_entry
        self._processMap["sai_thrift_remove_my_sid_entry"] = Processor.process_sai_thrift_remove_my_sid_entry
        self._processMap["sai_thrift_set_my_sid_entry_attribute"] = Processor.process_sai_thrift_set_my_sid_entry_attribute
        self._processMap["sai_thrift_get_my_sid_entry_attribute"] = Processor.process_sai_thrift_get_my_sid_entry_attribute
        self._processMap["sai_thrift_bulk_create_my_sid_entry"] = Processor.process_sai_thrift_bulk_create_my_sid_entry
        self._processMap["sai_thrift_bulk_remove_my_sid_entry"] = Processor.process_sai_thrift_bulk_remove_my_sid_entry
        self._processMap["sai_thrift_bulk_set_my_sid_entry_attribute"] = Processor.process_sai_thrift_bulk_set_my_sid_entry_attribute
        self._processMap["sai_thrift_bulk_get_my_sid_entry_attribute"] = Processor.process_sai_thrift_bulk_get_my_sid_entry_attribute
        self._processMap["sai_thrift_create_stp"] = Processor.process_sai_thrift_create_stp
        self._processMap["sai_thrift_remove_stp"] = Processor.process_sai_thrift_remove_stp
        self._processMap["sai_thrift_set_stp_attribute"] = Processor.process_sai_thrift_set_stp_attribute
        self._processMap["sai_thrift_get_stp_attribute"] = Processor.process_sai_thrift_get_stp_attribute
        self._processMap["sai_thrift_create_stp_port"] = Processor.process_sai_thrift_create_stp_port
        self._processMap["sai_thrift_remove_stp_port"] = Processor.process_sai_thrift_remove_stp_port
        self._processMap["sai_thrift_set_stp_port_attribute"] = Processor.process_sai_thrift_set_stp_port_attribute
        self._processMap["sai_thrift_get_stp_port_attribute"] = Processor.process_sai_thrift_get_stp_port_attribute
        self._processMap["sai_thrift_switch_register_read"] = Processor.process_sai_thrift_switch_register_read
        self._processMap["sai_thrift_switch_register_write"] = Processor.process_sai_thrift_switch_register_write
        self._processMap["sai_thrift_switch_mdio_read"] = Processor.process_sai_thrift_switch_mdio_read
        self._processMap["sai_thrift_switch_mdio_write"] = Processor.process_sai_thrift_switch_mdio_write
        self._processMap["sai_thrift_switch_mdio_cl22_read"] = Processor.process_sai_thrift_switch_mdio_cl22_read
        self._processMap["sai_thrift_switch_mdio_cl22_write"] = Processor.process_sai_thrift_switch_mdio_cl22_write
        self._processMap["sai_thrift_create_switch"] = Processor.process_sai_thrift_create_switch
        self._processMap["sai_thrift_remove_switch"] = Processor.process_sai_thrift_remove_switch
        self._processMap["sai_thrift_set_switch_attribute"] = Processor.process_sai_thrift_set_switch_attribute
        self._processMap["sai_thrift_get_switch_attribute"] = Processor.process_sai_thrift_get_switch_attribute
        self._processMap["sai_thrift_get_switch_stats"] = Processor.process_sai_thrift_get_switch_stats
        self._processMap["sai_thrift_get_switch_stats_ext"] = Processor.process_sai_thrift_get_switch_stats_ext
        self._processMap["sai_thrift_clear_switch_stats"] = Processor.process_sai_thrift_clear_switch_stats
        self._processMap["sai_thrift_create_switch_tunnel"] = Processor.process_sai_thrift_create_switch_tunnel
        self._processMap["sai_thrift_remove_switch_tunnel"] = Processor.process_sai_thrift_remove_switch_tunnel
        self._processMap["sai_thrift_set_switch_tunnel_attribute"] = Processor.process_sai_thrift_set_switch_tunnel_attribute
        self._processMap["sai_thrift_get_switch_tunnel_attribute"] = Processor.process_sai_thrift_get_switch_tunnel_attribute
        self._processMap["sai_thrift_create_system_port"] = Processor.process_sai_thrift_create_system_port
        self._processMap["sai_thrift_remove_system_port"] = Processor.process_sai_thrift_remove_system_port
        self._processMap["sai_thrift_set_system_port_attribute"] = Processor.process_sai_thrift_set_system_port_attribute
        self._processMap["sai_thrift_get_system_port_attribute"] = Processor.process_sai_thrift_get_system_port_attribute
        self._processMap["sai_thrift_create_tam"] = Processor.process_sai_thrift_create_tam
        self._processMap["sai_thrift_remove_tam"] = Processor.process_sai_thrift_remove_tam
        self._processMap["sai_thrift_set_tam_attribute"] = Processor.process_sai_thrift_set_tam_attribute
        self._processMap["sai_thrift_get_tam_attribute"] = Processor.process_sai_thrift_get_tam_attribute
        self._processMap["sai_thrift_create_tam_math_func"] = Processor.process_sai_thrift_create_tam_math_func
        self._processMap["sai_thrift_remove_tam_math_func"] = Processor.process_sai_thrift_remove_tam_math_func
        self._processMap["sai_thrift_get_tam_math_func_attribute"] = Processor.process_sai_thrift_get_tam_math_func_attribute
        self._processMap["sai_thrift_set_tam_math_func_attribute"] = Processor.process_sai_thrift_set_tam_math_func_attribute
        self._processMap["sai_thrift_create_tam_event_threshold"] = Processor.process_sai_thrift_create_tam_event_threshold
        self._processMap["sai_thrift_remove_tam_event_threshold"] = Processor.process_sai_thrift_remove_tam_event_threshold
        self._processMap["sai_thrift_get_tam_event_threshold_attribute"] = Processor.process_sai_thrift_get_tam_event_threshold_attribute
        self._processMap["sai_thrift_set_tam_event_threshold_attribute"] = Processor.process_sai_thrift_set_tam_event_threshold_attribute
        self._processMap["sai_thrift_create_tam_int"] = Processor.process_sai_thrift_create_tam_int
        self._processMap["sai_thrift_remove_tam_int"] = Processor.process_sai_thrift_remove_tam_int
        self._processMap["sai_thrift_get_tam_int_attribute"] = Processor.process_sai_thrift_get_tam_int_attribute
        self._processMap["sai_thrift_set_tam_int_attribute"] = Processor.process_sai_thrift_set_tam_int_attribute
        self._processMap["sai_thrift_create_tam_tel_type"] = Processor.process_sai_thrift_create_tam_tel_type
        self._processMap["sai_thrift_remove_tam_tel_type"] = Processor.process_sai_thrift_remove_tam_tel_type
        self._processMap["sai_thrift_get_tam_tel_type_attribute"] = Processor.process_sai_thrift_get_tam_tel_type_attribute
        self._processMap["sai_thrift_set_tam_tel_type_attribute"] = Processor.process_sai_thrift_set_tam_tel_type_attribute
        self._processMap["sai_thrift_create_tam_report"] = Processor.process_sai_thrift_create_tam_report
        self._processMap["sai_thrift_remove_tam_report"] = Processor.process_sai_thrift_remove_tam_report
        self._processMap["sai_thrift_get_tam_report_attribute"] = Processor.process_sai_thrift_get_tam_report_attribute
        self._processMap["sai_thrift_set_tam_report_attribute"] = Processor.process_sai_thrift_set_tam_report_attribute
        self._processMap["sai_thrift_create_tam_telemetry"] = Processor.process_sai_thrift_create_tam_telemetry
        self._processMap["sai_thrift_remove_tam_telemetry"] = Processor.process_sai_thrift_remove_tam_telemetry
        self._processMap["sai_thrift_get_tam_telemetry_attribute"] = Processor.process_sai_thrift_get_tam_telemetry_attribute
        self._processMap["sai_thrift_set_tam_telemetry_attribute"] = Processor.process_sai_thrift_set_tam_telemetry_attribute
        self._processMap["sai_thrift_create_tam_transport"] = Processor.process_sai_thrift_create_tam_transport
        self._processMap["sai_thrift_remove_tam_transport"] = Processor.process_sai_thrift_remove_tam_transport
        self._processMap["sai_thrift_get_tam_transport_attribute"] = Processor.process_sai_thrift_get_tam_transport_attribute
        self._processMap["sai_thrift_set_tam_transport_attribute"] = Processor.process_sai_thrift_set_tam_transport_attribute
        self._processMap["sai_thrift_create_tam_collector"] = Processor.process_sai_thrift_create_tam_collector
        self._processMap["sai_thrift_remove_tam_collector"] = Processor.process_sai_thrift_remove_tam_collector
        self._processMap["sai_thrift_get_tam_collector_attribute"] = Processor.process_sai_thrift_get_tam_collector_attribute
        self._processMap["sai_thrift_set_tam_collector_attribute"] = Processor.process_sai_thrift_set_tam_collector_attribute
        self._processMap["sai_thrift_create_tam_event_action"] = Processor.process_sai_thrift_create_tam_event_action
        self._processMap["sai_thrift_remove_tam_event_action"] = Processor.process_sai_thrift_remove_tam_event_action
        self._processMap["sai_thrift_get_tam_event_action_attribute"] = Processor.process_sai_thrift_get_tam_event_action_attribute
        self._processMap["sai_thrift_set_tam_event_action_attribute"] = Processor.process_sai_thrift_set_tam_event_action_attribute
        self._processMap["sai_thrift_create_tam_event"] = Processor.process_sai_thrift_create_tam_event
        self._processMap["sai_thrift_remove_tam_event"] = Processor.process_sai_thrift_remove_tam_event
        self._processMap["sai_thrift_get_tam_event_attribute"] = Processor.process_sai_thrift_get_tam_event_attribute
        self._processMap["sai_thrift_set_tam_event_attribute"] = Processor.process_sai_thrift_set_tam_event_attribute
        self._processMap["sai_thrift_create_tunnel_map"] = Processor.process_sai_thrift_create_tunnel_map
        self._processMap["sai_thrift_remove_tunnel_map"] = Processor.process_sai_thrift_remove_tunnel_map
        self._processMap["sai_thrift_set_tunnel_map_attribute"] = Processor.process_sai_thrift_set_tunnel_map_attribute
        self._processMap["sai_thrift_get_tunnel_map_attribute"] = Processor.process_sai_thrift_get_tunnel_map_attribute
        self._processMap["sai_thrift_create_tunnel"] = Processor.process_sai_thrift_create_tunnel
        self._processMap["sai_thrift_remove_tunnel"] = Processor.process_sai_thrift_remove_tunnel
        self._processMap["sai_thrift_set_tunnel_attribute"] = Processor.process_sai_thrift_set_tunnel_attribute
        self._processMap["sai_thrift_get_tunnel_attribute"] = Processor.process_sai_thrift_get_tunnel_attribute
        self._processMap["sai_thrift_get_tunnel_stats"] = Processor.process_sai_thrift_get_tunnel_stats
        self._processMap["sai_thrift_get_tunnel_stats_ext"] = Processor.process_sai_thrift_get_tunnel_stats_ext
        self._processMap["sai_thrift_clear_tunnel_stats"] = Processor.process_sai_thrift_clear_tunnel_stats
        self._processMap["sai_thrift_create_tunnel_term_table_entry"] = Processor.process_sai_thrift_create_tunnel_term_table_entry
        self._processMap["sai_thrift_remove_tunnel_term_table_entry"] = Processor.process_sai_thrift_remove_tunnel_term_table_entry
        self._processMap["sai_thrift_set_tunnel_term_table_entry_attribute"] = Processor.process_sai_thrift_set_tunnel_term_table_entry_attribute
        self._processMap["sai_thrift_get_tunnel_term_table_entry_attribute"] = Processor.process_sai_thrift_get_tunnel_term_table_entry_attribute
        self._processMap["sai_thrift_create_tunnel_map_entry"] = Processor.process_sai_thrift_create_tunnel_map_entry
        self._processMap["sai_thrift_remove_tunnel_map_entry"] = Processor.process_sai_thrift_remove_tunnel_map_entry
        self._processMap["sai_thrift_set_tunnel_map_entry_attribute"] = Processor.process_sai_thrift_set_tunnel_map_entry_attribute
        self._processMap["sai_thrift_get_tunnel_map_entry_attribute"] = Processor.process_sai_thrift_get_tunnel_map_entry_attribute
        self._processMap["sai_thrift_create_udf"] = Processor.process_sai_thrift_create_udf
        self._processMap["sai_thrift_remove_udf"] = Processor.process_sai_thrift_remove_udf
        self._processMap["sai_thrift_set_udf_attribute"] = Processor.process_sai_thrift_set_udf_attribute
        self._processMap["sai_thrift_get_udf_attribute"] = Processor.process_sai_thrift_get_udf_attribute
        self._processMap["sai_thrift_create_udf_match"] = Processor.process_sai_thrift_create_udf_match
        self._processMap["sai_thrift_remove_udf_match"] = Processor.process_sai_thrift_remove_udf_match
        self._processMap["sai_thrift_set_udf_match_attribute"] = Processor.process_sai_thrift_set_udf_match_attribute
        self._processMap["sai_thrift_get_udf_match_attribute"] = Processor.process_sai_thrift_get_udf_match_attribute
        self._processMap["sai_thrift_create_udf_group"] = Processor.process_sai_thrift_create_udf_group
        self._processMap["sai_thrift_remove_udf_group"] = Processor.process_sai_thrift_remove_udf_group
        self._processMap["sai_thrift_set_udf_group_attribute"] = Processor.process_sai_thrift_set_udf_group_attribute
        self._processMap["sai_thrift_get_udf_group_attribute"] = Processor.process_sai_thrift_get_udf_group_attribute
        self._processMap["sai_thrift_create_virtual_router"] = Processor.process_sai_thrift_create_virtual_router
        self._processMap["sai_thrift_remove_virtual_router"] = Processor.process_sai_thrift_remove_virtual_router
        self._processMap["sai_thrift_set_virtual_router_attribute"] = Processor.process_sai_thrift_set_virtual_router_attribute
        self._processMap["sai_thrift_get_virtual_router_attribute"] = Processor.process_sai_thrift_get_virtual_router_attribute
        self._processMap["sai_thrift_create_vlan"] = Processor.process_sai_thrift_create_vlan
        self._processMap["sai_thrift_remove_vlan"] = Processor.process_sai_thrift_remove_vlan
        self._processMap["sai_thrift_set_vlan_attribute"] = Processor.process_sai_thrift_set_vlan_attribute
        self._processMap["sai_thrift_get_vlan_attribute"] = Processor.process_sai_thrift_get_vlan_attribute
        self._processMap["sai_thrift_create_vlan_member"] = Processor.process_sai_thrift_create_vlan_member
        self._processMap["sai_thrift_remove_vlan_member"] = Processor.process_sai_thrift_remove_vlan_member
        self._processMap["sai_thrift_set_vlan_member_attribute"] = Processor.process_sai_thrift_set_vlan_member_attribute
        self._processMap["sai_thrift_get_vlan_member_attribute"] = Processor.process_sai_thrift_get_vlan_member_attribute
        self._processMap["sai_thrift_get_vlan_stats"] = Processor.process_sai_thrift_get_vlan_stats
        self._processMap["sai_thrift_get_vlan_stats_ext"] = Processor.process_sai_thrift_get_vlan_stats_ext
        self._processMap["sai_thrift_clear_vlan_stats"] = Processor.process_sai_thrift_clear_vlan_stats
        self._processMap["sai_thrift_create_wred"] = Processor.process_sai_thrift_create_wred
        self._processMap["sai_thrift_remove_wred"] = Processor.process_sai_thrift_remove_wred
        self._processMap["sai_thrift_set_wred_attribute"] = Processor.process_sai_thrift_set_wred_attribute
        self._processMap["sai_thrift_get_wred_attribute"] = Processor.process_sai_thrift_get_wred_attribute
        self._processMap["sai_thrift_query_attribute_enum_values_capability"] = Processor.process_sai_thrift_query_attribute_enum_values_capability
        self._processMap["sai_thrift_object_type_get_availability"] = Processor.process_sai_thrift_object_type_get_availability
        self._processMap["sai_thrift_switch_id_query"] = Processor.process_sai_thrift_switch_id_query
        self._processMap["sai_thrift_object_type_query"] = Processor.process_sai_thrift_object_type_query
        self._processMap["sai_thrift_api_uninitialize"] = Processor.process_sai_thrift_api_uninitialize
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_sai_thrift_create_acl_table(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_table_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_table_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_table(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_table", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_table(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_table_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_table_result()
        try:
            self._handler.sai_thrift_remove_acl_table(args.acl_table_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_table", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_acl_table_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_acl_table_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_acl_table_attribute_result()
        try:
            self._handler.sai_thrift_set_acl_table_attribute(args.acl_table_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_acl_table_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_table_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_table_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_table_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_table_attribute(args.acl_table_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_table_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_entry(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_entry_result()
        try:
            self._handler.sai_thrift_remove_acl_entry(args.acl_entry_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_acl_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_acl_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_acl_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_acl_entry_attribute(args.acl_entry_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_acl_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_entry_attribute(args.acl_entry_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_counter(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_counter_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_counter(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_counter(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_counter_result()
        try:
            self._handler.sai_thrift_remove_acl_counter(args.acl_counter_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_acl_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_acl_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_acl_counter_attribute_result()
        try:
            self._handler.sai_thrift_set_acl_counter_attribute(args.acl_counter_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_acl_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_counter_attribute(args.acl_counter_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_range(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_range_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_range_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_range(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_range", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_range(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_range_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_range_result()
        try:
            self._handler.sai_thrift_remove_acl_range(args.acl_range_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_range", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_acl_range_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_acl_range_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_acl_range_attribute_result()
        try:
            self._handler.sai_thrift_set_acl_range_attribute(args.acl_range_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_acl_range_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_range_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_range_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_range_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_range_attribute(args.acl_range_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_range_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_table_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_table_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_table_group_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_table_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_table_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_table_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_table_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_table_group_result()
        try:
            self._handler.sai_thrift_remove_acl_table_group(args.acl_table_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_table_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_acl_table_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_acl_table_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_acl_table_group_attribute_result()
        try:
            self._handler.sai_thrift_set_acl_table_group_attribute(args.acl_table_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_acl_table_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_table_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_table_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_table_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_table_group_attribute(args.acl_table_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_table_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_acl_table_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_acl_table_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_acl_table_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_acl_table_group_member(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_acl_table_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_acl_table_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_acl_table_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_acl_table_group_member_result()
        try:
            self._handler.sai_thrift_remove_acl_table_group_member(args.acl_table_group_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_acl_table_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_acl_table_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_acl_table_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_acl_table_group_member_attribute_result()
        try:
            self._handler.sai_thrift_set_acl_table_group_member_attribute(args.acl_table_group_member_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_acl_table_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_acl_table_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_acl_table_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_acl_table_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_acl_table_group_member_attribute(args.acl_table_group_member_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_acl_table_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_bfd_session(self, seqid, iprot, oprot):
        args = sai_thrift_create_bfd_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_bfd_session_result()
        try:
            result.success = self._handler.sai_thrift_create_bfd_session(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_bfd_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_bfd_session(self, seqid, iprot, oprot):
        args = sai_thrift_remove_bfd_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_bfd_session_result()
        try:
            self._handler.sai_thrift_remove_bfd_session(args.bfd_session_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_bfd_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_bfd_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_bfd_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_bfd_session_attribute_result()
        try:
            self._handler.sai_thrift_set_bfd_session_attribute(args.bfd_session_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_bfd_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bfd_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_bfd_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bfd_session_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_bfd_session_attribute(args.bfd_session_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bfd_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bfd_session_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_bfd_session_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bfd_session_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_bfd_session_stats(args.bfd_session_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bfd_session_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bfd_session_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_bfd_session_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bfd_session_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_bfd_session_stats_ext(args.bfd_session_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bfd_session_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_bfd_session_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_bfd_session_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_bfd_session_stats_result()
        try:
            self._handler.sai_thrift_clear_bfd_session_stats(args.bfd_session_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_bfd_session_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_bridge_port(self, seqid, iprot, oprot):
        args = sai_thrift_create_bridge_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_bridge_port_result()
        try:
            result.success = self._handler.sai_thrift_create_bridge_port(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_bridge_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_bridge_port(self, seqid, iprot, oprot):
        args = sai_thrift_remove_bridge_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_bridge_port_result()
        try:
            self._handler.sai_thrift_remove_bridge_port(args.bridge_port_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_bridge_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_bridge_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_bridge_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_bridge_port_attribute_result()
        try:
            self._handler.sai_thrift_set_bridge_port_attribute(args.bridge_port_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_bridge_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_port_attribute(args.bridge_port_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_port_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_port_stats(args.bridge_port_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_port_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_port_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_port_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_port_stats_ext(args.bridge_port_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_port_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_bridge_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_bridge_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_bridge_port_stats_result()
        try:
            self._handler.sai_thrift_clear_bridge_port_stats(args.bridge_port_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_bridge_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_bridge(self, seqid, iprot, oprot):
        args = sai_thrift_create_bridge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_bridge_result()
        try:
            result.success = self._handler.sai_thrift_create_bridge(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_bridge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_bridge(self, seqid, iprot, oprot):
        args = sai_thrift_remove_bridge_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_bridge_result()
        try:
            self._handler.sai_thrift_remove_bridge(args.bridge_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_bridge", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_bridge_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_bridge_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_bridge_attribute_result()
        try:
            self._handler.sai_thrift_set_bridge_attribute(args.bridge_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_bridge_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_attribute(args.bridge_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_stats(args.bridge_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_bridge_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_bridge_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_bridge_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_bridge_stats_ext(args.bridge_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_bridge_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_bridge_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_bridge_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_bridge_stats_result()
        try:
            self._handler.sai_thrift_clear_bridge_stats(args.bridge_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_bridge_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ingress_priority_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_ingress_priority_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ingress_priority_group_result()
        try:
            result.success = self._handler.sai_thrift_create_ingress_priority_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ingress_priority_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ingress_priority_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ingress_priority_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ingress_priority_group_result()
        try:
            self._handler.sai_thrift_remove_ingress_priority_group(args.ingress_priority_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ingress_priority_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ingress_priority_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ingress_priority_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ingress_priority_group_attribute_result()
        try:
            self._handler.sai_thrift_set_ingress_priority_group_attribute(args.ingress_priority_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ingress_priority_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ingress_priority_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ingress_priority_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ingress_priority_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ingress_priority_group_attribute(args.ingress_priority_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ingress_priority_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ingress_priority_group_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_ingress_priority_group_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ingress_priority_group_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_ingress_priority_group_stats(args.ingress_priority_group_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ingress_priority_group_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ingress_priority_group_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_ingress_priority_group_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ingress_priority_group_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_ingress_priority_group_stats_ext(args.ingress_priority_group_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ingress_priority_group_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_ingress_priority_group_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_ingress_priority_group_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_ingress_priority_group_stats_result()
        try:
            self._handler.sai_thrift_clear_ingress_priority_group_stats(args.ingress_priority_group_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_ingress_priority_group_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_buffer_pool(self, seqid, iprot, oprot):
        args = sai_thrift_create_buffer_pool_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_buffer_pool_result()
        try:
            result.success = self._handler.sai_thrift_create_buffer_pool(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_buffer_pool", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_buffer_pool(self, seqid, iprot, oprot):
        args = sai_thrift_remove_buffer_pool_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_buffer_pool_result()
        try:
            self._handler.sai_thrift_remove_buffer_pool(args.buffer_pool_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_buffer_pool", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_buffer_pool_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_buffer_pool_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_buffer_pool_attribute_result()
        try:
            self._handler.sai_thrift_set_buffer_pool_attribute(args.buffer_pool_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_buffer_pool_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_buffer_pool_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_buffer_pool_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_buffer_pool_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_buffer_pool_attribute(args.buffer_pool_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_buffer_pool_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_buffer_pool_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_buffer_pool_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_buffer_pool_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_buffer_pool_stats(args.buffer_pool_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_buffer_pool_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_buffer_pool_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_buffer_pool_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_buffer_pool_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_buffer_pool_stats_ext(args.buffer_pool_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_buffer_pool_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_buffer_pool_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_buffer_pool_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_buffer_pool_stats_result()
        try:
            self._handler.sai_thrift_clear_buffer_pool_stats(args.buffer_pool_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_buffer_pool_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_buffer_profile(self, seqid, iprot, oprot):
        args = sai_thrift_create_buffer_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_buffer_profile_result()
        try:
            result.success = self._handler.sai_thrift_create_buffer_profile(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_buffer_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_buffer_profile(self, seqid, iprot, oprot):
        args = sai_thrift_remove_buffer_profile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_buffer_profile_result()
        try:
            self._handler.sai_thrift_remove_buffer_profile(args.buffer_profile_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_buffer_profile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_buffer_profile_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_buffer_profile_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_buffer_profile_attribute_result()
        try:
            self._handler.sai_thrift_set_buffer_profile_attribute(args.buffer_profile_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_buffer_profile_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_buffer_profile_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_buffer_profile_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_buffer_profile_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_buffer_profile_attribute(args.buffer_profile_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_buffer_profile_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_counter(self, seqid, iprot, oprot):
        args = sai_thrift_create_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_counter_result()
        try:
            result.success = self._handler.sai_thrift_create_counter(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_counter(self, seqid, iprot, oprot):
        args = sai_thrift_remove_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_counter_result()
        try:
            self._handler.sai_thrift_remove_counter(args.counter_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_counter_attribute_result()
        try:
            self._handler.sai_thrift_set_counter_attribute(args.counter_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_counter_attribute(args.counter_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_counter_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_counter_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_counter_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_counter_stats(args.counter_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_counter_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_counter_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_counter_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_counter_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_counter_stats_ext(args.counter_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_counter_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_counter_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_counter_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_counter_stats_result()
        try:
            self._handler.sai_thrift_clear_counter_stats(args.counter_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_counter_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_debug_counter(self, seqid, iprot, oprot):
        args = sai_thrift_create_debug_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_debug_counter_result()
        try:
            result.success = self._handler.sai_thrift_create_debug_counter(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_debug_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_debug_counter(self, seqid, iprot, oprot):
        args = sai_thrift_remove_debug_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_debug_counter_result()
        try:
            self._handler.sai_thrift_remove_debug_counter(args.debug_counter_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_debug_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_debug_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_debug_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_debug_counter_attribute_result()
        try:
            self._handler.sai_thrift_set_debug_counter_attribute(args.debug_counter_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_debug_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_debug_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_debug_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_debug_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_debug_counter_attribute(args.debug_counter_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_debug_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_dtel(self, seqid, iprot, oprot):
        args = sai_thrift_create_dtel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_dtel_result()
        try:
            result.success = self._handler.sai_thrift_create_dtel(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_dtel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_dtel(self, seqid, iprot, oprot):
        args = sai_thrift_remove_dtel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_dtel_result()
        try:
            self._handler.sai_thrift_remove_dtel(args.dtel_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_dtel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_dtel_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_dtel_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_dtel_attribute_result()
        try:
            self._handler.sai_thrift_set_dtel_attribute(args.dtel_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_dtel_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_dtel_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_dtel_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_dtel_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_dtel_attribute(args.dtel_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_dtel_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_dtel_queue_report(self, seqid, iprot, oprot):
        args = sai_thrift_create_dtel_queue_report_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_dtel_queue_report_result()
        try:
            result.success = self._handler.sai_thrift_create_dtel_queue_report(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_dtel_queue_report", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_dtel_queue_report(self, seqid, iprot, oprot):
        args = sai_thrift_remove_dtel_queue_report_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_dtel_queue_report_result()
        try:
            self._handler.sai_thrift_remove_dtel_queue_report(args.dtel_queue_report_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_dtel_queue_report", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_dtel_queue_report_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_dtel_queue_report_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_dtel_queue_report_attribute_result()
        try:
            self._handler.sai_thrift_set_dtel_queue_report_attribute(args.dtel_queue_report_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_dtel_queue_report_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_dtel_queue_report_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_dtel_queue_report_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_dtel_queue_report_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_dtel_queue_report_attribute(args.dtel_queue_report_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_dtel_queue_report_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_dtel_int_session(self, seqid, iprot, oprot):
        args = sai_thrift_create_dtel_int_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_dtel_int_session_result()
        try:
            result.success = self._handler.sai_thrift_create_dtel_int_session(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_dtel_int_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_dtel_int_session(self, seqid, iprot, oprot):
        args = sai_thrift_remove_dtel_int_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_dtel_int_session_result()
        try:
            self._handler.sai_thrift_remove_dtel_int_session(args.dtel_int_session_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_dtel_int_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_dtel_int_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_dtel_int_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_dtel_int_session_attribute_result()
        try:
            self._handler.sai_thrift_set_dtel_int_session_attribute(args.dtel_int_session_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_dtel_int_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_dtel_int_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_dtel_int_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_dtel_int_session_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_dtel_int_session_attribute(args.dtel_int_session_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_dtel_int_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_dtel_report_session(self, seqid, iprot, oprot):
        args = sai_thrift_create_dtel_report_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_dtel_report_session_result()
        try:
            result.success = self._handler.sai_thrift_create_dtel_report_session(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_dtel_report_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_dtel_report_session(self, seqid, iprot, oprot):
        args = sai_thrift_remove_dtel_report_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_dtel_report_session_result()
        try:
            self._handler.sai_thrift_remove_dtel_report_session(args.dtel_report_session_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_dtel_report_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_dtel_report_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_dtel_report_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_dtel_report_session_attribute_result()
        try:
            self._handler.sai_thrift_set_dtel_report_session_attribute(args.dtel_report_session_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_dtel_report_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_dtel_report_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_dtel_report_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_dtel_report_session_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_dtel_report_session_attribute(args.dtel_report_session_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_dtel_report_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_dtel_event(self, seqid, iprot, oprot):
        args = sai_thrift_create_dtel_event_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_dtel_event_result()
        try:
            result.success = self._handler.sai_thrift_create_dtel_event(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_dtel_event", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_dtel_event(self, seqid, iprot, oprot):
        args = sai_thrift_remove_dtel_event_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_dtel_event_result()
        try:
            self._handler.sai_thrift_remove_dtel_event(args.dtel_event_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_dtel_event", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_dtel_event_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_dtel_event_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_dtel_event_attribute_result()
        try:
            self._handler.sai_thrift_set_dtel_event_attribute(args.dtel_event_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_dtel_event_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_dtel_event_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_dtel_event_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_dtel_event_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_dtel_event_attribute(args.dtel_event_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_dtel_event_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_fdb_entry_result()
        try:
            self._handler.sai_thrift_create_fdb_entry(args.fdb_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_fdb_entry_result()
        try:
            self._handler.sai_thrift_remove_fdb_entry(args.fdb_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_fdb_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_fdb_entry_attribute(args.fdb_entry, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_fdb_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_fdb_entry_attribute(args.fdb_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_flush_fdb_entries(self, seqid, iprot, oprot):
        args = sai_thrift_flush_fdb_entries_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_flush_fdb_entries_result()
        try:
            self._handler.sai_thrift_flush_fdb_entries(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_flush_fdb_entries", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_create_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_create_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_create_fdb_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_create_fdb_entry(args.fdb_entry, args.attr_count, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_create_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_remove_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_remove_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_remove_fdb_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_remove_fdb_entry(args.fdb_entry, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_remove_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_set_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_set_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_set_fdb_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_set_fdb_entry_attribute(args.fdb_entry, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_set_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_get_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_get_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_get_fdb_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_get_fdb_entry_attribute(args.fdb_entry, args.attr_count, args.attr_list, args.mode, args.object_statuses)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_get_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_generic_programmable(self, seqid, iprot, oprot):
        args = sai_thrift_create_generic_programmable_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_generic_programmable_result()
        try:
            result.success = self._handler.sai_thrift_create_generic_programmable(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_generic_programmable", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_generic_programmable(self, seqid, iprot, oprot):
        args = sai_thrift_remove_generic_programmable_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_generic_programmable_result()
        try:
            self._handler.sai_thrift_remove_generic_programmable(args.generic_programmable_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_generic_programmable", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_generic_programmable_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_generic_programmable_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_generic_programmable_attribute_result()
        try:
            self._handler.sai_thrift_set_generic_programmable_attribute(args.generic_programmable_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_generic_programmable_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_generic_programmable_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_generic_programmable_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_generic_programmable_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_generic_programmable_attribute(args.generic_programmable_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_generic_programmable_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_fine_grained_hash_field(self, seqid, iprot, oprot):
        args = sai_thrift_create_fine_grained_hash_field_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_fine_grained_hash_field_result()
        try:
            result.success = self._handler.sai_thrift_create_fine_grained_hash_field(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_fine_grained_hash_field", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_fine_grained_hash_field(self, seqid, iprot, oprot):
        args = sai_thrift_remove_fine_grained_hash_field_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_fine_grained_hash_field_result()
        try:
            self._handler.sai_thrift_remove_fine_grained_hash_field(args.fine_grained_hash_field_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_fine_grained_hash_field", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_fine_grained_hash_field_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_fine_grained_hash_field_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_fine_grained_hash_field_attribute_result()
        try:
            self._handler.sai_thrift_set_fine_grained_hash_field_attribute(args.fine_grained_hash_field_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_fine_grained_hash_field_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_fine_grained_hash_field_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_fine_grained_hash_field_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_fine_grained_hash_field_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_fine_grained_hash_field_attribute(args.fine_grained_hash_field_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_fine_grained_hash_field_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hash(self, seqid, iprot, oprot):
        args = sai_thrift_create_hash_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hash_result()
        try:
            result.success = self._handler.sai_thrift_create_hash(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hash", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hash(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hash_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hash_result()
        try:
            self._handler.sai_thrift_remove_hash(args.hash_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hash", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hash_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hash_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hash_attribute_result()
        try:
            self._handler.sai_thrift_set_hash_attribute(args.hash_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hash_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hash_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hash_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hash_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hash_attribute(args.hash_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hash_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hostif_trap_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_hostif_trap_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hostif_trap_group_result()
        try:
            result.success = self._handler.sai_thrift_create_hostif_trap_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hostif_trap_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hostif_trap_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hostif_trap_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hostif_trap_group_result()
        try:
            self._handler.sai_thrift_remove_hostif_trap_group(args.hostif_trap_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hostif_trap_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hostif_trap_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hostif_trap_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hostif_trap_group_attribute_result()
        try:
            self._handler.sai_thrift_set_hostif_trap_group_attribute(args.hostif_trap_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hostif_trap_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hostif_trap_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hostif_trap_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hostif_trap_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hostif_trap_group_attribute(args.hostif_trap_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hostif_trap_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hostif_trap(self, seqid, iprot, oprot):
        args = sai_thrift_create_hostif_trap_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hostif_trap_result()
        try:
            result.success = self._handler.sai_thrift_create_hostif_trap(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hostif_trap", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hostif_trap(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hostif_trap_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hostif_trap_result()
        try:
            self._handler.sai_thrift_remove_hostif_trap(args.hostif_trap_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hostif_trap", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hostif_trap_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hostif_trap_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hostif_trap_attribute_result()
        try:
            self._handler.sai_thrift_set_hostif_trap_attribute(args.hostif_trap_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hostif_trap_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hostif_trap_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hostif_trap_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hostif_trap_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hostif_trap_attribute(args.hostif_trap_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hostif_trap_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hostif_user_defined_trap(self, seqid, iprot, oprot):
        args = sai_thrift_create_hostif_user_defined_trap_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hostif_user_defined_trap_result()
        try:
            result.success = self._handler.sai_thrift_create_hostif_user_defined_trap(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hostif_user_defined_trap", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hostif_user_defined_trap(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hostif_user_defined_trap_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hostif_user_defined_trap_result()
        try:
            self._handler.sai_thrift_remove_hostif_user_defined_trap(args.hostif_user_defined_trap_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hostif_user_defined_trap", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hostif_user_defined_trap_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hostif_user_defined_trap_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hostif_user_defined_trap_attribute_result()
        try:
            self._handler.sai_thrift_set_hostif_user_defined_trap_attribute(args.hostif_user_defined_trap_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hostif_user_defined_trap_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hostif_user_defined_trap_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hostif_user_defined_trap_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hostif_user_defined_trap_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hostif_user_defined_trap_attribute(args.hostif_user_defined_trap_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hostif_user_defined_trap_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hostif(self, seqid, iprot, oprot):
        args = sai_thrift_create_hostif_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hostif_result()
        try:
            result.success = self._handler.sai_thrift_create_hostif(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hostif", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hostif(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hostif_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hostif_result()
        try:
            self._handler.sai_thrift_remove_hostif(args.hostif_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hostif", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hostif_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hostif_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hostif_attribute_result()
        try:
            self._handler.sai_thrift_set_hostif_attribute(args.hostif_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hostif_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hostif_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hostif_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hostif_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hostif_attribute(args.hostif_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hostif_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_hostif_table_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_hostif_table_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_hostif_table_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_hostif_table_entry(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_hostif_table_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_hostif_table_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_hostif_table_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_hostif_table_entry_result()
        try:
            self._handler.sai_thrift_remove_hostif_table_entry(args.hostif_table_entry_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_hostif_table_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_hostif_table_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_hostif_table_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_hostif_table_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_hostif_table_entry_attribute(args.hostif_table_entry_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_hostif_table_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_hostif_table_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_hostif_table_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_hostif_table_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_hostif_table_entry_attribute(args.hostif_table_entry_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_hostif_table_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_recv_hostif_packet(self, seqid, iprot, oprot):
        args = sai_thrift_recv_hostif_packet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_recv_hostif_packet_result()
        try:
            result.success = self._handler.sai_thrift_recv_hostif_packet(args.hostif_oid, args.buffer_size, args.buffer, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_recv_hostif_packet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_send_hostif_packet(self, seqid, iprot, oprot):
        args = sai_thrift_send_hostif_packet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_send_hostif_packet_result()
        try:
            self._handler.sai_thrift_send_hostif_packet(args.hostif_oid, args.buffer_size, args.buffer, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_send_hostif_packet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_allocate_hostif_packet(self, seqid, iprot, oprot):
        args = sai_thrift_allocate_hostif_packet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_allocate_hostif_packet_result()
        try:
            result.success = self._handler.sai_thrift_allocate_hostif_packet(args.hostif_oid, args.buffer_size, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_allocate_hostif_packet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_free_hostif_packet(self, seqid, iprot, oprot):
        args = sai_thrift_free_hostif_packet_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_free_hostif_packet_result()
        try:
            result.success = self._handler.sai_thrift_free_hostif_packet(args.hostif_oid, args.buffer)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_free_hostif_packet", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ipmc_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_ipmc_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ipmc_entry_result()
        try:
            self._handler.sai_thrift_create_ipmc_entry(args.ipmc_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ipmc_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ipmc_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ipmc_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ipmc_entry_result()
        try:
            self._handler.sai_thrift_remove_ipmc_entry(args.ipmc_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ipmc_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ipmc_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ipmc_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ipmc_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_ipmc_entry_attribute(args.ipmc_entry, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ipmc_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipmc_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipmc_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipmc_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ipmc_entry_attribute(args.ipmc_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipmc_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ipmc_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_ipmc_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ipmc_group_result()
        try:
            result.success = self._handler.sai_thrift_create_ipmc_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ipmc_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ipmc_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ipmc_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ipmc_group_result()
        try:
            self._handler.sai_thrift_remove_ipmc_group(args.ipmc_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ipmc_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ipmc_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ipmc_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ipmc_group_attribute_result()
        try:
            self._handler.sai_thrift_set_ipmc_group_attribute(args.ipmc_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ipmc_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipmc_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipmc_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipmc_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ipmc_group_attribute(args.ipmc_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipmc_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ipmc_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_ipmc_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ipmc_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_ipmc_group_member(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ipmc_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ipmc_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ipmc_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ipmc_group_member_result()
        try:
            self._handler.sai_thrift_remove_ipmc_group_member(args.ipmc_group_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ipmc_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ipmc_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ipmc_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ipmc_group_member_attribute_result()
        try:
            self._handler.sai_thrift_set_ipmc_group_member_attribute(args.ipmc_group_member_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ipmc_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipmc_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipmc_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipmc_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ipmc_group_member_attribute(args.ipmc_group_member_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipmc_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ipsec(self, seqid, iprot, oprot):
        args = sai_thrift_create_ipsec_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ipsec_result()
        try:
            result.success = self._handler.sai_thrift_create_ipsec(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ipsec", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ipsec(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ipsec_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ipsec_result()
        try:
            self._handler.sai_thrift_remove_ipsec(args.ipsec_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ipsec", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ipsec_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ipsec_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ipsec_attribute_result()
        try:
            self._handler.sai_thrift_set_ipsec_attribute(args.ipsec_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ipsec_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipsec_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipsec_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipsec_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ipsec_attribute(args.ipsec_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipsec_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ipsec_port(self, seqid, iprot, oprot):
        args = sai_thrift_create_ipsec_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ipsec_port_result()
        try:
            result.success = self._handler.sai_thrift_create_ipsec_port(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ipsec_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ipsec_port(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ipsec_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ipsec_port_result()
        try:
            self._handler.sai_thrift_remove_ipsec_port(args.ipsec_port_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ipsec_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ipsec_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ipsec_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ipsec_port_attribute_result()
        try:
            self._handler.sai_thrift_set_ipsec_port_attribute(args.ipsec_port_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ipsec_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipsec_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipsec_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipsec_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ipsec_port_attribute(args.ipsec_port_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipsec_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipsec_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipsec_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipsec_port_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_ipsec_port_stats(args.ipsec_port_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipsec_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipsec_port_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipsec_port_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipsec_port_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_ipsec_port_stats_ext(args.ipsec_port_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipsec_port_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_ipsec_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_ipsec_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_ipsec_port_stats_result()
        try:
            self._handler.sai_thrift_clear_ipsec_port_stats(args.ipsec_port_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_ipsec_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_ipsec_sa(self, seqid, iprot, oprot):
        args = sai_thrift_create_ipsec_sa_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_ipsec_sa_result()
        try:
            result.success = self._handler.sai_thrift_create_ipsec_sa(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_ipsec_sa", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_ipsec_sa(self, seqid, iprot, oprot):
        args = sai_thrift_remove_ipsec_sa_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_ipsec_sa_result()
        try:
            self._handler.sai_thrift_remove_ipsec_sa(args.ipsec_sa_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_ipsec_sa", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_ipsec_sa_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_ipsec_sa_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_ipsec_sa_attribute_result()
        try:
            self._handler.sai_thrift_set_ipsec_sa_attribute(args.ipsec_sa_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_ipsec_sa_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipsec_sa_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipsec_sa_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipsec_sa_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_ipsec_sa_attribute(args.ipsec_sa_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipsec_sa_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipsec_sa_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipsec_sa_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipsec_sa_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_ipsec_sa_stats(args.ipsec_sa_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipsec_sa_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_ipsec_sa_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_ipsec_sa_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_ipsec_sa_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_ipsec_sa_stats_ext(args.ipsec_sa_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_ipsec_sa_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_ipsec_sa_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_ipsec_sa_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_ipsec_sa_stats_result()
        try:
            self._handler.sai_thrift_clear_ipsec_sa_stats(args.ipsec_sa_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_ipsec_sa_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_isolation_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_isolation_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_isolation_group_result()
        try:
            result.success = self._handler.sai_thrift_create_isolation_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_isolation_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_isolation_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_isolation_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_isolation_group_result()
        try:
            self._handler.sai_thrift_remove_isolation_group(args.isolation_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_isolation_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_isolation_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_isolation_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_isolation_group_attribute_result()
        try:
            self._handler.sai_thrift_set_isolation_group_attribute(args.isolation_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_isolation_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_isolation_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_isolation_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_isolation_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_isolation_group_attribute(args.isolation_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_isolation_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_isolation_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_isolation_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_isolation_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_isolation_group_member(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_isolation_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_isolation_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_isolation_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_isolation_group_member_result()
        try:
            self._handler.sai_thrift_remove_isolation_group_member(args.isolation_group_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_isolation_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_isolation_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_isolation_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_isolation_group_member_attribute_result()
        try:
            self._handler.sai_thrift_set_isolation_group_member_attribute(args.isolation_group_member_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_isolation_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_isolation_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_isolation_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_isolation_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_isolation_group_member_attribute(args.isolation_group_member_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_isolation_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_l2mc_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_l2mc_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_l2mc_entry_result()
        try:
            self._handler.sai_thrift_create_l2mc_entry(args.l2mc_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_l2mc_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_l2mc_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_l2mc_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_l2mc_entry_result()
        try:
            self._handler.sai_thrift_remove_l2mc_entry(args.l2mc_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_l2mc_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_l2mc_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_l2mc_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_l2mc_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_l2mc_entry_attribute(args.l2mc_entry, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_l2mc_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_l2mc_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_l2mc_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_l2mc_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_l2mc_entry_attribute(args.l2mc_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_l2mc_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_l2mc_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_l2mc_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_l2mc_group_result()
        try:
            result.success = self._handler.sai_thrift_create_l2mc_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_l2mc_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_l2mc_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_l2mc_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_l2mc_group_result()
        try:
            self._handler.sai_thrift_remove_l2mc_group(args.l2mc_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_l2mc_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_l2mc_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_l2mc_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_l2mc_group_attribute_result()
        try:
            self._handler.sai_thrift_set_l2mc_group_attribute(args.l2mc_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_l2mc_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_l2mc_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_l2mc_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_l2mc_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_l2mc_group_attribute(args.l2mc_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_l2mc_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_l2mc_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_l2mc_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_l2mc_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_l2mc_group_member(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_l2mc_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_l2mc_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_l2mc_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_l2mc_group_member_result()
        try:
            self._handler.sai_thrift_remove_l2mc_group_member(args.l2mc_group_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_l2mc_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_l2mc_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_l2mc_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_l2mc_group_member_attribute_result()
        try:
            self._handler.sai_thrift_set_l2mc_group_member_attribute(args.l2mc_group_member_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_l2mc_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_l2mc_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_l2mc_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_l2mc_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_l2mc_group_member_attribute(args.l2mc_group_member_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_l2mc_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_lag(self, seqid, iprot, oprot):
        args = sai_thrift_create_lag_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_lag_result()
        try:
            result.success = self._handler.sai_thrift_create_lag(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_lag", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_lag(self, seqid, iprot, oprot):
        args = sai_thrift_remove_lag_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_lag_result()
        try:
            self._handler.sai_thrift_remove_lag(args.lag_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_lag", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_lag_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_lag_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_lag_attribute_result()
        try:
            self._handler.sai_thrift_set_lag_attribute(args.lag_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_lag_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_lag_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_lag_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_lag_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_lag_attribute(args.lag_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_lag_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_lag_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_lag_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_lag_member_result()
        try:
            result.success = self._handler.sai_thrift_create_lag_member(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_lag_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_lag_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_lag_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_lag_member_result()
        try:
            self._handler.sai_thrift_remove_lag_member(args.lag_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_lag_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_lag_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_lag_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_lag_member_attribute_result()
        try:
            self._handler.sai_thrift_set_lag_member_attribute(args.lag_member_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_lag_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_lag_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_lag_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_lag_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_lag_member_attribute(args.lag_member_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_lag_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_macsec(self, seqid, iprot, oprot):
        args = sai_thrift_create_macsec_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_macsec_result()
        try:
            result.success = self._handler.sai_thrift_create_macsec(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_macsec", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_macsec(self, seqid, iprot, oprot):
        args = sai_thrift_remove_macsec_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_macsec_result()
        try:
            self._handler.sai_thrift_remove_macsec(args.macsec_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_macsec", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_macsec_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_macsec_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_macsec_attribute_result()
        try:
            self._handler.sai_thrift_set_macsec_attribute(args.macsec_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_macsec_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_attribute(args.macsec_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_macsec_port(self, seqid, iprot, oprot):
        args = sai_thrift_create_macsec_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_macsec_port_result()
        try:
            result.success = self._handler.sai_thrift_create_macsec_port(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_macsec_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_macsec_port(self, seqid, iprot, oprot):
        args = sai_thrift_remove_macsec_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_macsec_port_result()
        try:
            self._handler.sai_thrift_remove_macsec_port(args.macsec_port_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_macsec_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_macsec_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_macsec_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_macsec_port_attribute_result()
        try:
            self._handler.sai_thrift_set_macsec_port_attribute(args.macsec_port_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_macsec_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_port_attribute(args.macsec_port_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_port_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_port_stats(args.macsec_port_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_port_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_port_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_port_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_port_stats_ext(args.macsec_port_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_port_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_macsec_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_macsec_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_macsec_port_stats_result()
        try:
            self._handler.sai_thrift_clear_macsec_port_stats(args.macsec_port_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_macsec_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_macsec_flow(self, seqid, iprot, oprot):
        args = sai_thrift_create_macsec_flow_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_macsec_flow_result()
        try:
            result.success = self._handler.sai_thrift_create_macsec_flow(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_macsec_flow", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_macsec_flow(self, seqid, iprot, oprot):
        args = sai_thrift_remove_macsec_flow_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_macsec_flow_result()
        try:
            self._handler.sai_thrift_remove_macsec_flow(args.macsec_flow_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_macsec_flow", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_macsec_flow_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_macsec_flow_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_macsec_flow_attribute_result()
        try:
            self._handler.sai_thrift_set_macsec_flow_attribute(args.macsec_flow_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_macsec_flow_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_flow_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_flow_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_flow_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_flow_attribute(args.macsec_flow_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_flow_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_flow_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_flow_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_flow_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_flow_stats(args.macsec_flow_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_flow_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_flow_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_flow_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_flow_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_flow_stats_ext(args.macsec_flow_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_flow_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_macsec_flow_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_macsec_flow_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_macsec_flow_stats_result()
        try:
            self._handler.sai_thrift_clear_macsec_flow_stats(args.macsec_flow_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_macsec_flow_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_macsec_sc(self, seqid, iprot, oprot):
        args = sai_thrift_create_macsec_sc_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_macsec_sc_result()
        try:
            result.success = self._handler.sai_thrift_create_macsec_sc(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_macsec_sc", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_macsec_sc(self, seqid, iprot, oprot):
        args = sai_thrift_remove_macsec_sc_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_macsec_sc_result()
        try:
            self._handler.sai_thrift_remove_macsec_sc(args.macsec_sc_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_macsec_sc", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_macsec_sc_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_macsec_sc_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_macsec_sc_attribute_result()
        try:
            self._handler.sai_thrift_set_macsec_sc_attribute(args.macsec_sc_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_macsec_sc_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_sc_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_sc_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_sc_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_sc_attribute(args.macsec_sc_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_sc_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_sc_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_sc_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_sc_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_sc_stats(args.macsec_sc_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_sc_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_sc_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_sc_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_sc_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_sc_stats_ext(args.macsec_sc_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_sc_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_macsec_sc_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_macsec_sc_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_macsec_sc_stats_result()
        try:
            self._handler.sai_thrift_clear_macsec_sc_stats(args.macsec_sc_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_macsec_sc_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_macsec_sa(self, seqid, iprot, oprot):
        args = sai_thrift_create_macsec_sa_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_macsec_sa_result()
        try:
            result.success = self._handler.sai_thrift_create_macsec_sa(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_macsec_sa", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_macsec_sa(self, seqid, iprot, oprot):
        args = sai_thrift_remove_macsec_sa_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_macsec_sa_result()
        try:
            self._handler.sai_thrift_remove_macsec_sa(args.macsec_sa_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_macsec_sa", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_macsec_sa_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_macsec_sa_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_macsec_sa_attribute_result()
        try:
            self._handler.sai_thrift_set_macsec_sa_attribute(args.macsec_sa_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_macsec_sa_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_sa_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_sa_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_sa_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_sa_attribute(args.macsec_sa_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_sa_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_sa_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_sa_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_sa_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_sa_stats(args.macsec_sa_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_sa_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_macsec_sa_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_macsec_sa_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_macsec_sa_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_macsec_sa_stats_ext(args.macsec_sa_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_macsec_sa_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_macsec_sa_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_macsec_sa_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_macsec_sa_stats_result()
        try:
            self._handler.sai_thrift_clear_macsec_sa_stats(args.macsec_sa_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_macsec_sa_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_mcast_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_mcast_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_mcast_fdb_entry_result()
        try:
            self._handler.sai_thrift_create_mcast_fdb_entry(args.mcast_fdb_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_mcast_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_mcast_fdb_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_mcast_fdb_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_mcast_fdb_entry_result()
        try:
            self._handler.sai_thrift_remove_mcast_fdb_entry(args.mcast_fdb_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_mcast_fdb_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_mcast_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_mcast_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_mcast_fdb_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_mcast_fdb_entry_attribute(args.mcast_fdb_entry, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_mcast_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_mcast_fdb_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_mcast_fdb_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_mcast_fdb_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_mcast_fdb_entry_attribute(args.mcast_fdb_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_mcast_fdb_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_mirror_session(self, seqid, iprot, oprot):
        args = sai_thrift_create_mirror_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_mirror_session_result()
        try:
            result.success = self._handler.sai_thrift_create_mirror_session(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_mirror_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_mirror_session(self, seqid, iprot, oprot):
        args = sai_thrift_remove_mirror_session_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_mirror_session_result()
        try:
            self._handler.sai_thrift_remove_mirror_session(args.mirror_session_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_mirror_session", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_mirror_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_mirror_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_mirror_session_attribute_result()
        try:
            self._handler.sai_thrift_set_mirror_session_attribute(args.mirror_session_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_mirror_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_mirror_session_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_mirror_session_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_mirror_session_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_mirror_session_attribute(args.mirror_session_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_mirror_session_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_inseg_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_inseg_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_inseg_entry_result()
        try:
            self._handler.sai_thrift_create_inseg_entry(args.inseg_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_inseg_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_inseg_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_inseg_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_inseg_entry_result()
        try:
            self._handler.sai_thrift_remove_inseg_entry(args.inseg_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_inseg_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_inseg_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_inseg_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_inseg_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_inseg_entry_attribute(args.inseg_entry, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_inseg_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_inseg_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_inseg_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_inseg_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_inseg_entry_attribute(args.inseg_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_inseg_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_create_inseg_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_create_inseg_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_create_inseg_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_create_inseg_entry(args.inseg_entry, args.attr_count, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_create_inseg_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_remove_inseg_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_remove_inseg_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_remove_inseg_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_remove_inseg_entry(args.inseg_entry, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_remove_inseg_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_set_inseg_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_set_inseg_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_set_inseg_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_set_inseg_entry_attribute(args.inseg_entry, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_set_inseg_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_get_inseg_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_get_inseg_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_get_inseg_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_get_inseg_entry_attribute(args.inseg_entry, args.attr_count, args.attr_list, args.mode, args.object_statuses)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_get_inseg_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_my_mac(self, seqid, iprot, oprot):
        args = sai_thrift_create_my_mac_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_my_mac_result()
        try:
            result.success = self._handler.sai_thrift_create_my_mac(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_my_mac", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_my_mac(self, seqid, iprot, oprot):
        args = sai_thrift_remove_my_mac_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_my_mac_result()
        try:
            self._handler.sai_thrift_remove_my_mac(args.my_mac_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_my_mac", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_my_mac_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_my_mac_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_my_mac_attribute_result()
        try:
            self._handler.sai_thrift_set_my_mac_attribute(args.my_mac_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_my_mac_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_my_mac_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_my_mac_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_my_mac_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_my_mac_attribute(args.my_mac_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_my_mac_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_nat_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_nat_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_nat_entry_result()
        try:
            self._handler.sai_thrift_create_nat_entry(args.nat_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_nat_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_nat_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_nat_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_nat_entry_result()
        try:
            self._handler.sai_thrift_remove_nat_entry(args.nat_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_nat_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_nat_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_nat_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_nat_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_nat_entry_attribute(args.nat_entry, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_nat_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_nat_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_nat_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_nat_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_nat_entry_attribute(args.nat_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_nat_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_create_nat_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_create_nat_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_create_nat_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_create_nat_entry(args.nat_entry, args.attr_count, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_create_nat_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_remove_nat_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_remove_nat_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_remove_nat_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_remove_nat_entry(args.nat_entry, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_remove_nat_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_set_nat_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_set_nat_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_set_nat_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_set_nat_entry_attribute(args.nat_entry, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_set_nat_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_get_nat_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_get_nat_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_get_nat_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_get_nat_entry_attribute(args.nat_entry, args.attr_count, args.attr_list, args.mode, args.object_statuses)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_get_nat_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_nat_zone_counter(self, seqid, iprot, oprot):
        args = sai_thrift_create_nat_zone_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_nat_zone_counter_result()
        try:
            result.success = self._handler.sai_thrift_create_nat_zone_counter(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_nat_zone_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_nat_zone_counter(self, seqid, iprot, oprot):
        args = sai_thrift_remove_nat_zone_counter_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_nat_zone_counter_result()
        try:
            self._handler.sai_thrift_remove_nat_zone_counter(args.nat_zone_counter_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_nat_zone_counter", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_nat_zone_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_nat_zone_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_nat_zone_counter_attribute_result()
        try:
            self._handler.sai_thrift_set_nat_zone_counter_attribute(args.nat_zone_counter_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_nat_zone_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_nat_zone_counter_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_nat_zone_counter_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_nat_zone_counter_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_nat_zone_counter_attribute(args.nat_zone_counter_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_nat_zone_counter_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_neighbor_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_neighbor_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_neighbor_entry_result()
        try:
            self._handler.sai_thrift_create_neighbor_entry(args.neighbor_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_neighbor_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_neighbor_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_neighbor_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_neighbor_entry_result()
        try:
            self._handler.sai_thrift_remove_neighbor_entry(args.neighbor_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_neighbor_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_neighbor_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_neighbor_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_neighbor_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_neighbor_entry_attribute(args.neighbor_entry, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_neighbor_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_neighbor_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_neighbor_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_neighbor_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_neighbor_entry_attribute(args.neighbor_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_neighbor_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_all_neighbor_entries(self, seqid, iprot, oprot):
        args = sai_thrift_remove_all_neighbor_entries_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_all_neighbor_entries_result()
        try:
            self._handler.sai_thrift_remove_all_neighbor_entries()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_all_neighbor_entries", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_create_neighbor_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_create_neighbor_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_create_neighbor_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_create_neighbor_entry(args.neighbor_entry, args.attr_count, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_create_neighbor_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_remove_neighbor_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_remove_neighbor_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_remove_neighbor_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_remove_neighbor_entry(args.neighbor_entry, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_remove_neighbor_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_set_neighbor_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_set_neighbor_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_set_neighbor_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_set_neighbor_entry_attribute(args.neighbor_entry, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_set_neighbor_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_get_neighbor_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_get_neighbor_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_get_neighbor_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_get_neighbor_entry_attribute(args.neighbor_entry, args.attr_count, args.attr_list, args.mode, args.object_statuses)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_get_neighbor_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_next_hop(self, seqid, iprot, oprot):
        args = sai_thrift_create_next_hop_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_next_hop_result()
        try:
            result.success = self._handler.sai_thrift_create_next_hop(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_next_hop", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_next_hop(self, seqid, iprot, oprot):
        args = sai_thrift_remove_next_hop_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_next_hop_result()
        try:
            self._handler.sai_thrift_remove_next_hop(args.next_hop_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_next_hop", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_next_hop_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_next_hop_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_next_hop_attribute_result()
        try:
            self._handler.sai_thrift_set_next_hop_attribute(args.next_hop_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_next_hop_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_next_hop_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_next_hop_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_next_hop_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_next_hop_attribute(args.next_hop_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_next_hop_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_next_hop_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_next_hop_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_next_hop_group_result()
        try:
            result.success = self._handler.sai_thrift_create_next_hop_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_next_hop_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_next_hop_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_next_hop_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_next_hop_group_result()
        try:
            self._handler.sai_thrift_remove_next_hop_group(args.next_hop_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_next_hop_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_next_hop_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_next_hop_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_next_hop_group_attribute_result()
        try:
            self._handler.sai_thrift_set_next_hop_group_attribute(args.next_hop_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_next_hop_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_next_hop_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_next_hop_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_next_hop_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_next_hop_group_attribute(args.next_hop_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_next_hop_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_next_hop_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_next_hop_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_next_hop_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_next_hop_group_member(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_next_hop_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_next_hop_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_next_hop_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_next_hop_group_member_result()
        try:
            self._handler.sai_thrift_remove_next_hop_group_member(args.next_hop_group_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_next_hop_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_next_hop_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_next_hop_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_next_hop_group_member_attribute_result()
        try:
            self._handler.sai_thrift_set_next_hop_group_member_attribute(args.next_hop_group_member_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_next_hop_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_next_hop_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_next_hop_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_next_hop_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_next_hop_group_member_attribute(args.next_hop_group_member_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_next_hop_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_next_hop_group_map(self, seqid, iprot, oprot):
        args = sai_thrift_create_next_hop_group_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_next_hop_group_map_result()
        try:
            result.success = self._handler.sai_thrift_create_next_hop_group_map(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_next_hop_group_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_next_hop_group_map(self, seqid, iprot, oprot):
        args = sai_thrift_remove_next_hop_group_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_next_hop_group_map_result()
        try:
            self._handler.sai_thrift_remove_next_hop_group_map(args.next_hop_group_map_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_next_hop_group_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_next_hop_group_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_next_hop_group_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_next_hop_group_map_attribute_result()
        try:
            self._handler.sai_thrift_set_next_hop_group_map_attribute(args.next_hop_group_map_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_next_hop_group_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_next_hop_group_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_next_hop_group_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_next_hop_group_map_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_next_hop_group_map_attribute(args.next_hop_group_map_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_next_hop_group_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_policer(self, seqid, iprot, oprot):
        args = sai_thrift_create_policer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_policer_result()
        try:
            result.success = self._handler.sai_thrift_create_policer(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_policer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_policer(self, seqid, iprot, oprot):
        args = sai_thrift_remove_policer_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_policer_result()
        try:
            self._handler.sai_thrift_remove_policer(args.policer_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_policer", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_policer_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_policer_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_policer_attribute_result()
        try:
            self._handler.sai_thrift_set_policer_attribute(args.policer_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_policer_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_policer_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_policer_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_policer_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_policer_attribute(args.policer_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_policer_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_policer_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_policer_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_policer_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_policer_stats(args.policer_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_policer_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_policer_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_policer_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_policer_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_policer_stats_ext(args.policer_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_policer_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_policer_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_policer_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_policer_stats_result()
        try:
            self._handler.sai_thrift_clear_policer_stats(args.policer_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_policer_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_port(self, seqid, iprot, oprot):
        args = sai_thrift_create_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_port_result()
        try:
            result.success = self._handler.sai_thrift_create_port(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_port(self, seqid, iprot, oprot):
        args = sai_thrift_remove_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_port_result()
        try:
            self._handler.sai_thrift_remove_port(args.port_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_port_attribute_result()
        try:
            self._handler.sai_thrift_set_port_attribute(args.port_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_port_attribute(args.port_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_port_stats(args.port_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_port_stats_ext(args.port_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_port_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_port_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_port_stats_result()
        try:
            self._handler.sai_thrift_clear_port_stats(args.port_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_port_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_port_all_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_port_all_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_port_all_stats_result()
        try:
            self._handler.sai_thrift_clear_port_all_stats(args.port_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_port_all_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_port_pool(self, seqid, iprot, oprot):
        args = sai_thrift_create_port_pool_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_port_pool_result()
        try:
            result.success = self._handler.sai_thrift_create_port_pool(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_port_pool", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_port_pool(self, seqid, iprot, oprot):
        args = sai_thrift_remove_port_pool_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_port_pool_result()
        try:
            self._handler.sai_thrift_remove_port_pool(args.port_pool_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_port_pool", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_port_pool_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_port_pool_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_port_pool_attribute_result()
        try:
            self._handler.sai_thrift_set_port_pool_attribute(args.port_pool_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_port_pool_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_pool_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_pool_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_pool_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_port_pool_attribute(args.port_pool_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_pool_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_pool_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_pool_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_pool_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_port_pool_stats(args.port_pool_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_pool_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_pool_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_pool_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_pool_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_port_pool_stats_ext(args.port_pool_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_pool_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_port_pool_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_port_pool_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_port_pool_stats_result()
        try:
            self._handler.sai_thrift_clear_port_pool_stats(args.port_pool_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_port_pool_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_port_serdes(self, seqid, iprot, oprot):
        args = sai_thrift_create_port_serdes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_port_serdes_result()
        try:
            result.success = self._handler.sai_thrift_create_port_serdes(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_port_serdes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_port_serdes(self, seqid, iprot, oprot):
        args = sai_thrift_remove_port_serdes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_port_serdes_result()
        try:
            self._handler.sai_thrift_remove_port_serdes(args.port_serdes_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_port_serdes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_port_serdes_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_port_serdes_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_port_serdes_attribute_result()
        try:
            self._handler.sai_thrift_set_port_serdes_attribute(args.port_serdes_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_port_serdes_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_serdes_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_serdes_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_serdes_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_port_serdes_attribute(args.port_serdes_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_serdes_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_port_connector(self, seqid, iprot, oprot):
        args = sai_thrift_create_port_connector_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_port_connector_result()
        try:
            result.success = self._handler.sai_thrift_create_port_connector(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_port_connector", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_port_connector(self, seqid, iprot, oprot):
        args = sai_thrift_remove_port_connector_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_port_connector_result()
        try:
            self._handler.sai_thrift_remove_port_connector(args.port_connector_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_port_connector", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_port_connector_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_port_connector_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_port_connector_attribute_result()
        try:
            self._handler.sai_thrift_set_port_connector_attribute(args.port_connector_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_port_connector_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_port_connector_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_port_connector_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_port_connector_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_port_connector_attribute(args.port_connector_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_port_connector_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_qos_map(self, seqid, iprot, oprot):
        args = sai_thrift_create_qos_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_qos_map_result()
        try:
            result.success = self._handler.sai_thrift_create_qos_map(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_qos_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_qos_map(self, seqid, iprot, oprot):
        args = sai_thrift_remove_qos_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_qos_map_result()
        try:
            self._handler.sai_thrift_remove_qos_map(args.qos_map_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_qos_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_qos_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_qos_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_qos_map_attribute_result()
        try:
            self._handler.sai_thrift_set_qos_map_attribute(args.qos_map_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_qos_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_qos_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_qos_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_qos_map_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_qos_map_attribute(args.qos_map_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_qos_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_queue(self, seqid, iprot, oprot):
        args = sai_thrift_create_queue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_queue_result()
        try:
            result.success = self._handler.sai_thrift_create_queue(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_queue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_queue(self, seqid, iprot, oprot):
        args = sai_thrift_remove_queue_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_queue_result()
        try:
            self._handler.sai_thrift_remove_queue(args.queue_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_queue", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_queue_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_queue_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_queue_attribute_result()
        try:
            self._handler.sai_thrift_set_queue_attribute(args.queue_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_queue_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_queue_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_queue_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_queue_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_queue_attribute(args.queue_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_queue_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_queue_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_queue_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_queue_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_queue_stats(args.queue_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_queue_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_queue_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_queue_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_queue_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_queue_stats_ext(args.queue_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_queue_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_queue_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_queue_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_queue_stats_result()
        try:
            self._handler.sai_thrift_clear_queue_stats(args.queue_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_queue_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_route_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_route_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_route_entry_result()
        try:
            self._handler.sai_thrift_create_route_entry(args.route_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_route_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_route_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_route_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_route_entry_result()
        try:
            self._handler.sai_thrift_remove_route_entry(args.route_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_route_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_route_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_route_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_route_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_route_entry_attribute(args.route_entry, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_route_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_route_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_route_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_route_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_route_entry_attribute(args.route_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_route_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_create_route_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_create_route_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_create_route_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_create_route_entry(args.route_entry, args.attr_count, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_create_route_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_remove_route_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_remove_route_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_remove_route_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_remove_route_entry(args.route_entry, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_remove_route_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_set_route_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_set_route_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_set_route_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_set_route_entry_attribute(args.route_entry, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_set_route_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_get_route_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_get_route_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_get_route_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_get_route_entry_attribute(args.route_entry, args.attr_count, args.attr_list, args.mode, args.object_statuses)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_get_route_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_router_interface(self, seqid, iprot, oprot):
        args = sai_thrift_create_router_interface_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_router_interface_result()
        try:
            result.success = self._handler.sai_thrift_create_router_interface(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_router_interface", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_router_interface(self, seqid, iprot, oprot):
        args = sai_thrift_remove_router_interface_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_router_interface_result()
        try:
            self._handler.sai_thrift_remove_router_interface(args.router_interface_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_router_interface", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_router_interface_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_router_interface_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_router_interface_attribute_result()
        try:
            self._handler.sai_thrift_set_router_interface_attribute(args.router_interface_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_router_interface_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_router_interface_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_router_interface_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_router_interface_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_router_interface_attribute(args.router_interface_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_router_interface_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_router_interface_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_router_interface_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_router_interface_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_router_interface_stats(args.router_interface_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_router_interface_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_router_interface_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_router_interface_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_router_interface_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_router_interface_stats_ext(args.router_interface_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_router_interface_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_router_interface_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_router_interface_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_router_interface_stats_result()
        try:
            self._handler.sai_thrift_clear_router_interface_stats(args.router_interface_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_router_interface_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_rpf_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_rpf_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_rpf_group_result()
        try:
            result.success = self._handler.sai_thrift_create_rpf_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_rpf_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_rpf_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_rpf_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_rpf_group_result()
        try:
            self._handler.sai_thrift_remove_rpf_group(args.rpf_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_rpf_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_rpf_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_rpf_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_rpf_group_attribute_result()
        try:
            self._handler.sai_thrift_set_rpf_group_attribute(args.rpf_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_rpf_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_rpf_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_rpf_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_rpf_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_rpf_group_attribute(args.rpf_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_rpf_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_rpf_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_rpf_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_rpf_group_member_result()
        try:
            result.success = self._handler.sai_thrift_create_rpf_group_member(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_rpf_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_rpf_group_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_rpf_group_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_rpf_group_member_result()
        try:
            self._handler.sai_thrift_remove_rpf_group_member(args.rpf_group_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_rpf_group_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_rpf_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_rpf_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_rpf_group_member_attribute_result()
        try:
            self._handler.sai_thrift_set_rpf_group_member_attribute(args.rpf_group_member_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_rpf_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_rpf_group_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_rpf_group_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_rpf_group_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_rpf_group_member_attribute(args.rpf_group_member_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_rpf_group_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_samplepacket(self, seqid, iprot, oprot):
        args = sai_thrift_create_samplepacket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_samplepacket_result()
        try:
            result.success = self._handler.sai_thrift_create_samplepacket(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_samplepacket", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_samplepacket(self, seqid, iprot, oprot):
        args = sai_thrift_remove_samplepacket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_samplepacket_result()
        try:
            self._handler.sai_thrift_remove_samplepacket(args.samplepacket_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_samplepacket", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_samplepacket_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_samplepacket_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_samplepacket_attribute_result()
        try:
            self._handler.sai_thrift_set_samplepacket_attribute(args.samplepacket_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_samplepacket_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_samplepacket_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_samplepacket_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_samplepacket_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_samplepacket_attribute(args.samplepacket_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_samplepacket_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_scheduler(self, seqid, iprot, oprot):
        args = sai_thrift_create_scheduler_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_scheduler_result()
        try:
            result.success = self._handler.sai_thrift_create_scheduler(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_scheduler", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_scheduler(self, seqid, iprot, oprot):
        args = sai_thrift_remove_scheduler_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_scheduler_result()
        try:
            self._handler.sai_thrift_remove_scheduler(args.scheduler_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_scheduler", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_scheduler_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_scheduler_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_scheduler_attribute_result()
        try:
            self._handler.sai_thrift_set_scheduler_attribute(args.scheduler_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_scheduler_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_scheduler_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_scheduler_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_scheduler_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_scheduler_attribute(args.scheduler_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_scheduler_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_scheduler_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_scheduler_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_scheduler_group_result()
        try:
            result.success = self._handler.sai_thrift_create_scheduler_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_scheduler_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_scheduler_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_scheduler_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_scheduler_group_result()
        try:
            self._handler.sai_thrift_remove_scheduler_group(args.scheduler_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_scheduler_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_scheduler_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_scheduler_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_scheduler_group_attribute_result()
        try:
            self._handler.sai_thrift_set_scheduler_group_attribute(args.scheduler_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_scheduler_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_scheduler_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_scheduler_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_scheduler_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_scheduler_group_attribute(args.scheduler_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_scheduler_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_srv6_sidlist(self, seqid, iprot, oprot):
        args = sai_thrift_create_srv6_sidlist_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_srv6_sidlist_result()
        try:
            result.success = self._handler.sai_thrift_create_srv6_sidlist(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_srv6_sidlist", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_srv6_sidlist(self, seqid, iprot, oprot):
        args = sai_thrift_remove_srv6_sidlist_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_srv6_sidlist_result()
        try:
            self._handler.sai_thrift_remove_srv6_sidlist(args.srv6_sidlist_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_srv6_sidlist", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_srv6_sidlist_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_srv6_sidlist_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_srv6_sidlist_attribute_result()
        try:
            self._handler.sai_thrift_set_srv6_sidlist_attribute(args.srv6_sidlist_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_srv6_sidlist_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_srv6_sidlist_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_srv6_sidlist_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_srv6_sidlist_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_srv6_sidlist_attribute(args.srv6_sidlist_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_srv6_sidlist_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_my_sid_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_my_sid_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_my_sid_entry_result()
        try:
            self._handler.sai_thrift_create_my_sid_entry(args.my_sid_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_my_sid_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_my_sid_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_my_sid_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_my_sid_entry_result()
        try:
            self._handler.sai_thrift_remove_my_sid_entry(args.my_sid_entry)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_my_sid_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_my_sid_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_my_sid_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_my_sid_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_my_sid_entry_attribute(args.my_sid_entry, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_my_sid_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_my_sid_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_my_sid_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_my_sid_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_my_sid_entry_attribute(args.my_sid_entry, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_my_sid_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_create_my_sid_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_create_my_sid_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_create_my_sid_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_create_my_sid_entry(args.my_sid_entry, args.attr_count, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_create_my_sid_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_remove_my_sid_entry(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_remove_my_sid_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_remove_my_sid_entry_result()
        try:
            result.success = self._handler.sai_thrift_bulk_remove_my_sid_entry(args.my_sid_entry, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_remove_my_sid_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_set_my_sid_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_set_my_sid_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_set_my_sid_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_set_my_sid_entry_attribute(args.my_sid_entry, args.attr_list, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_set_my_sid_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_bulk_get_my_sid_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_bulk_get_my_sid_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_bulk_get_my_sid_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_bulk_get_my_sid_entry_attribute(args.my_sid_entry, args.attr_count, args.attr_list, args.mode, args.object_statuses)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_bulk_get_my_sid_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_stp(self, seqid, iprot, oprot):
        args = sai_thrift_create_stp_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_stp_result()
        try:
            result.success = self._handler.sai_thrift_create_stp(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_stp", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_stp(self, seqid, iprot, oprot):
        args = sai_thrift_remove_stp_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_stp_result()
        try:
            self._handler.sai_thrift_remove_stp(args.stp_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_stp", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_stp_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_stp_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_stp_attribute_result()
        try:
            self._handler.sai_thrift_set_stp_attribute(args.stp_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_stp_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_stp_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_stp_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_stp_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_stp_attribute(args.stp_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_stp_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_stp_port(self, seqid, iprot, oprot):
        args = sai_thrift_create_stp_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_stp_port_result()
        try:
            result.success = self._handler.sai_thrift_create_stp_port(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_stp_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_stp_port(self, seqid, iprot, oprot):
        args = sai_thrift_remove_stp_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_stp_port_result()
        try:
            self._handler.sai_thrift_remove_stp_port(args.stp_port_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_stp_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_stp_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_stp_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_stp_port_attribute_result()
        try:
            self._handler.sai_thrift_set_stp_port_attribute(args.stp_port_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_stp_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_stp_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_stp_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_stp_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_stp_port_attribute(args.stp_port_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_stp_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_switch_register_read(self, seqid, iprot, oprot):
        args = sai_thrift_switch_register_read_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_switch_register_read_result()
        try:
            result.success = self._handler.sai_thrift_switch_register_read(args.platform_context, args.device_addr, args.start_reg_addr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_switch_register_read", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_switch_register_write(self, seqid, iprot, oprot):
        args = sai_thrift_switch_register_write_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_switch_register_write_result()
        try:
            self._handler.sai_thrift_switch_register_write(args.platform_context, args.device_addr, args.start_reg_addr, args.reg_val)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_switch_register_write", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_switch_mdio_read(self, seqid, iprot, oprot):
        args = sai_thrift_switch_mdio_read_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_switch_mdio_read_result()
        try:
            result.success = self._handler.sai_thrift_switch_mdio_read(args.device_addr, args.start_reg_addr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_switch_mdio_read", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_switch_mdio_write(self, seqid, iprot, oprot):
        args = sai_thrift_switch_mdio_write_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_switch_mdio_write_result()
        try:
            self._handler.sai_thrift_switch_mdio_write(args.device_addr, args.start_reg_addr, args.reg_val)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_switch_mdio_write", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_switch_mdio_cl22_read(self, seqid, iprot, oprot):
        args = sai_thrift_switch_mdio_cl22_read_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_switch_mdio_cl22_read_result()
        try:
            result.success = self._handler.sai_thrift_switch_mdio_cl22_read(args.device_addr, args.start_reg_addr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_switch_mdio_cl22_read", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_switch_mdio_cl22_write(self, seqid, iprot, oprot):
        args = sai_thrift_switch_mdio_cl22_write_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_switch_mdio_cl22_write_result()
        try:
            self._handler.sai_thrift_switch_mdio_cl22_write(args.device_addr, args.start_reg_addr, args.reg_val)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_switch_mdio_cl22_write", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_switch(self, seqid, iprot, oprot):
        args = sai_thrift_create_switch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_switch_result()
        try:
            result.success = self._handler.sai_thrift_create_switch(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_switch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_switch(self, seqid, iprot, oprot):
        args = sai_thrift_remove_switch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_switch_result()
        try:
            self._handler.sai_thrift_remove_switch()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_switch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_switch_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_switch_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_switch_attribute_result()
        try:
            self._handler.sai_thrift_set_switch_attribute(args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_switch_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_switch_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_switch_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_switch_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_switch_attribute(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_switch_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_switch_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_switch_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_switch_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_switch_stats(args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_switch_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_switch_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_switch_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_switch_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_switch_stats_ext(args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_switch_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_switch_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_switch_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_switch_stats_result()
        try:
            self._handler.sai_thrift_clear_switch_stats(args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_switch_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_switch_tunnel(self, seqid, iprot, oprot):
        args = sai_thrift_create_switch_tunnel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_switch_tunnel_result()
        try:
            result.success = self._handler.sai_thrift_create_switch_tunnel(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_switch_tunnel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_switch_tunnel(self, seqid, iprot, oprot):
        args = sai_thrift_remove_switch_tunnel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_switch_tunnel_result()
        try:
            self._handler.sai_thrift_remove_switch_tunnel(args.switch_tunnel_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_switch_tunnel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_switch_tunnel_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_switch_tunnel_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_switch_tunnel_attribute_result()
        try:
            self._handler.sai_thrift_set_switch_tunnel_attribute(args.switch_tunnel_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_switch_tunnel_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_switch_tunnel_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_switch_tunnel_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_switch_tunnel_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_switch_tunnel_attribute(args.switch_tunnel_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_switch_tunnel_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_system_port(self, seqid, iprot, oprot):
        args = sai_thrift_create_system_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_system_port_result()
        try:
            result.success = self._handler.sai_thrift_create_system_port(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_system_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_system_port(self, seqid, iprot, oprot):
        args = sai_thrift_remove_system_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_system_port_result()
        try:
            self._handler.sai_thrift_remove_system_port(args.system_port_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_system_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_system_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_system_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_system_port_attribute_result()
        try:
            self._handler.sai_thrift_set_system_port_attribute(args.system_port_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_system_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_system_port_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_system_port_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_system_port_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_system_port_attribute(args.system_port_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_system_port_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_result()
        try:
            result.success = self._handler.sai_thrift_create_tam(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_result()
        try:
            self._handler.sai_thrift_remove_tam(args.tam_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_attribute(args.tam_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_attribute(args.tam_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_math_func(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_math_func_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_math_func_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_math_func(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_math_func", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_math_func(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_math_func_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_math_func_result()
        try:
            self._handler.sai_thrift_remove_tam_math_func(args.tam_math_func_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_math_func", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_math_func_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_math_func_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_math_func_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_math_func_attribute(args.tam_math_func_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_math_func_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_math_func_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_math_func_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_math_func_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_math_func_attribute(args.tam_math_func_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_math_func_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_event_threshold(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_event_threshold_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_event_threshold_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_event_threshold(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_event_threshold", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_event_threshold(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_event_threshold_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_event_threshold_result()
        try:
            self._handler.sai_thrift_remove_tam_event_threshold(args.tam_event_threshold_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_event_threshold", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_event_threshold_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_event_threshold_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_event_threshold_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_event_threshold_attribute(args.tam_event_threshold_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_event_threshold_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_event_threshold_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_event_threshold_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_event_threshold_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_event_threshold_attribute(args.tam_event_threshold_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_event_threshold_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_int(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_int_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_int_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_int(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_int", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_int(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_int_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_int_result()
        try:
            self._handler.sai_thrift_remove_tam_int(args.tam_int_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_int", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_int_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_int_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_int_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_int_attribute(args.tam_int_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_int_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_int_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_int_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_int_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_int_attribute(args.tam_int_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_int_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_tel_type(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_tel_type_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_tel_type_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_tel_type(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_tel_type", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_tel_type(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_tel_type_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_tel_type_result()
        try:
            self._handler.sai_thrift_remove_tam_tel_type(args.tam_tel_type_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_tel_type", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_tel_type_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_tel_type_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_tel_type_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_tel_type_attribute(args.tam_tel_type_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_tel_type_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_tel_type_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_tel_type_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_tel_type_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_tel_type_attribute(args.tam_tel_type_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_tel_type_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_report(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_report_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_report_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_report(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_report", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_report(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_report_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_report_result()
        try:
            self._handler.sai_thrift_remove_tam_report(args.tam_report_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_report", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_report_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_report_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_report_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_report_attribute(args.tam_report_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_report_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_report_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_report_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_report_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_report_attribute(args.tam_report_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_report_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_telemetry(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_telemetry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_telemetry_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_telemetry(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_telemetry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_telemetry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_telemetry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_telemetry_result()
        try:
            self._handler.sai_thrift_remove_tam_telemetry(args.tam_telemetry_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_telemetry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_telemetry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_telemetry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_telemetry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_telemetry_attribute(args.tam_telemetry_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_telemetry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_telemetry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_telemetry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_telemetry_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_telemetry_attribute(args.tam_telemetry_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_telemetry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_transport(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_transport_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_transport_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_transport(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_transport", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_transport(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_transport_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_transport_result()
        try:
            self._handler.sai_thrift_remove_tam_transport(args.tam_transport_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_transport", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_transport_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_transport_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_transport_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_transport_attribute(args.tam_transport_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_transport_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_transport_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_transport_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_transport_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_transport_attribute(args.tam_transport_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_transport_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_collector(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_collector_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_collector_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_collector(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_collector", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_collector(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_collector_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_collector_result()
        try:
            self._handler.sai_thrift_remove_tam_collector(args.tam_collector_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_collector", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_collector_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_collector_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_collector_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_collector_attribute(args.tam_collector_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_collector_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_collector_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_collector_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_collector_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_collector_attribute(args.tam_collector_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_collector_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_event_action(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_event_action_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_event_action_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_event_action(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_event_action", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_event_action(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_event_action_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_event_action_result()
        try:
            self._handler.sai_thrift_remove_tam_event_action(args.tam_event_action_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_event_action", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_event_action_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_event_action_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_event_action_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_event_action_attribute(args.tam_event_action_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_event_action_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_event_action_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_event_action_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_event_action_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_event_action_attribute(args.tam_event_action_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_event_action_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tam_event(self, seqid, iprot, oprot):
        args = sai_thrift_create_tam_event_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tam_event_result()
        try:
            result.success = self._handler.sai_thrift_create_tam_event(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tam_event", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tam_event(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tam_event_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tam_event_result()
        try:
            self._handler.sai_thrift_remove_tam_event(args.tam_event_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tam_event", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tam_event_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tam_event_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tam_event_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tam_event_attribute(args.tam_event_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tam_event_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tam_event_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tam_event_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tam_event_attribute_result()
        try:
            self._handler.sai_thrift_set_tam_event_attribute(args.tam_event_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tam_event_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tunnel_map(self, seqid, iprot, oprot):
        args = sai_thrift_create_tunnel_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tunnel_map_result()
        try:
            result.success = self._handler.sai_thrift_create_tunnel_map(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tunnel_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tunnel_map(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tunnel_map_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tunnel_map_result()
        try:
            self._handler.sai_thrift_remove_tunnel_map(args.tunnel_map_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tunnel_map", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tunnel_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tunnel_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tunnel_map_attribute_result()
        try:
            self._handler.sai_thrift_set_tunnel_map_attribute(args.tunnel_map_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tunnel_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_map_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_map_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_map_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_map_attribute(args.tunnel_map_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_map_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tunnel(self, seqid, iprot, oprot):
        args = sai_thrift_create_tunnel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tunnel_result()
        try:
            result.success = self._handler.sai_thrift_create_tunnel(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tunnel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tunnel(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tunnel_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tunnel_result()
        try:
            self._handler.sai_thrift_remove_tunnel(args.tunnel_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tunnel", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tunnel_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tunnel_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tunnel_attribute_result()
        try:
            self._handler.sai_thrift_set_tunnel_attribute(args.tunnel_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tunnel_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_attribute(args.tunnel_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_stats(args.tunnel_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_stats_ext(args.tunnel_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_tunnel_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_tunnel_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_tunnel_stats_result()
        try:
            self._handler.sai_thrift_clear_tunnel_stats(args.tunnel_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_tunnel_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tunnel_term_table_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_tunnel_term_table_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tunnel_term_table_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_tunnel_term_table_entry(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tunnel_term_table_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tunnel_term_table_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tunnel_term_table_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tunnel_term_table_entry_result()
        try:
            self._handler.sai_thrift_remove_tunnel_term_table_entry(args.tunnel_term_table_entry_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tunnel_term_table_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tunnel_term_table_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tunnel_term_table_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tunnel_term_table_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_tunnel_term_table_entry_attribute(args.tunnel_term_table_entry_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tunnel_term_table_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_term_table_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_term_table_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_term_table_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_term_table_entry_attribute(args.tunnel_term_table_entry_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_term_table_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_tunnel_map_entry(self, seqid, iprot, oprot):
        args = sai_thrift_create_tunnel_map_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_tunnel_map_entry_result()
        try:
            result.success = self._handler.sai_thrift_create_tunnel_map_entry(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_tunnel_map_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_tunnel_map_entry(self, seqid, iprot, oprot):
        args = sai_thrift_remove_tunnel_map_entry_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_tunnel_map_entry_result()
        try:
            self._handler.sai_thrift_remove_tunnel_map_entry(args.tunnel_map_entry_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_tunnel_map_entry", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_tunnel_map_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_tunnel_map_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_tunnel_map_entry_attribute_result()
        try:
            self._handler.sai_thrift_set_tunnel_map_entry_attribute(args.tunnel_map_entry_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_tunnel_map_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_tunnel_map_entry_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_tunnel_map_entry_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_tunnel_map_entry_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_tunnel_map_entry_attribute(args.tunnel_map_entry_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_tunnel_map_entry_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_udf(self, seqid, iprot, oprot):
        args = sai_thrift_create_udf_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_udf_result()
        try:
            result.success = self._handler.sai_thrift_create_udf(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_udf", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_udf(self, seqid, iprot, oprot):
        args = sai_thrift_remove_udf_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_udf_result()
        try:
            self._handler.sai_thrift_remove_udf(args.udf_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_udf", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_udf_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_udf_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_udf_attribute_result()
        try:
            self._handler.sai_thrift_set_udf_attribute(args.udf_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_udf_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_udf_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_udf_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_udf_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_udf_attribute(args.udf_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_udf_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_udf_match(self, seqid, iprot, oprot):
        args = sai_thrift_create_udf_match_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_udf_match_result()
        try:
            result.success = self._handler.sai_thrift_create_udf_match(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_udf_match", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_udf_match(self, seqid, iprot, oprot):
        args = sai_thrift_remove_udf_match_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_udf_match_result()
        try:
            self._handler.sai_thrift_remove_udf_match(args.udf_match_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_udf_match", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_udf_match_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_udf_match_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_udf_match_attribute_result()
        try:
            self._handler.sai_thrift_set_udf_match_attribute(args.udf_match_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_udf_match_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_udf_match_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_udf_match_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_udf_match_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_udf_match_attribute(args.udf_match_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_udf_match_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_udf_group(self, seqid, iprot, oprot):
        args = sai_thrift_create_udf_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_udf_group_result()
        try:
            result.success = self._handler.sai_thrift_create_udf_group(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_udf_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_udf_group(self, seqid, iprot, oprot):
        args = sai_thrift_remove_udf_group_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_udf_group_result()
        try:
            self._handler.sai_thrift_remove_udf_group(args.udf_group_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_udf_group", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_udf_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_udf_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_udf_group_attribute_result()
        try:
            self._handler.sai_thrift_set_udf_group_attribute(args.udf_group_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_udf_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_udf_group_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_udf_group_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_udf_group_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_udf_group_attribute(args.udf_group_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_udf_group_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_virtual_router(self, seqid, iprot, oprot):
        args = sai_thrift_create_virtual_router_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_virtual_router_result()
        try:
            result.success = self._handler.sai_thrift_create_virtual_router(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_virtual_router", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_virtual_router(self, seqid, iprot, oprot):
        args = sai_thrift_remove_virtual_router_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_virtual_router_result()
        try:
            self._handler.sai_thrift_remove_virtual_router(args.virtual_router_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_virtual_router", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_virtual_router_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_virtual_router_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_virtual_router_attribute_result()
        try:
            self._handler.sai_thrift_set_virtual_router_attribute(args.virtual_router_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_virtual_router_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_virtual_router_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_virtual_router_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_virtual_router_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_virtual_router_attribute(args.virtual_router_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_virtual_router_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_vlan(self, seqid, iprot, oprot):
        args = sai_thrift_create_vlan_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_vlan_result()
        try:
            result.success = self._handler.sai_thrift_create_vlan(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_vlan", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_vlan(self, seqid, iprot, oprot):
        args = sai_thrift_remove_vlan_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_vlan_result()
        try:
            self._handler.sai_thrift_remove_vlan(args.vlan_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_vlan", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_vlan_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_vlan_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_vlan_attribute_result()
        try:
            self._handler.sai_thrift_set_vlan_attribute(args.vlan_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_vlan_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_vlan_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_vlan_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_vlan_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_vlan_attribute(args.vlan_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_vlan_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_vlan_member(self, seqid, iprot, oprot):
        args = sai_thrift_create_vlan_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_vlan_member_result()
        try:
            result.success = self._handler.sai_thrift_create_vlan_member(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_vlan_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_vlan_member(self, seqid, iprot, oprot):
        args = sai_thrift_remove_vlan_member_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_vlan_member_result()
        try:
            self._handler.sai_thrift_remove_vlan_member(args.vlan_member_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_vlan_member", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_vlan_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_vlan_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_vlan_member_attribute_result()
        try:
            self._handler.sai_thrift_set_vlan_member_attribute(args.vlan_member_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_vlan_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_vlan_member_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_vlan_member_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_vlan_member_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_vlan_member_attribute(args.vlan_member_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_vlan_member_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_vlan_stats(self, seqid, iprot, oprot):
        args = sai_thrift_get_vlan_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_vlan_stats_result()
        try:
            result.success = self._handler.sai_thrift_get_vlan_stats(args.vlan_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_vlan_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_vlan_stats_ext(self, seqid, iprot, oprot):
        args = sai_thrift_get_vlan_stats_ext_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_vlan_stats_ext_result()
        try:
            result.success = self._handler.sai_thrift_get_vlan_stats_ext(args.vlan_oid, args.counter_ids, args.mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_vlan_stats_ext", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_clear_vlan_stats(self, seqid, iprot, oprot):
        args = sai_thrift_clear_vlan_stats_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_clear_vlan_stats_result()
        try:
            self._handler.sai_thrift_clear_vlan_stats(args.vlan_oid, args.counter_ids)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_clear_vlan_stats", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_create_wred(self, seqid, iprot, oprot):
        args = sai_thrift_create_wred_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_create_wred_result()
        try:
            result.success = self._handler.sai_thrift_create_wred(args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_create_wred", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_remove_wred(self, seqid, iprot, oprot):
        args = sai_thrift_remove_wred_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_remove_wred_result()
        try:
            self._handler.sai_thrift_remove_wred(args.wred_oid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_remove_wred", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_set_wred_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_set_wred_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_set_wred_attribute_result()
        try:
            self._handler.sai_thrift_set_wred_attribute(args.wred_oid, args.attr)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_set_wred_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_get_wred_attribute(self, seqid, iprot, oprot):
        args = sai_thrift_get_wred_attribute_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_get_wred_attribute_result()
        try:
            result.success = self._handler.sai_thrift_get_wred_attribute(args.wred_oid, args.attr_list)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except sai_thrift_exception as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_get_wred_attribute", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_query_attribute_enum_values_capability(self, seqid, iprot, oprot):
        args = sai_thrift_query_attribute_enum_values_capability_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_query_attribute_enum_values_capability_result()
        try:
            result.success = self._handler.sai_thrift_query_attribute_enum_values_capability(args.object_type, args.attr_id, args.caps_count)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_query_attribute_enum_values_capability", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_object_type_get_availability(self, seqid, iprot, oprot):
        args = sai_thrift_object_type_get_availability_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_object_type_get_availability_result()
        try:
            result.success = self._handler.sai_thrift_object_type_get_availability(args.object_type, args.attr_id, args.attr_type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_object_type_get_availability", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_switch_id_query(self, seqid, iprot, oprot):
        args = sai_thrift_switch_id_query_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_switch_id_query_result()
        try:
            result.success = self._handler.sai_thrift_switch_id_query(args.object_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_switch_id_query", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_object_type_query(self, seqid, iprot, oprot):
        args = sai_thrift_object_type_query_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_object_type_query_result()
        try:
            result.success = self._handler.sai_thrift_object_type_query(args.object_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_object_type_query", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sai_thrift_api_uninitialize(self, seqid, iprot, oprot):
        args = sai_thrift_api_uninitialize_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sai_thrift_api_uninitialize_result()
        try:
            result.success = self._handler.sai_thrift_api_uninitialize()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sai_thrift_api_uninitialize", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class sai_thrift_create_acl_table_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype304, _size301) = iprot.readListBegin()
                    for _i305 in range(_size301):
                        _elem306 = sai_thrift_attribute_t()
                        _elem306.read(iprot)
                        self.attr_list.append(_elem306)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter307 in self.attr_list:
                iter307.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_args)
sai_thrift_create_acl_table_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_table_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_result)
sai_thrift_create_acl_table_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_acl_table_args(object):
    """
    Attributes:
     - acl_table_oid

    """


    def __init__(self, acl_table_oid=None,):
        self.acl_table_oid = acl_table_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_args')
        if self.acl_table_oid is not None:
            oprot.writeFieldBegin('acl_table_oid', TType.I64, 1)
            oprot.writeI64(self.acl_table_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_args)
sai_thrift_remove_acl_table_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_oid', None, None, ),  # 1
)


class sai_thrift_remove_acl_table_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_result)
sai_thrift_remove_acl_table_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_acl_table_attribute_args(object):
    """
    Attributes:
     - acl_table_oid
     - attr

    """


    def __init__(self, acl_table_oid=None, attr=None,):
        self.acl_table_oid = acl_table_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_table_attribute_args')
        if self.acl_table_oid is not None:
            oprot.writeFieldBegin('acl_table_oid', TType.I64, 1)
            oprot.writeI64(self.acl_table_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_table_attribute_args)
sai_thrift_set_acl_table_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_acl_table_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_table_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_table_attribute_result)
sai_thrift_set_acl_table_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_acl_table_attribute_args(object):
    """
    Attributes:
     - acl_table_oid
     - attr_list

    """


    def __init__(self, acl_table_oid=None, attr_list=None,):
        self.acl_table_oid = acl_table_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_attribute_args')
        if self.acl_table_oid is not None:
            oprot.writeFieldBegin('acl_table_oid', TType.I64, 1)
            oprot.writeI64(self.acl_table_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_attribute_args)
sai_thrift_get_acl_table_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_acl_table_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_attribute_result)
sai_thrift_get_acl_table_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_acl_entry_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype311, _size308) = iprot.readListBegin()
                    for _i312 in range(_size308):
                        _elem313 = sai_thrift_attribute_t()
                        _elem313.read(iprot)
                        self.attr_list.append(_elem313)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_entry_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter314 in self.attr_list:
                iter314.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_entry_args)
sai_thrift_create_acl_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_entry_result)
sai_thrift_create_acl_entry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_acl_entry_args(object):
    """
    Attributes:
     - acl_entry_oid

    """


    def __init__(self, acl_entry_oid=None,):
        self.acl_entry_oid = acl_entry_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_entry_args')
        if self.acl_entry_oid is not None:
            oprot.writeFieldBegin('acl_entry_oid', TType.I64, 1)
            oprot.writeI64(self.acl_entry_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_entry_args)
sai_thrift_remove_acl_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_entry_oid', None, None, ),  # 1
)


class sai_thrift_remove_acl_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_entry_result)
sai_thrift_remove_acl_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_acl_entry_attribute_args(object):
    """
    Attributes:
     - acl_entry_oid
     - attr

    """


    def __init__(self, acl_entry_oid=None, attr=None,):
        self.acl_entry_oid = acl_entry_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_entry_attribute_args')
        if self.acl_entry_oid is not None:
            oprot.writeFieldBegin('acl_entry_oid', TType.I64, 1)
            oprot.writeI64(self.acl_entry_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_entry_attribute_args)
sai_thrift_set_acl_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_entry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_acl_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_entry_attribute_result)
sai_thrift_set_acl_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_acl_entry_attribute_args(object):
    """
    Attributes:
     - acl_entry_oid
     - attr_list

    """


    def __init__(self, acl_entry_oid=None, attr_list=None,):
        self.acl_entry_oid = acl_entry_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_entry_attribute_args')
        if self.acl_entry_oid is not None:
            oprot.writeFieldBegin('acl_entry_oid', TType.I64, 1)
            oprot.writeI64(self.acl_entry_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_entry_attribute_args)
sai_thrift_get_acl_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_entry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_acl_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_entry_attribute_result)
sai_thrift_get_acl_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_acl_counter_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype318, _size315) = iprot.readListBegin()
                    for _i319 in range(_size315):
                        _elem320 = sai_thrift_attribute_t()
                        _elem320.read(iprot)
                        self.attr_list.append(_elem320)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_counter_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter321 in self.attr_list:
                iter321.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_counter_args)
sai_thrift_create_acl_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_counter_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_counter_result)
sai_thrift_create_acl_counter_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_acl_counter_args(object):
    """
    Attributes:
     - acl_counter_oid

    """


    def __init__(self, acl_counter_oid=None,):
        self.acl_counter_oid = acl_counter_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_counter_args')
        if self.acl_counter_oid is not None:
            oprot.writeFieldBegin('acl_counter_oid', TType.I64, 1)
            oprot.writeI64(self.acl_counter_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_counter_args)
sai_thrift_remove_acl_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_counter_oid', None, None, ),  # 1
)


class sai_thrift_remove_acl_counter_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_counter_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_counter_result)
sai_thrift_remove_acl_counter_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_acl_counter_attribute_args(object):
    """
    Attributes:
     - acl_counter_oid
     - attr

    """


    def __init__(self, acl_counter_oid=None, attr=None,):
        self.acl_counter_oid = acl_counter_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_counter_attribute_args')
        if self.acl_counter_oid is not None:
            oprot.writeFieldBegin('acl_counter_oid', TType.I64, 1)
            oprot.writeI64(self.acl_counter_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_counter_attribute_args)
sai_thrift_set_acl_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_counter_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_acl_counter_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_counter_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_counter_attribute_result)
sai_thrift_set_acl_counter_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_acl_counter_attribute_args(object):
    """
    Attributes:
     - acl_counter_oid
     - attr_list

    """


    def __init__(self, acl_counter_oid=None, attr_list=None,):
        self.acl_counter_oid = acl_counter_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_counter_attribute_args')
        if self.acl_counter_oid is not None:
            oprot.writeFieldBegin('acl_counter_oid', TType.I64, 1)
            oprot.writeI64(self.acl_counter_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_counter_attribute_args)
sai_thrift_get_acl_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_counter_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_acl_counter_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_counter_attribute_result)
sai_thrift_get_acl_counter_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_acl_range_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype325, _size322) = iprot.readListBegin()
                    for _i326 in range(_size322):
                        _elem327 = sai_thrift_attribute_t()
                        _elem327.read(iprot)
                        self.attr_list.append(_elem327)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_range_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter328 in self.attr_list:
                iter328.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_range_args)
sai_thrift_create_acl_range_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_range_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_range_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_range_result)
sai_thrift_create_acl_range_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_acl_range_args(object):
    """
    Attributes:
     - acl_range_oid

    """


    def __init__(self, acl_range_oid=None,):
        self.acl_range_oid = acl_range_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_range_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_range_args')
        if self.acl_range_oid is not None:
            oprot.writeFieldBegin('acl_range_oid', TType.I64, 1)
            oprot.writeI64(self.acl_range_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_range_args)
sai_thrift_remove_acl_range_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_range_oid', None, None, ),  # 1
)


class sai_thrift_remove_acl_range_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_range_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_range_result)
sai_thrift_remove_acl_range_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_acl_range_attribute_args(object):
    """
    Attributes:
     - acl_range_oid
     - attr

    """


    def __init__(self, acl_range_oid=None, attr=None,):
        self.acl_range_oid = acl_range_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_range_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_range_attribute_args')
        if self.acl_range_oid is not None:
            oprot.writeFieldBegin('acl_range_oid', TType.I64, 1)
            oprot.writeI64(self.acl_range_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_range_attribute_args)
sai_thrift_set_acl_range_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_range_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_acl_range_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_range_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_range_attribute_result)
sai_thrift_set_acl_range_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_acl_range_attribute_args(object):
    """
    Attributes:
     - acl_range_oid
     - attr_list

    """


    def __init__(self, acl_range_oid=None, attr_list=None,):
        self.acl_range_oid = acl_range_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_range_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_range_attribute_args')
        if self.acl_range_oid is not None:
            oprot.writeFieldBegin('acl_range_oid', TType.I64, 1)
            oprot.writeI64(self.acl_range_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_range_attribute_args)
sai_thrift_get_acl_range_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_range_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_acl_range_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_range_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_range_attribute_result)
sai_thrift_get_acl_range_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_acl_table_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype332, _size329) = iprot.readListBegin()
                    for _i333 in range(_size329):
                        _elem334 = sai_thrift_attribute_t()
                        _elem334.read(iprot)
                        self.attr_list.append(_elem334)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter335 in self.attr_list:
                iter335.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_group_args)
sai_thrift_create_acl_table_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_table_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_group_result)
sai_thrift_create_acl_table_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_acl_table_group_args(object):
    """
    Attributes:
     - acl_table_group_oid

    """


    def __init__(self, acl_table_group_oid=None,):
        self.acl_table_group_oid = acl_table_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_group_args')
        if self.acl_table_group_oid is not None:
            oprot.writeFieldBegin('acl_table_group_oid', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_group_args)
sai_thrift_remove_acl_table_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_acl_table_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_group_result)
sai_thrift_remove_acl_table_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_acl_table_group_attribute_args(object):
    """
    Attributes:
     - acl_table_group_oid
     - attr

    """


    def __init__(self, acl_table_group_oid=None, attr=None,):
        self.acl_table_group_oid = acl_table_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_table_group_attribute_args')
        if self.acl_table_group_oid is not None:
            oprot.writeFieldBegin('acl_table_group_oid', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_table_group_attribute_args)
sai_thrift_set_acl_table_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_acl_table_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_table_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_table_group_attribute_result)
sai_thrift_set_acl_table_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_acl_table_group_attribute_args(object):
    """
    Attributes:
     - acl_table_group_oid
     - attr_list

    """


    def __init__(self, acl_table_group_oid=None, attr_list=None,):
        self.acl_table_group_oid = acl_table_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_group_attribute_args')
        if self.acl_table_group_oid is not None:
            oprot.writeFieldBegin('acl_table_group_oid', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_group_attribute_args)
sai_thrift_get_acl_table_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_acl_table_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_group_attribute_result)
sai_thrift_get_acl_table_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_acl_table_group_member_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype339, _size336) = iprot.readListBegin()
                    for _i340 in range(_size336):
                        _elem341 = sai_thrift_attribute_t()
                        _elem341.read(iprot)
                        self.attr_list.append(_elem341)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_group_member_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter342 in self.attr_list:
                iter342.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_group_member_args)
sai_thrift_create_acl_table_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_acl_table_group_member_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_acl_table_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_acl_table_group_member_result)
sai_thrift_create_acl_table_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_acl_table_group_member_args(object):
    """
    Attributes:
     - acl_table_group_member_oid

    """


    def __init__(self, acl_table_group_member_oid=None,):
        self.acl_table_group_member_oid = acl_table_group_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_group_member_args')
        if self.acl_table_group_member_oid is not None:
            oprot.writeFieldBegin('acl_table_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_group_member_args)
sai_thrift_remove_acl_table_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_member_oid', None, None, ),  # 1
)


class sai_thrift_remove_acl_table_group_member_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_acl_table_group_member_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_acl_table_group_member_result)
sai_thrift_remove_acl_table_group_member_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_acl_table_group_member_attribute_args(object):
    """
    Attributes:
     - acl_table_group_member_oid
     - attr

    """


    def __init__(self, acl_table_group_member_oid=None, attr=None,):
        self.acl_table_group_member_oid = acl_table_group_member_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_table_group_member_attribute_args')
        if self.acl_table_group_member_oid is not None:
            oprot.writeFieldBegin('acl_table_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_table_group_member_attribute_args)
sai_thrift_set_acl_table_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_acl_table_group_member_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_acl_table_group_member_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_acl_table_group_member_attribute_result)
sai_thrift_set_acl_table_group_member_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_acl_table_group_member_attribute_args(object):
    """
    Attributes:
     - acl_table_group_member_oid
     - attr_list

    """


    def __init__(self, acl_table_group_member_oid=None, attr_list=None,):
        self.acl_table_group_member_oid = acl_table_group_member_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.acl_table_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_group_member_attribute_args')
        if self.acl_table_group_member_oid is not None:
            oprot.writeFieldBegin('acl_table_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.acl_table_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_group_member_attribute_args)
sai_thrift_get_acl_table_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'acl_table_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_acl_table_group_member_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_acl_table_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_acl_table_group_member_attribute_result)
sai_thrift_get_acl_table_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_bfd_session_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype346, _size343) = iprot.readListBegin()
                    for _i347 in range(_size343):
                        _elem348 = sai_thrift_attribute_t()
                        _elem348.read(iprot)
                        self.attr_list.append(_elem348)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bfd_session_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter349 in self.attr_list:
                iter349.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bfd_session_args)
sai_thrift_create_bfd_session_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_bfd_session_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bfd_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bfd_session_result)
sai_thrift_create_bfd_session_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_bfd_session_args(object):
    """
    Attributes:
     - bfd_session_oid

    """


    def __init__(self, bfd_session_oid=None,):
        self.bfd_session_oid = bfd_session_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bfd_session_args')
        if self.bfd_session_oid is not None:
            oprot.writeFieldBegin('bfd_session_oid', TType.I64, 1)
            oprot.writeI64(self.bfd_session_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bfd_session_args)
sai_thrift_remove_bfd_session_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_session_oid', None, None, ),  # 1
)


class sai_thrift_remove_bfd_session_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bfd_session_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bfd_session_result)
sai_thrift_remove_bfd_session_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_bfd_session_attribute_args(object):
    """
    Attributes:
     - bfd_session_oid
     - attr

    """


    def __init__(self, bfd_session_oid=None, attr=None,):
        self.bfd_session_oid = bfd_session_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bfd_session_attribute_args')
        if self.bfd_session_oid is not None:
            oprot.writeFieldBegin('bfd_session_oid', TType.I64, 1)
            oprot.writeI64(self.bfd_session_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bfd_session_attribute_args)
sai_thrift_set_bfd_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_session_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_bfd_session_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bfd_session_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bfd_session_attribute_result)
sai_thrift_set_bfd_session_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_bfd_session_attribute_args(object):
    """
    Attributes:
     - bfd_session_oid
     - attr_list

    """


    def __init__(self, bfd_session_oid=None, attr_list=None,):
        self.bfd_session_oid = bfd_session_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bfd_session_attribute_args')
        if self.bfd_session_oid is not None:
            oprot.writeFieldBegin('bfd_session_oid', TType.I64, 1)
            oprot.writeI64(self.bfd_session_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bfd_session_attribute_args)
sai_thrift_get_bfd_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_session_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_bfd_session_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bfd_session_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bfd_session_attribute_result)
sai_thrift_get_bfd_session_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_bfd_session_stats_args(object):
    """
    Attributes:
     - bfd_session_oid
     - counter_ids

    """


    def __init__(self, bfd_session_oid=None, counter_ids=None,):
        self.bfd_session_oid = bfd_session_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype353, _size350) = iprot.readListBegin()
                    for _i354 in range(_size350):
                        _elem355 = iprot.readI32()
                        self.counter_ids.append(_elem355)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bfd_session_stats_args')
        if self.bfd_session_oid is not None:
            oprot.writeFieldBegin('bfd_session_oid', TType.I64, 1)
            oprot.writeI64(self.bfd_session_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter356 in self.counter_ids:
                oprot.writeI32(iter356)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bfd_session_stats_args)
sai_thrift_get_bfd_session_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_session_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_bfd_session_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype360, _size357) = iprot.readListBegin()
                    for _i361 in range(_size357):
                        _elem362 = iprot.readI64()
                        self.success.append(_elem362)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bfd_session_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter363 in self.success:
                oprot.writeI64(iter363)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bfd_session_stats_result)
sai_thrift_get_bfd_session_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_bfd_session_stats_ext_args(object):
    """
    Attributes:
     - bfd_session_oid
     - counter_ids
     - mode

    """


    def __init__(self, bfd_session_oid=None, counter_ids=None, mode=None,):
        self.bfd_session_oid = bfd_session_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype367, _size364) = iprot.readListBegin()
                    for _i368 in range(_size364):
                        _elem369 = iprot.readI32()
                        self.counter_ids.append(_elem369)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bfd_session_stats_ext_args')
        if self.bfd_session_oid is not None:
            oprot.writeFieldBegin('bfd_session_oid', TType.I64, 1)
            oprot.writeI64(self.bfd_session_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter370 in self.counter_ids:
                oprot.writeI32(iter370)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bfd_session_stats_ext_args)
sai_thrift_get_bfd_session_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_session_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_bfd_session_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype374, _size371) = iprot.readListBegin()
                    for _i375 in range(_size371):
                        _elem376 = iprot.readI64()
                        self.success.append(_elem376)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bfd_session_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter377 in self.success:
                oprot.writeI64(iter377)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bfd_session_stats_ext_result)
sai_thrift_get_bfd_session_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_bfd_session_stats_args(object):
    """
    Attributes:
     - bfd_session_oid
     - counter_ids

    """


    def __init__(self, bfd_session_oid=None, counter_ids=None,):
        self.bfd_session_oid = bfd_session_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bfd_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype381, _size378) = iprot.readListBegin()
                    for _i382 in range(_size378):
                        _elem383 = iprot.readI32()
                        self.counter_ids.append(_elem383)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_bfd_session_stats_args')
        if self.bfd_session_oid is not None:
            oprot.writeFieldBegin('bfd_session_oid', TType.I64, 1)
            oprot.writeI64(self.bfd_session_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter384 in self.counter_ids:
                oprot.writeI32(iter384)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_bfd_session_stats_args)
sai_thrift_clear_bfd_session_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bfd_session_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_bfd_session_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_bfd_session_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_bfd_session_stats_result)
sai_thrift_clear_bfd_session_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_bridge_port_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype388, _size385) = iprot.readListBegin()
                    for _i389 in range(_size385):
                        _elem390 = sai_thrift_attribute_t()
                        _elem390.read(iprot)
                        self.attr_list.append(_elem390)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bridge_port_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter391 in self.attr_list:
                iter391.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bridge_port_args)
sai_thrift_create_bridge_port_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_bridge_port_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bridge_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bridge_port_result)
sai_thrift_create_bridge_port_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_bridge_port_args(object):
    """
    Attributes:
     - bridge_port_oid

    """


    def __init__(self, bridge_port_oid=None,):
        self.bridge_port_oid = bridge_port_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bridge_port_args')
        if self.bridge_port_oid is not None:
            oprot.writeFieldBegin('bridge_port_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_port_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bridge_port_args)
sai_thrift_remove_bridge_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_oid', None, None, ),  # 1
)


class sai_thrift_remove_bridge_port_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bridge_port_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bridge_port_result)
sai_thrift_remove_bridge_port_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_bridge_port_attribute_args(object):
    """
    Attributes:
     - bridge_port_oid
     - attr

    """


    def __init__(self, bridge_port_oid=None, attr=None,):
        self.bridge_port_oid = bridge_port_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bridge_port_attribute_args')
        if self.bridge_port_oid is not None:
            oprot.writeFieldBegin('bridge_port_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_port_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bridge_port_attribute_args)
sai_thrift_set_bridge_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_bridge_port_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bridge_port_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bridge_port_attribute_result)
sai_thrift_set_bridge_port_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_bridge_port_attribute_args(object):
    """
    Attributes:
     - bridge_port_oid
     - attr_list

    """


    def __init__(self, bridge_port_oid=None, attr_list=None,):
        self.bridge_port_oid = bridge_port_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_attribute_args')
        if self.bridge_port_oid is not None:
            oprot.writeFieldBegin('bridge_port_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_port_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_attribute_args)
sai_thrift_get_bridge_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_bridge_port_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_attribute_result)
sai_thrift_get_bridge_port_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_bridge_port_stats_args(object):
    """
    Attributes:
     - bridge_port_oid
     - counter_ids

    """


    def __init__(self, bridge_port_oid=None, counter_ids=None,):
        self.bridge_port_oid = bridge_port_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype395, _size392) = iprot.readListBegin()
                    for _i396 in range(_size392):
                        _elem397 = iprot.readI32()
                        self.counter_ids.append(_elem397)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_stats_args')
        if self.bridge_port_oid is not None:
            oprot.writeFieldBegin('bridge_port_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter398 in self.counter_ids:
                oprot.writeI32(iter398)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_stats_args)
sai_thrift_get_bridge_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_bridge_port_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype402, _size399) = iprot.readListBegin()
                    for _i403 in range(_size399):
                        _elem404 = iprot.readI64()
                        self.success.append(_elem404)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter405 in self.success:
                oprot.writeI64(iter405)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_stats_result)
sai_thrift_get_bridge_port_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_bridge_port_stats_ext_args(object):
    """
    Attributes:
     - bridge_port_oid
     - counter_ids
     - mode

    """


    def __init__(self, bridge_port_oid=None, counter_ids=None, mode=None,):
        self.bridge_port_oid = bridge_port_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype409, _size406) = iprot.readListBegin()
                    for _i410 in range(_size406):
                        _elem411 = iprot.readI32()
                        self.counter_ids.append(_elem411)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_stats_ext_args')
        if self.bridge_port_oid is not None:
            oprot.writeFieldBegin('bridge_port_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter412 in self.counter_ids:
                oprot.writeI32(iter412)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_stats_ext_args)
sai_thrift_get_bridge_port_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_bridge_port_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype416, _size413) = iprot.readListBegin()
                    for _i417 in range(_size413):
                        _elem418 = iprot.readI64()
                        self.success.append(_elem418)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_port_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter419 in self.success:
                oprot.writeI64(iter419)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_port_stats_ext_result)
sai_thrift_get_bridge_port_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_bridge_port_stats_args(object):
    """
    Attributes:
     - bridge_port_oid
     - counter_ids

    """


    def __init__(self, bridge_port_oid=None, counter_ids=None,):
        self.bridge_port_oid = bridge_port_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype423, _size420) = iprot.readListBegin()
                    for _i424 in range(_size420):
                        _elem425 = iprot.readI32()
                        self.counter_ids.append(_elem425)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_bridge_port_stats_args')
        if self.bridge_port_oid is not None:
            oprot.writeFieldBegin('bridge_port_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter426 in self.counter_ids:
                oprot.writeI32(iter426)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_bridge_port_stats_args)
sai_thrift_clear_bridge_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_bridge_port_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_bridge_port_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_bridge_port_stats_result)
sai_thrift_clear_bridge_port_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_bridge_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype430, _size427) = iprot.readListBegin()
                    for _i431 in range(_size427):
                        _elem432 = sai_thrift_attribute_t()
                        _elem432.read(iprot)
                        self.attr_list.append(_elem432)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bridge_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter433 in self.attr_list:
                iter433.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bridge_args)
sai_thrift_create_bridge_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_bridge_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_bridge_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_bridge_result)
sai_thrift_create_bridge_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_bridge_args(object):
    """
    Attributes:
     - bridge_oid

    """


    def __init__(self, bridge_oid=None,):
        self.bridge_oid = bridge_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bridge_args')
        if self.bridge_oid is not None:
            oprot.writeFieldBegin('bridge_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bridge_args)
sai_thrift_remove_bridge_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_oid', None, None, ),  # 1
)


class sai_thrift_remove_bridge_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_bridge_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_bridge_result)
sai_thrift_remove_bridge_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_bridge_attribute_args(object):
    """
    Attributes:
     - bridge_oid
     - attr

    """


    def __init__(self, bridge_oid=None, attr=None,):
        self.bridge_oid = bridge_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bridge_attribute_args')
        if self.bridge_oid is not None:
            oprot.writeFieldBegin('bridge_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bridge_attribute_args)
sai_thrift_set_bridge_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_bridge_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_bridge_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_bridge_attribute_result)
sai_thrift_set_bridge_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_bridge_attribute_args(object):
    """
    Attributes:
     - bridge_oid
     - attr_list

    """


    def __init__(self, bridge_oid=None, attr_list=None,):
        self.bridge_oid = bridge_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_attribute_args')
        if self.bridge_oid is not None:
            oprot.writeFieldBegin('bridge_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_attribute_args)
sai_thrift_get_bridge_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_bridge_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_attribute_result)
sai_thrift_get_bridge_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_bridge_stats_args(object):
    """
    Attributes:
     - bridge_oid
     - counter_ids

    """


    def __init__(self, bridge_oid=None, counter_ids=None,):
        self.bridge_oid = bridge_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype437, _size434) = iprot.readListBegin()
                    for _i438 in range(_size434):
                        _elem439 = iprot.readI32()
                        self.counter_ids.append(_elem439)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_stats_args')
        if self.bridge_oid is not None:
            oprot.writeFieldBegin('bridge_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter440 in self.counter_ids:
                oprot.writeI32(iter440)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_stats_args)
sai_thrift_get_bridge_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_bridge_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype444, _size441) = iprot.readListBegin()
                    for _i445 in range(_size441):
                        _elem446 = iprot.readI64()
                        self.success.append(_elem446)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter447 in self.success:
                oprot.writeI64(iter447)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_stats_result)
sai_thrift_get_bridge_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_bridge_stats_ext_args(object):
    """
    Attributes:
     - bridge_oid
     - counter_ids
     - mode

    """


    def __init__(self, bridge_oid=None, counter_ids=None, mode=None,):
        self.bridge_oid = bridge_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype451, _size448) = iprot.readListBegin()
                    for _i452 in range(_size448):
                        _elem453 = iprot.readI32()
                        self.counter_ids.append(_elem453)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_stats_ext_args')
        if self.bridge_oid is not None:
            oprot.writeFieldBegin('bridge_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter454 in self.counter_ids:
                oprot.writeI32(iter454)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_stats_ext_args)
sai_thrift_get_bridge_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_bridge_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype458, _size455) = iprot.readListBegin()
                    for _i459 in range(_size455):
                        _elem460 = iprot.readI64()
                        self.success.append(_elem460)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_bridge_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter461 in self.success:
                oprot.writeI64(iter461)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_bridge_stats_ext_result)
sai_thrift_get_bridge_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_bridge_stats_args(object):
    """
    Attributes:
     - bridge_oid
     - counter_ids

    """


    def __init__(self, bridge_oid=None, counter_ids=None,):
        self.bridge_oid = bridge_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bridge_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype465, _size462) = iprot.readListBegin()
                    for _i466 in range(_size462):
                        _elem467 = iprot.readI32()
                        self.counter_ids.append(_elem467)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_bridge_stats_args')
        if self.bridge_oid is not None:
            oprot.writeFieldBegin('bridge_oid', TType.I64, 1)
            oprot.writeI64(self.bridge_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter468 in self.counter_ids:
                oprot.writeI32(iter468)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_bridge_stats_args)
sai_thrift_clear_bridge_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bridge_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_bridge_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_bridge_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_bridge_stats_result)
sai_thrift_clear_bridge_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_ingress_priority_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype472, _size469) = iprot.readListBegin()
                    for _i473 in range(_size469):
                        _elem474 = sai_thrift_attribute_t()
                        _elem474.read(iprot)
                        self.attr_list.append(_elem474)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ingress_priority_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter475 in self.attr_list:
                iter475.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ingress_priority_group_args)
sai_thrift_create_ingress_priority_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_ingress_priority_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ingress_priority_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ingress_priority_group_result)
sai_thrift_create_ingress_priority_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_ingress_priority_group_args(object):
    """
    Attributes:
     - ingress_priority_group_oid

    """


    def __init__(self, ingress_priority_group_oid=None,):
        self.ingress_priority_group_oid = ingress_priority_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ingress_priority_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ingress_priority_group_args')
        if self.ingress_priority_group_oid is not None:
            oprot.writeFieldBegin('ingress_priority_group_oid', TType.I64, 1)
            oprot.writeI64(self.ingress_priority_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ingress_priority_group_args)
sai_thrift_remove_ingress_priority_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ingress_priority_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_ingress_priority_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ingress_priority_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ingress_priority_group_result)
sai_thrift_remove_ingress_priority_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_ingress_priority_group_attribute_args(object):
    """
    Attributes:
     - ingress_priority_group_oid
     - attr

    """


    def __init__(self, ingress_priority_group_oid=None, attr=None,):
        self.ingress_priority_group_oid = ingress_priority_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ingress_priority_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ingress_priority_group_attribute_args')
        if self.ingress_priority_group_oid is not None:
            oprot.writeFieldBegin('ingress_priority_group_oid', TType.I64, 1)
            oprot.writeI64(self.ingress_priority_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ingress_priority_group_attribute_args)
sai_thrift_set_ingress_priority_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ingress_priority_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ingress_priority_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ingress_priority_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ingress_priority_group_attribute_result)
sai_thrift_set_ingress_priority_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ingress_priority_group_attribute_args(object):
    """
    Attributes:
     - ingress_priority_group_oid
     - attr_list

    """


    def __init__(self, ingress_priority_group_oid=None, attr_list=None,):
        self.ingress_priority_group_oid = ingress_priority_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ingress_priority_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ingress_priority_group_attribute_args')
        if self.ingress_priority_group_oid is not None:
            oprot.writeFieldBegin('ingress_priority_group_oid', TType.I64, 1)
            oprot.writeI64(self.ingress_priority_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ingress_priority_group_attribute_args)
sai_thrift_get_ingress_priority_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ingress_priority_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_ingress_priority_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ingress_priority_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ingress_priority_group_attribute_result)
sai_thrift_get_ingress_priority_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ingress_priority_group_stats_args(object):
    """
    Attributes:
     - ingress_priority_group_oid
     - counter_ids

    """


    def __init__(self, ingress_priority_group_oid=None, counter_ids=None,):
        self.ingress_priority_group_oid = ingress_priority_group_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ingress_priority_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype479, _size476) = iprot.readListBegin()
                    for _i480 in range(_size476):
                        _elem481 = iprot.readI32()
                        self.counter_ids.append(_elem481)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ingress_priority_group_stats_args')
        if self.ingress_priority_group_oid is not None:
            oprot.writeFieldBegin('ingress_priority_group_oid', TType.I64, 1)
            oprot.writeI64(self.ingress_priority_group_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter482 in self.counter_ids:
                oprot.writeI32(iter482)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ingress_priority_group_stats_args)
sai_thrift_get_ingress_priority_group_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ingress_priority_group_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_ingress_priority_group_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype486, _size483) = iprot.readListBegin()
                    for _i487 in range(_size483):
                        _elem488 = iprot.readI64()
                        self.success.append(_elem488)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ingress_priority_group_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter489 in self.success:
                oprot.writeI64(iter489)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ingress_priority_group_stats_result)
sai_thrift_get_ingress_priority_group_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ingress_priority_group_stats_ext_args(object):
    """
    Attributes:
     - ingress_priority_group_oid
     - counter_ids
     - mode

    """


    def __init__(self, ingress_priority_group_oid=None, counter_ids=None, mode=None,):
        self.ingress_priority_group_oid = ingress_priority_group_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ingress_priority_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype493, _size490) = iprot.readListBegin()
                    for _i494 in range(_size490):
                        _elem495 = iprot.readI32()
                        self.counter_ids.append(_elem495)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ingress_priority_group_stats_ext_args')
        if self.ingress_priority_group_oid is not None:
            oprot.writeFieldBegin('ingress_priority_group_oid', TType.I64, 1)
            oprot.writeI64(self.ingress_priority_group_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter496 in self.counter_ids:
                oprot.writeI32(iter496)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ingress_priority_group_stats_ext_args)
sai_thrift_get_ingress_priority_group_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ingress_priority_group_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_ingress_priority_group_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype500, _size497) = iprot.readListBegin()
                    for _i501 in range(_size497):
                        _elem502 = iprot.readI64()
                        self.success.append(_elem502)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ingress_priority_group_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter503 in self.success:
                oprot.writeI64(iter503)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ingress_priority_group_stats_ext_result)
sai_thrift_get_ingress_priority_group_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_ingress_priority_group_stats_args(object):
    """
    Attributes:
     - ingress_priority_group_oid
     - counter_ids

    """


    def __init__(self, ingress_priority_group_oid=None, counter_ids=None,):
        self.ingress_priority_group_oid = ingress_priority_group_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ingress_priority_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype507, _size504) = iprot.readListBegin()
                    for _i508 in range(_size504):
                        _elem509 = iprot.readI32()
                        self.counter_ids.append(_elem509)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_ingress_priority_group_stats_args')
        if self.ingress_priority_group_oid is not None:
            oprot.writeFieldBegin('ingress_priority_group_oid', TType.I64, 1)
            oprot.writeI64(self.ingress_priority_group_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter510 in self.counter_ids:
                oprot.writeI32(iter510)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_ingress_priority_group_stats_args)
sai_thrift_clear_ingress_priority_group_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ingress_priority_group_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_ingress_priority_group_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_ingress_priority_group_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_ingress_priority_group_stats_result)
sai_thrift_clear_ingress_priority_group_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_buffer_pool_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype514, _size511) = iprot.readListBegin()
                    for _i515 in range(_size511):
                        _elem516 = sai_thrift_attribute_t()
                        _elem516.read(iprot)
                        self.attr_list.append(_elem516)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_buffer_pool_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter517 in self.attr_list:
                iter517.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_buffer_pool_args)
sai_thrift_create_buffer_pool_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_buffer_pool_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_buffer_pool_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_buffer_pool_result)
sai_thrift_create_buffer_pool_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_buffer_pool_args(object):
    """
    Attributes:
     - buffer_pool_oid

    """


    def __init__(self, buffer_pool_oid=None,):
        self.buffer_pool_oid = buffer_pool_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_buffer_pool_args')
        if self.buffer_pool_oid is not None:
            oprot.writeFieldBegin('buffer_pool_oid', TType.I64, 1)
            oprot.writeI64(self.buffer_pool_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_buffer_pool_args)
sai_thrift_remove_buffer_pool_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_pool_oid', None, None, ),  # 1
)


class sai_thrift_remove_buffer_pool_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_buffer_pool_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_buffer_pool_result)
sai_thrift_remove_buffer_pool_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_buffer_pool_attribute_args(object):
    """
    Attributes:
     - buffer_pool_oid
     - attr

    """


    def __init__(self, buffer_pool_oid=None, attr=None,):
        self.buffer_pool_oid = buffer_pool_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_buffer_pool_attribute_args')
        if self.buffer_pool_oid is not None:
            oprot.writeFieldBegin('buffer_pool_oid', TType.I64, 1)
            oprot.writeI64(self.buffer_pool_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_buffer_pool_attribute_args)
sai_thrift_set_buffer_pool_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_pool_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_buffer_pool_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_buffer_pool_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_buffer_pool_attribute_result)
sai_thrift_set_buffer_pool_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_buffer_pool_attribute_args(object):
    """
    Attributes:
     - buffer_pool_oid
     - attr_list

    """


    def __init__(self, buffer_pool_oid=None, attr_list=None,):
        self.buffer_pool_oid = buffer_pool_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_pool_attribute_args')
        if self.buffer_pool_oid is not None:
            oprot.writeFieldBegin('buffer_pool_oid', TType.I64, 1)
            oprot.writeI64(self.buffer_pool_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_pool_attribute_args)
sai_thrift_get_buffer_pool_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_pool_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_buffer_pool_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_pool_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_pool_attribute_result)
sai_thrift_get_buffer_pool_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_buffer_pool_stats_args(object):
    """
    Attributes:
     - buffer_pool_oid
     - counter_ids

    """


    def __init__(self, buffer_pool_oid=None, counter_ids=None,):
        self.buffer_pool_oid = buffer_pool_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype521, _size518) = iprot.readListBegin()
                    for _i522 in range(_size518):
                        _elem523 = iprot.readI32()
                        self.counter_ids.append(_elem523)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_pool_stats_args')
        if self.buffer_pool_oid is not None:
            oprot.writeFieldBegin('buffer_pool_oid', TType.I64, 1)
            oprot.writeI64(self.buffer_pool_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter524 in self.counter_ids:
                oprot.writeI32(iter524)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_pool_stats_args)
sai_thrift_get_buffer_pool_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_pool_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_buffer_pool_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype528, _size525) = iprot.readListBegin()
                    for _i529 in range(_size525):
                        _elem530 = iprot.readI64()
                        self.success.append(_elem530)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_pool_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter531 in self.success:
                oprot.writeI64(iter531)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_pool_stats_result)
sai_thrift_get_buffer_pool_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_buffer_pool_stats_ext_args(object):
    """
    Attributes:
     - buffer_pool_oid
     - counter_ids
     - mode

    """


    def __init__(self, buffer_pool_oid=None, counter_ids=None, mode=None,):
        self.buffer_pool_oid = buffer_pool_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype535, _size532) = iprot.readListBegin()
                    for _i536 in range(_size532):
                        _elem537 = iprot.readI32()
                        self.counter_ids.append(_elem537)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_pool_stats_ext_args')
        if self.buffer_pool_oid is not None:
            oprot.writeFieldBegin('buffer_pool_oid', TType.I64, 1)
            oprot.writeI64(self.buffer_pool_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter538 in self.counter_ids:
                oprot.writeI32(iter538)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_pool_stats_ext_args)
sai_thrift_get_buffer_pool_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_pool_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_buffer_pool_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype542, _size539) = iprot.readListBegin()
                    for _i543 in range(_size539):
                        _elem544 = iprot.readI64()
                        self.success.append(_elem544)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_pool_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter545 in self.success:
                oprot.writeI64(iter545)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_pool_stats_ext_result)
sai_thrift_get_buffer_pool_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_buffer_pool_stats_args(object):
    """
    Attributes:
     - buffer_pool_oid
     - counter_ids

    """


    def __init__(self, buffer_pool_oid=None, counter_ids=None,):
        self.buffer_pool_oid = buffer_pool_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype549, _size546) = iprot.readListBegin()
                    for _i550 in range(_size546):
                        _elem551 = iprot.readI32()
                        self.counter_ids.append(_elem551)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_buffer_pool_stats_args')
        if self.buffer_pool_oid is not None:
            oprot.writeFieldBegin('buffer_pool_oid', TType.I64, 1)
            oprot.writeI64(self.buffer_pool_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter552 in self.counter_ids:
                oprot.writeI32(iter552)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_buffer_pool_stats_args)
sai_thrift_clear_buffer_pool_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_pool_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_buffer_pool_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_buffer_pool_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_buffer_pool_stats_result)
sai_thrift_clear_buffer_pool_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_buffer_profile_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype556, _size553) = iprot.readListBegin()
                    for _i557 in range(_size553):
                        _elem558 = sai_thrift_attribute_t()
                        _elem558.read(iprot)
                        self.attr_list.append(_elem558)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_buffer_profile_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter559 in self.attr_list:
                iter559.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_buffer_profile_args)
sai_thrift_create_buffer_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_buffer_profile_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_buffer_profile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_buffer_profile_result)
sai_thrift_create_buffer_profile_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_buffer_profile_args(object):
    """
    Attributes:
     - buffer_profile_oid

    """


    def __init__(self, buffer_profile_oid=None,):
        self.buffer_profile_oid = buffer_profile_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_profile_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_buffer_profile_args')
        if self.buffer_profile_oid is not None:
            oprot.writeFieldBegin('buffer_profile_oid', TType.I64, 1)
            oprot.writeI64(self.buffer_profile_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_buffer_profile_args)
sai_thrift_remove_buffer_profile_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_profile_oid', None, None, ),  # 1
)


class sai_thrift_remove_buffer_profile_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_buffer_profile_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_buffer_profile_result)
sai_thrift_remove_buffer_profile_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_buffer_profile_attribute_args(object):
    """
    Attributes:
     - buffer_profile_oid
     - attr

    """


    def __init__(self, buffer_profile_oid=None, attr=None,):
        self.buffer_profile_oid = buffer_profile_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_profile_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_buffer_profile_attribute_args')
        if self.buffer_profile_oid is not None:
            oprot.writeFieldBegin('buffer_profile_oid', TType.I64, 1)
            oprot.writeI64(self.buffer_profile_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_buffer_profile_attribute_args)
sai_thrift_set_buffer_profile_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_profile_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_buffer_profile_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_buffer_profile_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_buffer_profile_attribute_result)
sai_thrift_set_buffer_profile_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_buffer_profile_attribute_args(object):
    """
    Attributes:
     - buffer_profile_oid
     - attr_list

    """


    def __init__(self, buffer_profile_oid=None, attr_list=None,):
        self.buffer_profile_oid = buffer_profile_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.buffer_profile_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_profile_attribute_args')
        if self.buffer_profile_oid is not None:
            oprot.writeFieldBegin('buffer_profile_oid', TType.I64, 1)
            oprot.writeI64(self.buffer_profile_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_profile_attribute_args)
sai_thrift_get_buffer_profile_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'buffer_profile_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_buffer_profile_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_buffer_profile_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_buffer_profile_attribute_result)
sai_thrift_get_buffer_profile_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_counter_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype563, _size560) = iprot.readListBegin()
                    for _i564 in range(_size560):
                        _elem565 = sai_thrift_attribute_t()
                        _elem565.read(iprot)
                        self.attr_list.append(_elem565)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_counter_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter566 in self.attr_list:
                iter566.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_counter_args)
sai_thrift_create_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_counter_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_counter_result)
sai_thrift_create_counter_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_counter_args(object):
    """
    Attributes:
     - counter_oid

    """


    def __init__(self, counter_oid=None,):
        self.counter_oid = counter_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_counter_args')
        if self.counter_oid is not None:
            oprot.writeFieldBegin('counter_oid', TType.I64, 1)
            oprot.writeI64(self.counter_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_counter_args)
sai_thrift_remove_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_oid', None, None, ),  # 1
)


class sai_thrift_remove_counter_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_counter_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_counter_result)
sai_thrift_remove_counter_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_counter_attribute_args(object):
    """
    Attributes:
     - counter_oid
     - attr

    """


    def __init__(self, counter_oid=None, attr=None,):
        self.counter_oid = counter_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_counter_attribute_args')
        if self.counter_oid is not None:
            oprot.writeFieldBegin('counter_oid', TType.I64, 1)
            oprot.writeI64(self.counter_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_counter_attribute_args)
sai_thrift_set_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_counter_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_counter_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_counter_attribute_result)
sai_thrift_set_counter_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_counter_attribute_args(object):
    """
    Attributes:
     - counter_oid
     - attr_list

    """


    def __init__(self, counter_oid=None, attr_list=None,):
        self.counter_oid = counter_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_attribute_args')
        if self.counter_oid is not None:
            oprot.writeFieldBegin('counter_oid', TType.I64, 1)
            oprot.writeI64(self.counter_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_attribute_args)
sai_thrift_get_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_counter_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_attribute_result)
sai_thrift_get_counter_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_counter_stats_args(object):
    """
    Attributes:
     - counter_oid
     - counter_ids

    """


    def __init__(self, counter_oid=None, counter_ids=None,):
        self.counter_oid = counter_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype570, _size567) = iprot.readListBegin()
                    for _i571 in range(_size567):
                        _elem572 = iprot.readI32()
                        self.counter_ids.append(_elem572)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_stats_args')
        if self.counter_oid is not None:
            oprot.writeFieldBegin('counter_oid', TType.I64, 1)
            oprot.writeI64(self.counter_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter573 in self.counter_ids:
                oprot.writeI32(iter573)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_stats_args)
sai_thrift_get_counter_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_counter_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype577, _size574) = iprot.readListBegin()
                    for _i578 in range(_size574):
                        _elem579 = iprot.readI64()
                        self.success.append(_elem579)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter580 in self.success:
                oprot.writeI64(iter580)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_stats_result)
sai_thrift_get_counter_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_counter_stats_ext_args(object):
    """
    Attributes:
     - counter_oid
     - counter_ids
     - mode

    """


    def __init__(self, counter_oid=None, counter_ids=None, mode=None,):
        self.counter_oid = counter_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype584, _size581) = iprot.readListBegin()
                    for _i585 in range(_size581):
                        _elem586 = iprot.readI32()
                        self.counter_ids.append(_elem586)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_stats_ext_args')
        if self.counter_oid is not None:
            oprot.writeFieldBegin('counter_oid', TType.I64, 1)
            oprot.writeI64(self.counter_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter587 in self.counter_ids:
                oprot.writeI32(iter587)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_stats_ext_args)
sai_thrift_get_counter_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_counter_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype591, _size588) = iprot.readListBegin()
                    for _i592 in range(_size588):
                        _elem593 = iprot.readI64()
                        self.success.append(_elem593)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_counter_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter594 in self.success:
                oprot.writeI64(iter594)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_counter_stats_ext_result)
sai_thrift_get_counter_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_counter_stats_args(object):
    """
    Attributes:
     - counter_oid
     - counter_ids

    """


    def __init__(self, counter_oid=None, counter_ids=None,):
        self.counter_oid = counter_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype598, _size595) = iprot.readListBegin()
                    for _i599 in range(_size595):
                        _elem600 = iprot.readI32()
                        self.counter_ids.append(_elem600)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_counter_stats_args')
        if self.counter_oid is not None:
            oprot.writeFieldBegin('counter_oid', TType.I64, 1)
            oprot.writeI64(self.counter_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter601 in self.counter_ids:
                oprot.writeI32(iter601)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_counter_stats_args)
sai_thrift_clear_counter_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'counter_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_counter_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_counter_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_counter_stats_result)
sai_thrift_clear_counter_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_debug_counter_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype605, _size602) = iprot.readListBegin()
                    for _i606 in range(_size602):
                        _elem607 = sai_thrift_attribute_t()
                        _elem607.read(iprot)
                        self.attr_list.append(_elem607)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_debug_counter_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter608 in self.attr_list:
                iter608.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_debug_counter_args)
sai_thrift_create_debug_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_debug_counter_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_debug_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_debug_counter_result)
sai_thrift_create_debug_counter_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_debug_counter_args(object):
    """
    Attributes:
     - debug_counter_oid

    """


    def __init__(self, debug_counter_oid=None,):
        self.debug_counter_oid = debug_counter_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.debug_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_debug_counter_args')
        if self.debug_counter_oid is not None:
            oprot.writeFieldBegin('debug_counter_oid', TType.I64, 1)
            oprot.writeI64(self.debug_counter_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_debug_counter_args)
sai_thrift_remove_debug_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'debug_counter_oid', None, None, ),  # 1
)


class sai_thrift_remove_debug_counter_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_debug_counter_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_debug_counter_result)
sai_thrift_remove_debug_counter_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_debug_counter_attribute_args(object):
    """
    Attributes:
     - debug_counter_oid
     - attr

    """


    def __init__(self, debug_counter_oid=None, attr=None,):
        self.debug_counter_oid = debug_counter_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.debug_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_debug_counter_attribute_args')
        if self.debug_counter_oid is not None:
            oprot.writeFieldBegin('debug_counter_oid', TType.I64, 1)
            oprot.writeI64(self.debug_counter_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_debug_counter_attribute_args)
sai_thrift_set_debug_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'debug_counter_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_debug_counter_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_debug_counter_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_debug_counter_attribute_result)
sai_thrift_set_debug_counter_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_debug_counter_attribute_args(object):
    """
    Attributes:
     - debug_counter_oid
     - attr_list

    """


    def __init__(self, debug_counter_oid=None, attr_list=None,):
        self.debug_counter_oid = debug_counter_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.debug_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_debug_counter_attribute_args')
        if self.debug_counter_oid is not None:
            oprot.writeFieldBegin('debug_counter_oid', TType.I64, 1)
            oprot.writeI64(self.debug_counter_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_debug_counter_attribute_args)
sai_thrift_get_debug_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'debug_counter_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_debug_counter_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_debug_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_debug_counter_attribute_result)
sai_thrift_get_debug_counter_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_dtel_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype612, _size609) = iprot.readListBegin()
                    for _i613 in range(_size609):
                        _elem614 = sai_thrift_attribute_t()
                        _elem614.read(iprot)
                        self.attr_list.append(_elem614)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter615 in self.attr_list:
                iter615.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_args)
sai_thrift_create_dtel_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_dtel_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_result)
sai_thrift_create_dtel_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_dtel_args(object):
    """
    Attributes:
     - dtel_oid

    """


    def __init__(self, dtel_oid=None,):
        self.dtel_oid = dtel_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_args')
        if self.dtel_oid is not None:
            oprot.writeFieldBegin('dtel_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_args)
sai_thrift_remove_dtel_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_oid', None, None, ),  # 1
)


class sai_thrift_remove_dtel_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_result)
sai_thrift_remove_dtel_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_dtel_attribute_args(object):
    """
    Attributes:
     - dtel_oid
     - attr

    """


    def __init__(self, dtel_oid=None, attr=None,):
        self.dtel_oid = dtel_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_attribute_args')
        if self.dtel_oid is not None:
            oprot.writeFieldBegin('dtel_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_attribute_args)
sai_thrift_set_dtel_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_dtel_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_attribute_result)
sai_thrift_set_dtel_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_dtel_attribute_args(object):
    """
    Attributes:
     - dtel_oid
     - attr_list

    """


    def __init__(self, dtel_oid=None, attr_list=None,):
        self.dtel_oid = dtel_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_attribute_args')
        if self.dtel_oid is not None:
            oprot.writeFieldBegin('dtel_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_attribute_args)
sai_thrift_get_dtel_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_dtel_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_attribute_result)
sai_thrift_get_dtel_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_dtel_queue_report_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype619, _size616) = iprot.readListBegin()
                    for _i620 in range(_size616):
                        _elem621 = sai_thrift_attribute_t()
                        _elem621.read(iprot)
                        self.attr_list.append(_elem621)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_queue_report_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter622 in self.attr_list:
                iter622.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_queue_report_args)
sai_thrift_create_dtel_queue_report_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_dtel_queue_report_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_queue_report_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_queue_report_result)
sai_thrift_create_dtel_queue_report_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_dtel_queue_report_args(object):
    """
    Attributes:
     - dtel_queue_report_oid

    """


    def __init__(self, dtel_queue_report_oid=None,):
        self.dtel_queue_report_oid = dtel_queue_report_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_queue_report_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_queue_report_args')
        if self.dtel_queue_report_oid is not None:
            oprot.writeFieldBegin('dtel_queue_report_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_queue_report_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_queue_report_args)
sai_thrift_remove_dtel_queue_report_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_queue_report_oid', None, None, ),  # 1
)


class sai_thrift_remove_dtel_queue_report_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_queue_report_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_queue_report_result)
sai_thrift_remove_dtel_queue_report_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_dtel_queue_report_attribute_args(object):
    """
    Attributes:
     - dtel_queue_report_oid
     - attr

    """


    def __init__(self, dtel_queue_report_oid=None, attr=None,):
        self.dtel_queue_report_oid = dtel_queue_report_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_queue_report_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_queue_report_attribute_args')
        if self.dtel_queue_report_oid is not None:
            oprot.writeFieldBegin('dtel_queue_report_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_queue_report_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_queue_report_attribute_args)
sai_thrift_set_dtel_queue_report_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_queue_report_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_dtel_queue_report_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_queue_report_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_queue_report_attribute_result)
sai_thrift_set_dtel_queue_report_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_dtel_queue_report_attribute_args(object):
    """
    Attributes:
     - dtel_queue_report_oid
     - attr_list

    """


    def __init__(self, dtel_queue_report_oid=None, attr_list=None,):
        self.dtel_queue_report_oid = dtel_queue_report_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_queue_report_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_queue_report_attribute_args')
        if self.dtel_queue_report_oid is not None:
            oprot.writeFieldBegin('dtel_queue_report_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_queue_report_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_queue_report_attribute_args)
sai_thrift_get_dtel_queue_report_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_queue_report_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_dtel_queue_report_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_queue_report_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_queue_report_attribute_result)
sai_thrift_get_dtel_queue_report_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_dtel_int_session_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype626, _size623) = iprot.readListBegin()
                    for _i627 in range(_size623):
                        _elem628 = sai_thrift_attribute_t()
                        _elem628.read(iprot)
                        self.attr_list.append(_elem628)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_int_session_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter629 in self.attr_list:
                iter629.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_int_session_args)
sai_thrift_create_dtel_int_session_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_dtel_int_session_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_int_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_int_session_result)
sai_thrift_create_dtel_int_session_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_dtel_int_session_args(object):
    """
    Attributes:
     - dtel_int_session_oid

    """


    def __init__(self, dtel_int_session_oid=None,):
        self.dtel_int_session_oid = dtel_int_session_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_int_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_int_session_args')
        if self.dtel_int_session_oid is not None:
            oprot.writeFieldBegin('dtel_int_session_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_int_session_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_int_session_args)
sai_thrift_remove_dtel_int_session_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_int_session_oid', None, None, ),  # 1
)


class sai_thrift_remove_dtel_int_session_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_int_session_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_int_session_result)
sai_thrift_remove_dtel_int_session_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_dtel_int_session_attribute_args(object):
    """
    Attributes:
     - dtel_int_session_oid
     - attr

    """


    def __init__(self, dtel_int_session_oid=None, attr=None,):
        self.dtel_int_session_oid = dtel_int_session_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_int_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_int_session_attribute_args')
        if self.dtel_int_session_oid is not None:
            oprot.writeFieldBegin('dtel_int_session_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_int_session_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_int_session_attribute_args)
sai_thrift_set_dtel_int_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_int_session_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_dtel_int_session_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_int_session_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_int_session_attribute_result)
sai_thrift_set_dtel_int_session_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_dtel_int_session_attribute_args(object):
    """
    Attributes:
     - dtel_int_session_oid
     - attr_list

    """


    def __init__(self, dtel_int_session_oid=None, attr_list=None,):
        self.dtel_int_session_oid = dtel_int_session_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_int_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_int_session_attribute_args')
        if self.dtel_int_session_oid is not None:
            oprot.writeFieldBegin('dtel_int_session_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_int_session_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_int_session_attribute_args)
sai_thrift_get_dtel_int_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_int_session_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_dtel_int_session_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_int_session_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_int_session_attribute_result)
sai_thrift_get_dtel_int_session_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_dtel_report_session_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype633, _size630) = iprot.readListBegin()
                    for _i634 in range(_size630):
                        _elem635 = sai_thrift_attribute_t()
                        _elem635.read(iprot)
                        self.attr_list.append(_elem635)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_report_session_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter636 in self.attr_list:
                iter636.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_report_session_args)
sai_thrift_create_dtel_report_session_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_dtel_report_session_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_report_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_report_session_result)
sai_thrift_create_dtel_report_session_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_dtel_report_session_args(object):
    """
    Attributes:
     - dtel_report_session_oid

    """


    def __init__(self, dtel_report_session_oid=None,):
        self.dtel_report_session_oid = dtel_report_session_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_report_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_report_session_args')
        if self.dtel_report_session_oid is not None:
            oprot.writeFieldBegin('dtel_report_session_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_report_session_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_report_session_args)
sai_thrift_remove_dtel_report_session_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_report_session_oid', None, None, ),  # 1
)


class sai_thrift_remove_dtel_report_session_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_report_session_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_report_session_result)
sai_thrift_remove_dtel_report_session_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_dtel_report_session_attribute_args(object):
    """
    Attributes:
     - dtel_report_session_oid
     - attr

    """


    def __init__(self, dtel_report_session_oid=None, attr=None,):
        self.dtel_report_session_oid = dtel_report_session_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_report_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_report_session_attribute_args')
        if self.dtel_report_session_oid is not None:
            oprot.writeFieldBegin('dtel_report_session_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_report_session_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_report_session_attribute_args)
sai_thrift_set_dtel_report_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_report_session_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_dtel_report_session_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_report_session_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_report_session_attribute_result)
sai_thrift_set_dtel_report_session_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_dtel_report_session_attribute_args(object):
    """
    Attributes:
     - dtel_report_session_oid
     - attr_list

    """


    def __init__(self, dtel_report_session_oid=None, attr_list=None,):
        self.dtel_report_session_oid = dtel_report_session_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_report_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_report_session_attribute_args')
        if self.dtel_report_session_oid is not None:
            oprot.writeFieldBegin('dtel_report_session_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_report_session_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_report_session_attribute_args)
sai_thrift_get_dtel_report_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_report_session_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_dtel_report_session_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_report_session_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_report_session_attribute_result)
sai_thrift_get_dtel_report_session_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_dtel_event_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype640, _size637) = iprot.readListBegin()
                    for _i641 in range(_size637):
                        _elem642 = sai_thrift_attribute_t()
                        _elem642.read(iprot)
                        self.attr_list.append(_elem642)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_event_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter643 in self.attr_list:
                iter643.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_event_args)
sai_thrift_create_dtel_event_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_dtel_event_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_dtel_event_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_dtel_event_result)
sai_thrift_create_dtel_event_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_dtel_event_args(object):
    """
    Attributes:
     - dtel_event_oid

    """


    def __init__(self, dtel_event_oid=None,):
        self.dtel_event_oid = dtel_event_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_event_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_event_args')
        if self.dtel_event_oid is not None:
            oprot.writeFieldBegin('dtel_event_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_event_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_event_args)
sai_thrift_remove_dtel_event_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_event_oid', None, None, ),  # 1
)


class sai_thrift_remove_dtel_event_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_dtel_event_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_dtel_event_result)
sai_thrift_remove_dtel_event_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_dtel_event_attribute_args(object):
    """
    Attributes:
     - dtel_event_oid
     - attr

    """


    def __init__(self, dtel_event_oid=None, attr=None,):
        self.dtel_event_oid = dtel_event_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_event_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_event_attribute_args')
        if self.dtel_event_oid is not None:
            oprot.writeFieldBegin('dtel_event_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_event_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_event_attribute_args)
sai_thrift_set_dtel_event_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_event_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_dtel_event_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_dtel_event_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_dtel_event_attribute_result)
sai_thrift_set_dtel_event_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_dtel_event_attribute_args(object):
    """
    Attributes:
     - dtel_event_oid
     - attr_list

    """


    def __init__(self, dtel_event_oid=None, attr_list=None,):
        self.dtel_event_oid = dtel_event_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.dtel_event_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_event_attribute_args')
        if self.dtel_event_oid is not None:
            oprot.writeFieldBegin('dtel_event_oid', TType.I64, 1)
            oprot.writeI64(self.dtel_event_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_event_attribute_args)
sai_thrift_get_dtel_event_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'dtel_event_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_dtel_event_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_dtel_event_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_dtel_event_attribute_result)
sai_thrift_get_dtel_event_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_fdb_entry_args(object):
    """
    Attributes:
     - fdb_entry
     - attr_list

    """


    def __init__(self, fdb_entry=None, attr_list=None,):
        self.fdb_entry = fdb_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.fdb_entry = sai_thrift_fdb_entry_t()
                    self.fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype647, _size644) = iprot.readListBegin()
                    for _i648 in range(_size644):
                        _elem649 = sai_thrift_attribute_t()
                        _elem649.read(iprot)
                        self.attr_list.append(_elem649)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_fdb_entry_args')
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.STRUCT, 1)
            self.fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter650 in self.attr_list:
                iter650.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_fdb_entry_args)
sai_thrift_create_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'fdb_entry', [sai_thrift_fdb_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_fdb_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_fdb_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_fdb_entry_result)
sai_thrift_create_fdb_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_fdb_entry_args(object):
    """
    Attributes:
     - fdb_entry

    """


    def __init__(self, fdb_entry=None,):
        self.fdb_entry = fdb_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.fdb_entry = sai_thrift_fdb_entry_t()
                    self.fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_fdb_entry_args')
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.STRUCT, 1)
            self.fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_fdb_entry_args)
sai_thrift_remove_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'fdb_entry', [sai_thrift_fdb_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_fdb_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_fdb_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_fdb_entry_result)
sai_thrift_remove_fdb_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_fdb_entry_attribute_args(object):
    """
    Attributes:
     - fdb_entry
     - attr

    """


    def __init__(self, fdb_entry=None, attr=None,):
        self.fdb_entry = fdb_entry
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.fdb_entry = sai_thrift_fdb_entry_t()
                    self.fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_fdb_entry_attribute_args')
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.STRUCT, 1)
            self.fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_fdb_entry_attribute_args)
sai_thrift_set_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'fdb_entry', [sai_thrift_fdb_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_fdb_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_fdb_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_fdb_entry_attribute_result)
sai_thrift_set_fdb_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_fdb_entry_attribute_args(object):
    """
    Attributes:
     - fdb_entry
     - attr_list

    """


    def __init__(self, fdb_entry=None, attr_list=None,):
        self.fdb_entry = fdb_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.fdb_entry = sai_thrift_fdb_entry_t()
                    self.fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_fdb_entry_attribute_args')
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.STRUCT, 1)
            self.fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_fdb_entry_attribute_args)
sai_thrift_get_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'fdb_entry', [sai_thrift_fdb_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_fdb_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_fdb_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_fdb_entry_attribute_result)
sai_thrift_get_fdb_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_flush_fdb_entries_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype654, _size651) = iprot.readListBegin()
                    for _i655 in range(_size651):
                        _elem656 = sai_thrift_attribute_t()
                        _elem656.read(iprot)
                        self.attr_list.append(_elem656)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_flush_fdb_entries_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter657 in self.attr_list:
                iter657.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_flush_fdb_entries_args)
sai_thrift_flush_fdb_entries_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_flush_fdb_entries_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_flush_fdb_entries_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_flush_fdb_entries_result)
sai_thrift_flush_fdb_entries_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_create_fdb_entry_args(object):
    """
    Attributes:
     - fdb_entry
     - attr_count
     - attr_list
     - mode

    """


    def __init__(self, fdb_entry=None, attr_count=None, attr_list=None, mode=None,):
        self.fdb_entry = fdb_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.fdb_entry = []
                    (_etype661, _size658) = iprot.readListBegin()
                    for _i662 in range(_size658):
                        _elem663 = sai_thrift_fdb_entry_t()
                        _elem663.read(iprot)
                        self.fdb_entry.append(_elem663)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype667, _size664) = iprot.readListBegin()
                    for _i668 in range(_size664):
                        _elem669 = iprot.readI32()
                        self.attr_count.append(_elem669)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype673, _size670) = iprot.readListBegin()
                    for _i674 in range(_size670):
                        _elem675 = sai_thrift_attribute_t()
                        _elem675.read(iprot)
                        self.attr_list.append(_elem675)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_fdb_entry_args')
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.fdb_entry))
            for iter676 in self.fdb_entry:
                iter676.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter677 in self.attr_count:
                oprot.writeI32(iter677)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter678 in self.attr_list:
                iter678.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_fdb_entry_args)
sai_thrift_bulk_create_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fdb_entry', (TType.STRUCT, [sai_thrift_fdb_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
)


class sai_thrift_bulk_create_fdb_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype682, _size679) = iprot.readListBegin()
                    for _i683 in range(_size679):
                        _elem684 = iprot.readI32()
                        self.success.append(_elem684)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_fdb_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter685 in self.success:
                oprot.writeI32(iter685)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_fdb_entry_result)
sai_thrift_bulk_create_fdb_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_remove_fdb_entry_args(object):
    """
    Attributes:
     - fdb_entry
     - mode

    """


    def __init__(self, fdb_entry=None, mode=None,):
        self.fdb_entry = fdb_entry
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.fdb_entry = []
                    (_etype689, _size686) = iprot.readListBegin()
                    for _i690 in range(_size686):
                        _elem691 = sai_thrift_fdb_entry_t()
                        _elem691.read(iprot)
                        self.fdb_entry.append(_elem691)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_fdb_entry_args')
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.fdb_entry))
            for iter692 in self.fdb_entry:
                iter692.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 2)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_fdb_entry_args)
sai_thrift_bulk_remove_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fdb_entry', (TType.STRUCT, [sai_thrift_fdb_entry_t, None], False), None, ),  # 1
    (2, TType.I32, 'mode', None, None, ),  # 2
)


class sai_thrift_bulk_remove_fdb_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype696, _size693) = iprot.readListBegin()
                    for _i697 in range(_size693):
                        _elem698 = iprot.readI32()
                        self.success.append(_elem698)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_fdb_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter699 in self.success:
                oprot.writeI32(iter699)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_fdb_entry_result)
sai_thrift_bulk_remove_fdb_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_set_fdb_entry_attribute_args(object):
    """
    Attributes:
     - fdb_entry
     - attr_list
     - mode

    """


    def __init__(self, fdb_entry=None, attr_list=None, mode=None,):
        self.fdb_entry = fdb_entry
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.fdb_entry = []
                    (_etype703, _size700) = iprot.readListBegin()
                    for _i704 in range(_size700):
                        _elem705 = sai_thrift_fdb_entry_t()
                        _elem705.read(iprot)
                        self.fdb_entry.append(_elem705)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype709, _size706) = iprot.readListBegin()
                    for _i710 in range(_size706):
                        _elem711 = sai_thrift_attribute_t()
                        _elem711.read(iprot)
                        self.attr_list.append(_elem711)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_fdb_entry_attribute_args')
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.fdb_entry))
            for iter712 in self.fdb_entry:
                iter712.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter713 in self.attr_list:
                iter713.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_fdb_entry_attribute_args)
sai_thrift_bulk_set_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fdb_entry', (TType.STRUCT, [sai_thrift_fdb_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_bulk_set_fdb_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype717, _size714) = iprot.readListBegin()
                    for _i718 in range(_size714):
                        _elem719 = iprot.readI32()
                        self.success.append(_elem719)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_fdb_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter720 in self.success:
                oprot.writeI32(iter720)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_fdb_entry_attribute_result)
sai_thrift_bulk_set_fdb_entry_attribute_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_get_fdb_entry_attribute_args(object):
    """
    Attributes:
     - fdb_entry
     - attr_count
     - attr_list
     - mode
     - object_statuses

    """


    def __init__(self, fdb_entry=None, attr_count=None, attr_list=None, mode=None, object_statuses=None,):
        self.fdb_entry = fdb_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode
        self.object_statuses = object_statuses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.fdb_entry = []
                    (_etype724, _size721) = iprot.readListBegin()
                    for _i725 in range(_size721):
                        _elem726 = sai_thrift_fdb_entry_t()
                        _elem726.read(iprot)
                        self.fdb_entry.append(_elem726)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype730, _size727) = iprot.readListBegin()
                    for _i731 in range(_size727):
                        _elem732 = iprot.readI32()
                        self.attr_count.append(_elem732)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.object_statuses = []
                    (_etype736, _size733) = iprot.readListBegin()
                    for _i737 in range(_size733):
                        _elem738 = iprot.readI32()
                        self.object_statuses.append(_elem738)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_fdb_entry_attribute_args')
        if self.fdb_entry is not None:
            oprot.writeFieldBegin('fdb_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.fdb_entry))
            for iter739 in self.fdb_entry:
                iter739.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter740 in self.attr_count:
                oprot.writeI32(iter740)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 3)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.object_statuses is not None:
            oprot.writeFieldBegin('object_statuses', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.object_statuses))
            for iter741 in self.object_statuses:
                oprot.writeI32(iter741)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_fdb_entry_attribute_args)
sai_thrift_bulk_get_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'fdb_entry', (TType.STRUCT, [sai_thrift_fdb_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
    (5, TType.LIST, 'object_statuses', (TType.I32, None, False), None, ),  # 5
)


class sai_thrift_bulk_get_fdb_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_fdb_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_fdb_entry_attribute_result)
sai_thrift_bulk_get_fdb_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_generic_programmable_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype745, _size742) = iprot.readListBegin()
                    for _i746 in range(_size742):
                        _elem747 = sai_thrift_attribute_t()
                        _elem747.read(iprot)
                        self.attr_list.append(_elem747)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_generic_programmable_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter748 in self.attr_list:
                iter748.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_generic_programmable_args)
sai_thrift_create_generic_programmable_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_generic_programmable_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_generic_programmable_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_generic_programmable_result)
sai_thrift_create_generic_programmable_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_generic_programmable_args(object):
    """
    Attributes:
     - generic_programmable_oid

    """


    def __init__(self, generic_programmable_oid=None,):
        self.generic_programmable_oid = generic_programmable_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.generic_programmable_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_generic_programmable_args')
        if self.generic_programmable_oid is not None:
            oprot.writeFieldBegin('generic_programmable_oid', TType.I64, 1)
            oprot.writeI64(self.generic_programmable_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_generic_programmable_args)
sai_thrift_remove_generic_programmable_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'generic_programmable_oid', None, None, ),  # 1
)


class sai_thrift_remove_generic_programmable_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_generic_programmable_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_generic_programmable_result)
sai_thrift_remove_generic_programmable_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_generic_programmable_attribute_args(object):
    """
    Attributes:
     - generic_programmable_oid
     - attr

    """


    def __init__(self, generic_programmable_oid=None, attr=None,):
        self.generic_programmable_oid = generic_programmable_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.generic_programmable_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_generic_programmable_attribute_args')
        if self.generic_programmable_oid is not None:
            oprot.writeFieldBegin('generic_programmable_oid', TType.I64, 1)
            oprot.writeI64(self.generic_programmable_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_generic_programmable_attribute_args)
sai_thrift_set_generic_programmable_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'generic_programmable_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_generic_programmable_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_generic_programmable_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_generic_programmable_attribute_result)
sai_thrift_set_generic_programmable_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_generic_programmable_attribute_args(object):
    """
    Attributes:
     - generic_programmable_oid
     - attr_list

    """


    def __init__(self, generic_programmable_oid=None, attr_list=None,):
        self.generic_programmable_oid = generic_programmable_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.generic_programmable_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_generic_programmable_attribute_args')
        if self.generic_programmable_oid is not None:
            oprot.writeFieldBegin('generic_programmable_oid', TType.I64, 1)
            oprot.writeI64(self.generic_programmable_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_generic_programmable_attribute_args)
sai_thrift_get_generic_programmable_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'generic_programmable_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_generic_programmable_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_generic_programmable_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_generic_programmable_attribute_result)
sai_thrift_get_generic_programmable_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_fine_grained_hash_field_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype752, _size749) = iprot.readListBegin()
                    for _i753 in range(_size749):
                        _elem754 = sai_thrift_attribute_t()
                        _elem754.read(iprot)
                        self.attr_list.append(_elem754)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_fine_grained_hash_field_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter755 in self.attr_list:
                iter755.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_fine_grained_hash_field_args)
sai_thrift_create_fine_grained_hash_field_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_fine_grained_hash_field_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_fine_grained_hash_field_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_fine_grained_hash_field_result)
sai_thrift_create_fine_grained_hash_field_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_fine_grained_hash_field_args(object):
    """
    Attributes:
     - fine_grained_hash_field_oid

    """


    def __init__(self, fine_grained_hash_field_oid=None,):
        self.fine_grained_hash_field_oid = fine_grained_hash_field_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.fine_grained_hash_field_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_fine_grained_hash_field_args')
        if self.fine_grained_hash_field_oid is not None:
            oprot.writeFieldBegin('fine_grained_hash_field_oid', TType.I64, 1)
            oprot.writeI64(self.fine_grained_hash_field_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_fine_grained_hash_field_args)
sai_thrift_remove_fine_grained_hash_field_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'fine_grained_hash_field_oid', None, None, ),  # 1
)


class sai_thrift_remove_fine_grained_hash_field_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_fine_grained_hash_field_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_fine_grained_hash_field_result)
sai_thrift_remove_fine_grained_hash_field_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_fine_grained_hash_field_attribute_args(object):
    """
    Attributes:
     - fine_grained_hash_field_oid
     - attr

    """


    def __init__(self, fine_grained_hash_field_oid=None, attr=None,):
        self.fine_grained_hash_field_oid = fine_grained_hash_field_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.fine_grained_hash_field_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_fine_grained_hash_field_attribute_args')
        if self.fine_grained_hash_field_oid is not None:
            oprot.writeFieldBegin('fine_grained_hash_field_oid', TType.I64, 1)
            oprot.writeI64(self.fine_grained_hash_field_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_fine_grained_hash_field_attribute_args)
sai_thrift_set_fine_grained_hash_field_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'fine_grained_hash_field_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_fine_grained_hash_field_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_fine_grained_hash_field_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_fine_grained_hash_field_attribute_result)
sai_thrift_set_fine_grained_hash_field_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_fine_grained_hash_field_attribute_args(object):
    """
    Attributes:
     - fine_grained_hash_field_oid
     - attr_list

    """


    def __init__(self, fine_grained_hash_field_oid=None, attr_list=None,):
        self.fine_grained_hash_field_oid = fine_grained_hash_field_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.fine_grained_hash_field_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_fine_grained_hash_field_attribute_args')
        if self.fine_grained_hash_field_oid is not None:
            oprot.writeFieldBegin('fine_grained_hash_field_oid', TType.I64, 1)
            oprot.writeI64(self.fine_grained_hash_field_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_fine_grained_hash_field_attribute_args)
sai_thrift_get_fine_grained_hash_field_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'fine_grained_hash_field_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_fine_grained_hash_field_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_fine_grained_hash_field_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_fine_grained_hash_field_attribute_result)
sai_thrift_get_fine_grained_hash_field_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_hash_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype759, _size756) = iprot.readListBegin()
                    for _i760 in range(_size756):
                        _elem761 = sai_thrift_attribute_t()
                        _elem761.read(iprot)
                        self.attr_list.append(_elem761)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hash_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter762 in self.attr_list:
                iter762.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hash_args)
sai_thrift_create_hash_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hash_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hash_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hash_result)
sai_thrift_create_hash_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_hash_args(object):
    """
    Attributes:
     - hash_oid

    """


    def __init__(self, hash_oid=None,):
        self.hash_oid = hash_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hash_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hash_args')
        if self.hash_oid is not None:
            oprot.writeFieldBegin('hash_oid', TType.I64, 1)
            oprot.writeI64(self.hash_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hash_args)
sai_thrift_remove_hash_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hash_oid', None, None, ),  # 1
)


class sai_thrift_remove_hash_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hash_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hash_result)
sai_thrift_remove_hash_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_hash_attribute_args(object):
    """
    Attributes:
     - hash_oid
     - attr

    """


    def __init__(self, hash_oid=None, attr=None,):
        self.hash_oid = hash_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hash_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hash_attribute_args')
        if self.hash_oid is not None:
            oprot.writeFieldBegin('hash_oid', TType.I64, 1)
            oprot.writeI64(self.hash_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hash_attribute_args)
sai_thrift_set_hash_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hash_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hash_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hash_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hash_attribute_result)
sai_thrift_set_hash_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_hash_attribute_args(object):
    """
    Attributes:
     - hash_oid
     - attr_list

    """


    def __init__(self, hash_oid=None, attr_list=None,):
        self.hash_oid = hash_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hash_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hash_attribute_args')
        if self.hash_oid is not None:
            oprot.writeFieldBegin('hash_oid', TType.I64, 1)
            oprot.writeI64(self.hash_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hash_attribute_args)
sai_thrift_get_hash_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hash_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_hash_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hash_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hash_attribute_result)
sai_thrift_get_hash_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_hostif_trap_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype766, _size763) = iprot.readListBegin()
                    for _i767 in range(_size763):
                        _elem768 = sai_thrift_attribute_t()
                        _elem768.read(iprot)
                        self.attr_list.append(_elem768)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_trap_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter769 in self.attr_list:
                iter769.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_trap_group_args)
sai_thrift_create_hostif_trap_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hostif_trap_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_trap_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_trap_group_result)
sai_thrift_create_hostif_trap_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_hostif_trap_group_args(object):
    """
    Attributes:
     - hostif_trap_group_oid

    """


    def __init__(self, hostif_trap_group_oid=None,):
        self.hostif_trap_group_oid = hostif_trap_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_trap_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_trap_group_args')
        if self.hostif_trap_group_oid is not None:
            oprot.writeFieldBegin('hostif_trap_group_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_trap_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_trap_group_args)
sai_thrift_remove_hostif_trap_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_trap_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_hostif_trap_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_trap_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_trap_group_result)
sai_thrift_remove_hostif_trap_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_hostif_trap_group_attribute_args(object):
    """
    Attributes:
     - hostif_trap_group_oid
     - attr

    """


    def __init__(self, hostif_trap_group_oid=None, attr=None,):
        self.hostif_trap_group_oid = hostif_trap_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_trap_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_trap_group_attribute_args')
        if self.hostif_trap_group_oid is not None:
            oprot.writeFieldBegin('hostif_trap_group_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_trap_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_trap_group_attribute_args)
sai_thrift_set_hostif_trap_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_trap_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hostif_trap_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_trap_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_trap_group_attribute_result)
sai_thrift_set_hostif_trap_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_hostif_trap_group_attribute_args(object):
    """
    Attributes:
     - hostif_trap_group_oid
     - attr_list

    """


    def __init__(self, hostif_trap_group_oid=None, attr_list=None,):
        self.hostif_trap_group_oid = hostif_trap_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_trap_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_trap_group_attribute_args')
        if self.hostif_trap_group_oid is not None:
            oprot.writeFieldBegin('hostif_trap_group_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_trap_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_trap_group_attribute_args)
sai_thrift_get_hostif_trap_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_trap_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_hostif_trap_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_trap_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_trap_group_attribute_result)
sai_thrift_get_hostif_trap_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_hostif_trap_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype773, _size770) = iprot.readListBegin()
                    for _i774 in range(_size770):
                        _elem775 = sai_thrift_attribute_t()
                        _elem775.read(iprot)
                        self.attr_list.append(_elem775)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_trap_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter776 in self.attr_list:
                iter776.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_trap_args)
sai_thrift_create_hostif_trap_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hostif_trap_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_trap_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_trap_result)
sai_thrift_create_hostif_trap_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_hostif_trap_args(object):
    """
    Attributes:
     - hostif_trap_oid

    """


    def __init__(self, hostif_trap_oid=None,):
        self.hostif_trap_oid = hostif_trap_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_trap_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_trap_args')
        if self.hostif_trap_oid is not None:
            oprot.writeFieldBegin('hostif_trap_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_trap_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_trap_args)
sai_thrift_remove_hostif_trap_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_trap_oid', None, None, ),  # 1
)


class sai_thrift_remove_hostif_trap_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_trap_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_trap_result)
sai_thrift_remove_hostif_trap_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_hostif_trap_attribute_args(object):
    """
    Attributes:
     - hostif_trap_oid
     - attr

    """


    def __init__(self, hostif_trap_oid=None, attr=None,):
        self.hostif_trap_oid = hostif_trap_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_trap_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_trap_attribute_args')
        if self.hostif_trap_oid is not None:
            oprot.writeFieldBegin('hostif_trap_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_trap_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_trap_attribute_args)
sai_thrift_set_hostif_trap_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_trap_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hostif_trap_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_trap_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_trap_attribute_result)
sai_thrift_set_hostif_trap_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_hostif_trap_attribute_args(object):
    """
    Attributes:
     - hostif_trap_oid
     - attr_list

    """


    def __init__(self, hostif_trap_oid=None, attr_list=None,):
        self.hostif_trap_oid = hostif_trap_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_trap_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_trap_attribute_args')
        if self.hostif_trap_oid is not None:
            oprot.writeFieldBegin('hostif_trap_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_trap_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_trap_attribute_args)
sai_thrift_get_hostif_trap_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_trap_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_hostif_trap_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_trap_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_trap_attribute_result)
sai_thrift_get_hostif_trap_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_hostif_user_defined_trap_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype780, _size777) = iprot.readListBegin()
                    for _i781 in range(_size777):
                        _elem782 = sai_thrift_attribute_t()
                        _elem782.read(iprot)
                        self.attr_list.append(_elem782)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_user_defined_trap_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter783 in self.attr_list:
                iter783.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_user_defined_trap_args)
sai_thrift_create_hostif_user_defined_trap_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hostif_user_defined_trap_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_user_defined_trap_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_user_defined_trap_result)
sai_thrift_create_hostif_user_defined_trap_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_hostif_user_defined_trap_args(object):
    """
    Attributes:
     - hostif_user_defined_trap_oid

    """


    def __init__(self, hostif_user_defined_trap_oid=None,):
        self.hostif_user_defined_trap_oid = hostif_user_defined_trap_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_user_defined_trap_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_user_defined_trap_args')
        if self.hostif_user_defined_trap_oid is not None:
            oprot.writeFieldBegin('hostif_user_defined_trap_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_user_defined_trap_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_user_defined_trap_args)
sai_thrift_remove_hostif_user_defined_trap_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_user_defined_trap_oid', None, None, ),  # 1
)


class sai_thrift_remove_hostif_user_defined_trap_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_user_defined_trap_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_user_defined_trap_result)
sai_thrift_remove_hostif_user_defined_trap_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_hostif_user_defined_trap_attribute_args(object):
    """
    Attributes:
     - hostif_user_defined_trap_oid
     - attr

    """


    def __init__(self, hostif_user_defined_trap_oid=None, attr=None,):
        self.hostif_user_defined_trap_oid = hostif_user_defined_trap_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_user_defined_trap_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_user_defined_trap_attribute_args')
        if self.hostif_user_defined_trap_oid is not None:
            oprot.writeFieldBegin('hostif_user_defined_trap_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_user_defined_trap_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_user_defined_trap_attribute_args)
sai_thrift_set_hostif_user_defined_trap_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_user_defined_trap_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hostif_user_defined_trap_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_user_defined_trap_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_user_defined_trap_attribute_result)
sai_thrift_set_hostif_user_defined_trap_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_hostif_user_defined_trap_attribute_args(object):
    """
    Attributes:
     - hostif_user_defined_trap_oid
     - attr_list

    """


    def __init__(self, hostif_user_defined_trap_oid=None, attr_list=None,):
        self.hostif_user_defined_trap_oid = hostif_user_defined_trap_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_user_defined_trap_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_user_defined_trap_attribute_args')
        if self.hostif_user_defined_trap_oid is not None:
            oprot.writeFieldBegin('hostif_user_defined_trap_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_user_defined_trap_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_user_defined_trap_attribute_args)
sai_thrift_get_hostif_user_defined_trap_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_user_defined_trap_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_hostif_user_defined_trap_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_user_defined_trap_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_user_defined_trap_attribute_result)
sai_thrift_get_hostif_user_defined_trap_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_hostif_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype787, _size784) = iprot.readListBegin()
                    for _i788 in range(_size784):
                        _elem789 = sai_thrift_attribute_t()
                        _elem789.read(iprot)
                        self.attr_list.append(_elem789)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter790 in self.attr_list:
                iter790.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_args)
sai_thrift_create_hostif_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hostif_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_result)
sai_thrift_create_hostif_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_hostif_args(object):
    """
    Attributes:
     - hostif_oid

    """


    def __init__(self, hostif_oid=None,):
        self.hostif_oid = hostif_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_args')
        if self.hostif_oid is not None:
            oprot.writeFieldBegin('hostif_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_args)
sai_thrift_remove_hostif_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_oid', None, None, ),  # 1
)


class sai_thrift_remove_hostif_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_result)
sai_thrift_remove_hostif_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_hostif_attribute_args(object):
    """
    Attributes:
     - hostif_oid
     - attr

    """


    def __init__(self, hostif_oid=None, attr=None,):
        self.hostif_oid = hostif_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_attribute_args')
        if self.hostif_oid is not None:
            oprot.writeFieldBegin('hostif_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_attribute_args)
sai_thrift_set_hostif_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hostif_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_attribute_result)
sai_thrift_set_hostif_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_hostif_attribute_args(object):
    """
    Attributes:
     - hostif_oid
     - attr_list

    """


    def __init__(self, hostif_oid=None, attr_list=None,):
        self.hostif_oid = hostif_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_attribute_args')
        if self.hostif_oid is not None:
            oprot.writeFieldBegin('hostif_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_attribute_args)
sai_thrift_get_hostif_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_hostif_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_attribute_result)
sai_thrift_get_hostif_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_hostif_table_entry_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype794, _size791) = iprot.readListBegin()
                    for _i795 in range(_size791):
                        _elem796 = sai_thrift_attribute_t()
                        _elem796.read(iprot)
                        self.attr_list.append(_elem796)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_table_entry_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter797 in self.attr_list:
                iter797.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_table_entry_args)
sai_thrift_create_hostif_table_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_hostif_table_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_hostif_table_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_hostif_table_entry_result)
sai_thrift_create_hostif_table_entry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_hostif_table_entry_args(object):
    """
    Attributes:
     - hostif_table_entry_oid

    """


    def __init__(self, hostif_table_entry_oid=None,):
        self.hostif_table_entry_oid = hostif_table_entry_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_table_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_table_entry_args')
        if self.hostif_table_entry_oid is not None:
            oprot.writeFieldBegin('hostif_table_entry_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_table_entry_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_table_entry_args)
sai_thrift_remove_hostif_table_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_table_entry_oid', None, None, ),  # 1
)


class sai_thrift_remove_hostif_table_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_hostif_table_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_hostif_table_entry_result)
sai_thrift_remove_hostif_table_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_hostif_table_entry_attribute_args(object):
    """
    Attributes:
     - hostif_table_entry_oid
     - attr

    """


    def __init__(self, hostif_table_entry_oid=None, attr=None,):
        self.hostif_table_entry_oid = hostif_table_entry_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_table_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_table_entry_attribute_args')
        if self.hostif_table_entry_oid is not None:
            oprot.writeFieldBegin('hostif_table_entry_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_table_entry_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_table_entry_attribute_args)
sai_thrift_set_hostif_table_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_table_entry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_hostif_table_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_hostif_table_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_hostif_table_entry_attribute_result)
sai_thrift_set_hostif_table_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_hostif_table_entry_attribute_args(object):
    """
    Attributes:
     - hostif_table_entry_oid
     - attr_list

    """


    def __init__(self, hostif_table_entry_oid=None, attr_list=None,):
        self.hostif_table_entry_oid = hostif_table_entry_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_table_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_table_entry_attribute_args')
        if self.hostif_table_entry_oid is not None:
            oprot.writeFieldBegin('hostif_table_entry_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_table_entry_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_table_entry_attribute_args)
sai_thrift_get_hostif_table_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_table_entry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_hostif_table_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_hostif_table_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_hostif_table_entry_attribute_result)
sai_thrift_get_hostif_table_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_recv_hostif_packet_args(object):
    """
    Attributes:
     - hostif_oid
     - buffer_size
     - buffer
     - attr_list

    """


    def __init__(self, hostif_oid=None, buffer_size=None, buffer=None, attr_list=None,):
        self.hostif_oid = hostif_oid
        self.buffer_size = buffer_size
        self.buffer = buffer
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.buffer_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.buffer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype801, _size798) = iprot.readListBegin()
                    for _i802 in range(_size798):
                        _elem803 = sai_thrift_attribute_t()
                        _elem803.read(iprot)
                        self.attr_list.append(_elem803)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_recv_hostif_packet_args')
        if self.hostif_oid is not None:
            oprot.writeFieldBegin('hostif_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_oid)
            oprot.writeFieldEnd()
        if self.buffer_size is not None:
            oprot.writeFieldBegin('buffer_size', TType.I64, 2)
            oprot.writeI64(self.buffer_size)
            oprot.writeFieldEnd()
        if self.buffer is not None:
            oprot.writeFieldBegin('buffer', TType.STRING, 3)
            oprot.writeString(self.buffer.encode('utf-8') if sys.version_info[0] == 2 else self.buffer)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter804 in self.attr_list:
                iter804.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_recv_hostif_packet_args)
sai_thrift_recv_hostif_packet_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_oid', None, None, ),  # 1
    (2, TType.I64, 'buffer_size', None, None, ),  # 2
    (3, TType.STRING, 'buffer', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 4
)


class sai_thrift_recv_hostif_packet_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_recv_hostif_packet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_recv_hostif_packet_result)
sai_thrift_recv_hostif_packet_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_send_hostif_packet_args(object):
    """
    Attributes:
     - hostif_oid
     - buffer_size
     - buffer
     - attr_list

    """


    def __init__(self, hostif_oid=None, buffer_size=None, buffer=None, attr_list=None,):
        self.hostif_oid = hostif_oid
        self.buffer_size = buffer_size
        self.buffer = buffer
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.buffer_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.buffer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype808, _size805) = iprot.readListBegin()
                    for _i809 in range(_size805):
                        _elem810 = sai_thrift_attribute_t()
                        _elem810.read(iprot)
                        self.attr_list.append(_elem810)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_send_hostif_packet_args')
        if self.hostif_oid is not None:
            oprot.writeFieldBegin('hostif_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_oid)
            oprot.writeFieldEnd()
        if self.buffer_size is not None:
            oprot.writeFieldBegin('buffer_size', TType.I64, 2)
            oprot.writeI64(self.buffer_size)
            oprot.writeFieldEnd()
        if self.buffer is not None:
            oprot.writeFieldBegin('buffer', TType.STRING, 3)
            oprot.writeString(self.buffer.encode('utf-8') if sys.version_info[0] == 2 else self.buffer)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter811 in self.attr_list:
                iter811.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_send_hostif_packet_args)
sai_thrift_send_hostif_packet_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_oid', None, None, ),  # 1
    (2, TType.I64, 'buffer_size', None, None, ),  # 2
    (3, TType.STRING, 'buffer', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 4
)


class sai_thrift_send_hostif_packet_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_send_hostif_packet_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_send_hostif_packet_result)
sai_thrift_send_hostif_packet_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_allocate_hostif_packet_args(object):
    """
    Attributes:
     - hostif_oid
     - buffer_size
     - attr_list

    """


    def __init__(self, hostif_oid=None, buffer_size=None, attr_list=None,):
        self.hostif_oid = hostif_oid
        self.buffer_size = buffer_size
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.buffer_size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype815, _size812) = iprot.readListBegin()
                    for _i816 in range(_size812):
                        _elem817 = sai_thrift_attribute_t()
                        _elem817.read(iprot)
                        self.attr_list.append(_elem817)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_allocate_hostif_packet_args')
        if self.hostif_oid is not None:
            oprot.writeFieldBegin('hostif_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_oid)
            oprot.writeFieldEnd()
        if self.buffer_size is not None:
            oprot.writeFieldBegin('buffer_size', TType.I64, 2)
            oprot.writeI64(self.buffer_size)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter818 in self.attr_list:
                iter818.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_allocate_hostif_packet_args)
sai_thrift_allocate_hostif_packet_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_oid', None, None, ),  # 1
    (2, TType.I64, 'buffer_size', None, None, ),  # 2
    (3, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 3
)


class sai_thrift_allocate_hostif_packet_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_allocate_hostif_packet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_allocate_hostif_packet_result)
sai_thrift_allocate_hostif_packet_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_free_hostif_packet_args(object):
    """
    Attributes:
     - hostif_oid
     - buffer

    """


    def __init__(self, hostif_oid=None, buffer=None,):
        self.hostif_oid = hostif_oid
        self.buffer = buffer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.hostif_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.buffer = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_free_hostif_packet_args')
        if self.hostif_oid is not None:
            oprot.writeFieldBegin('hostif_oid', TType.I64, 1)
            oprot.writeI64(self.hostif_oid)
            oprot.writeFieldEnd()
        if self.buffer is not None:
            oprot.writeFieldBegin('buffer', TType.STRING, 2)
            oprot.writeString(self.buffer.encode('utf-8') if sys.version_info[0] == 2 else self.buffer)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_free_hostif_packet_args)
sai_thrift_free_hostif_packet_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'hostif_oid', None, None, ),  # 1
    (2, TType.STRING, 'buffer', 'UTF8', None, ),  # 2
)


class sai_thrift_free_hostif_packet_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_free_hostif_packet_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_free_hostif_packet_result)
sai_thrift_free_hostif_packet_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_ipmc_entry_args(object):
    """
    Attributes:
     - ipmc_entry
     - attr_list

    """


    def __init__(self, ipmc_entry=None, attr_list=None,):
        self.ipmc_entry = ipmc_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ipmc_entry = sai_thrift_ipmc_entry_t()
                    self.ipmc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype822, _size819) = iprot.readListBegin()
                    for _i823 in range(_size819):
                        _elem824 = sai_thrift_attribute_t()
                        _elem824.read(iprot)
                        self.attr_list.append(_elem824)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_entry_args')
        if self.ipmc_entry is not None:
            oprot.writeFieldBegin('ipmc_entry', TType.STRUCT, 1)
            self.ipmc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter825 in self.attr_list:
                iter825.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_entry_args)
sai_thrift_create_ipmc_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ipmc_entry', [sai_thrift_ipmc_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_ipmc_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_entry_result)
sai_thrift_create_ipmc_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_ipmc_entry_args(object):
    """
    Attributes:
     - ipmc_entry

    """


    def __init__(self, ipmc_entry=None,):
        self.ipmc_entry = ipmc_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ipmc_entry = sai_thrift_ipmc_entry_t()
                    self.ipmc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_entry_args')
        if self.ipmc_entry is not None:
            oprot.writeFieldBegin('ipmc_entry', TType.STRUCT, 1)
            self.ipmc_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_entry_args)
sai_thrift_remove_ipmc_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ipmc_entry', [sai_thrift_ipmc_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_ipmc_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_entry_result)
sai_thrift_remove_ipmc_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_ipmc_entry_attribute_args(object):
    """
    Attributes:
     - ipmc_entry
     - attr

    """


    def __init__(self, ipmc_entry=None, attr=None,):
        self.ipmc_entry = ipmc_entry
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ipmc_entry = sai_thrift_ipmc_entry_t()
                    self.ipmc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_entry_attribute_args')
        if self.ipmc_entry is not None:
            oprot.writeFieldBegin('ipmc_entry', TType.STRUCT, 1)
            self.ipmc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_entry_attribute_args)
sai_thrift_set_ipmc_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ipmc_entry', [sai_thrift_ipmc_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ipmc_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_entry_attribute_result)
sai_thrift_set_ipmc_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipmc_entry_attribute_args(object):
    """
    Attributes:
     - ipmc_entry
     - attr_list

    """


    def __init__(self, ipmc_entry=None, attr_list=None,):
        self.ipmc_entry = ipmc_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ipmc_entry = sai_thrift_ipmc_entry_t()
                    self.ipmc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_entry_attribute_args')
        if self.ipmc_entry is not None:
            oprot.writeFieldBegin('ipmc_entry', TType.STRUCT, 1)
            self.ipmc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_entry_attribute_args)
sai_thrift_get_ipmc_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ipmc_entry', [sai_thrift_ipmc_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_ipmc_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_entry_attribute_result)
sai_thrift_get_ipmc_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_ipmc_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype829, _size826) = iprot.readListBegin()
                    for _i830 in range(_size826):
                        _elem831 = sai_thrift_attribute_t()
                        _elem831.read(iprot)
                        self.attr_list.append(_elem831)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter832 in self.attr_list:
                iter832.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_group_args)
sai_thrift_create_ipmc_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_ipmc_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_group_result)
sai_thrift_create_ipmc_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_ipmc_group_args(object):
    """
    Attributes:
     - ipmc_group_oid

    """


    def __init__(self, ipmc_group_oid=None,):
        self.ipmc_group_oid = ipmc_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipmc_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_group_args')
        if self.ipmc_group_oid is not None:
            oprot.writeFieldBegin('ipmc_group_oid', TType.I64, 1)
            oprot.writeI64(self.ipmc_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_group_args)
sai_thrift_remove_ipmc_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipmc_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_ipmc_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_group_result)
sai_thrift_remove_ipmc_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_ipmc_group_attribute_args(object):
    """
    Attributes:
     - ipmc_group_oid
     - attr

    """


    def __init__(self, ipmc_group_oid=None, attr=None,):
        self.ipmc_group_oid = ipmc_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipmc_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_group_attribute_args')
        if self.ipmc_group_oid is not None:
            oprot.writeFieldBegin('ipmc_group_oid', TType.I64, 1)
            oprot.writeI64(self.ipmc_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_group_attribute_args)
sai_thrift_set_ipmc_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipmc_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ipmc_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_group_attribute_result)
sai_thrift_set_ipmc_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipmc_group_attribute_args(object):
    """
    Attributes:
     - ipmc_group_oid
     - attr_list

    """


    def __init__(self, ipmc_group_oid=None, attr_list=None,):
        self.ipmc_group_oid = ipmc_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipmc_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_group_attribute_args')
        if self.ipmc_group_oid is not None:
            oprot.writeFieldBegin('ipmc_group_oid', TType.I64, 1)
            oprot.writeI64(self.ipmc_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_group_attribute_args)
sai_thrift_get_ipmc_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipmc_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_ipmc_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_group_attribute_result)
sai_thrift_get_ipmc_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_ipmc_group_member_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype836, _size833) = iprot.readListBegin()
                    for _i837 in range(_size833):
                        _elem838 = sai_thrift_attribute_t()
                        _elem838.read(iprot)
                        self.attr_list.append(_elem838)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_group_member_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter839 in self.attr_list:
                iter839.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_group_member_args)
sai_thrift_create_ipmc_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_ipmc_group_member_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipmc_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipmc_group_member_result)
sai_thrift_create_ipmc_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_ipmc_group_member_args(object):
    """
    Attributes:
     - ipmc_group_member_oid

    """


    def __init__(self, ipmc_group_member_oid=None,):
        self.ipmc_group_member_oid = ipmc_group_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipmc_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_group_member_args')
        if self.ipmc_group_member_oid is not None:
            oprot.writeFieldBegin('ipmc_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.ipmc_group_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_group_member_args)
sai_thrift_remove_ipmc_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipmc_group_member_oid', None, None, ),  # 1
)


class sai_thrift_remove_ipmc_group_member_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipmc_group_member_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipmc_group_member_result)
sai_thrift_remove_ipmc_group_member_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_ipmc_group_member_attribute_args(object):
    """
    Attributes:
     - ipmc_group_member_oid
     - attr

    """


    def __init__(self, ipmc_group_member_oid=None, attr=None,):
        self.ipmc_group_member_oid = ipmc_group_member_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipmc_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_group_member_attribute_args')
        if self.ipmc_group_member_oid is not None:
            oprot.writeFieldBegin('ipmc_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.ipmc_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_group_member_attribute_args)
sai_thrift_set_ipmc_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipmc_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ipmc_group_member_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipmc_group_member_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipmc_group_member_attribute_result)
sai_thrift_set_ipmc_group_member_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipmc_group_member_attribute_args(object):
    """
    Attributes:
     - ipmc_group_member_oid
     - attr_list

    """


    def __init__(self, ipmc_group_member_oid=None, attr_list=None,):
        self.ipmc_group_member_oid = ipmc_group_member_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipmc_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_group_member_attribute_args')
        if self.ipmc_group_member_oid is not None:
            oprot.writeFieldBegin('ipmc_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.ipmc_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_group_member_attribute_args)
sai_thrift_get_ipmc_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipmc_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_ipmc_group_member_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipmc_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipmc_group_member_attribute_result)
sai_thrift_get_ipmc_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_ipsec_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype843, _size840) = iprot.readListBegin()
                    for _i844 in range(_size840):
                        _elem845 = sai_thrift_attribute_t()
                        _elem845.read(iprot)
                        self.attr_list.append(_elem845)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipsec_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter846 in self.attr_list:
                iter846.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipsec_args)
sai_thrift_create_ipsec_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_ipsec_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipsec_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipsec_result)
sai_thrift_create_ipsec_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_ipsec_args(object):
    """
    Attributes:
     - ipsec_oid

    """


    def __init__(self, ipsec_oid=None,):
        self.ipsec_oid = ipsec_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipsec_args')
        if self.ipsec_oid is not None:
            oprot.writeFieldBegin('ipsec_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipsec_args)
sai_thrift_remove_ipsec_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_oid', None, None, ),  # 1
)


class sai_thrift_remove_ipsec_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipsec_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipsec_result)
sai_thrift_remove_ipsec_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_ipsec_attribute_args(object):
    """
    Attributes:
     - ipsec_oid
     - attr

    """


    def __init__(self, ipsec_oid=None, attr=None,):
        self.ipsec_oid = ipsec_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipsec_attribute_args')
        if self.ipsec_oid is not None:
            oprot.writeFieldBegin('ipsec_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipsec_attribute_args)
sai_thrift_set_ipsec_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ipsec_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipsec_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipsec_attribute_result)
sai_thrift_set_ipsec_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipsec_attribute_args(object):
    """
    Attributes:
     - ipsec_oid
     - attr_list

    """


    def __init__(self, ipsec_oid=None, attr_list=None,):
        self.ipsec_oid = ipsec_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_attribute_args')
        if self.ipsec_oid is not None:
            oprot.writeFieldBegin('ipsec_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_attribute_args)
sai_thrift_get_ipsec_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_ipsec_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_attribute_result)
sai_thrift_get_ipsec_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_ipsec_port_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype850, _size847) = iprot.readListBegin()
                    for _i851 in range(_size847):
                        _elem852 = sai_thrift_attribute_t()
                        _elem852.read(iprot)
                        self.attr_list.append(_elem852)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipsec_port_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter853 in self.attr_list:
                iter853.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipsec_port_args)
sai_thrift_create_ipsec_port_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_ipsec_port_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipsec_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipsec_port_result)
sai_thrift_create_ipsec_port_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_ipsec_port_args(object):
    """
    Attributes:
     - ipsec_port_oid

    """


    def __init__(self, ipsec_port_oid=None,):
        self.ipsec_port_oid = ipsec_port_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipsec_port_args')
        if self.ipsec_port_oid is not None:
            oprot.writeFieldBegin('ipsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_port_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipsec_port_args)
sai_thrift_remove_ipsec_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_port_oid', None, None, ),  # 1
)


class sai_thrift_remove_ipsec_port_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipsec_port_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipsec_port_result)
sai_thrift_remove_ipsec_port_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_ipsec_port_attribute_args(object):
    """
    Attributes:
     - ipsec_port_oid
     - attr

    """


    def __init__(self, ipsec_port_oid=None, attr=None,):
        self.ipsec_port_oid = ipsec_port_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipsec_port_attribute_args')
        if self.ipsec_port_oid is not None:
            oprot.writeFieldBegin('ipsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_port_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipsec_port_attribute_args)
sai_thrift_set_ipsec_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ipsec_port_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipsec_port_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipsec_port_attribute_result)
sai_thrift_set_ipsec_port_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipsec_port_attribute_args(object):
    """
    Attributes:
     - ipsec_port_oid
     - attr_list

    """


    def __init__(self, ipsec_port_oid=None, attr_list=None,):
        self.ipsec_port_oid = ipsec_port_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_port_attribute_args')
        if self.ipsec_port_oid is not None:
            oprot.writeFieldBegin('ipsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_port_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_port_attribute_args)
sai_thrift_get_ipsec_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_ipsec_port_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_port_attribute_result)
sai_thrift_get_ipsec_port_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipsec_port_stats_args(object):
    """
    Attributes:
     - ipsec_port_oid
     - counter_ids

    """


    def __init__(self, ipsec_port_oid=None, counter_ids=None,):
        self.ipsec_port_oid = ipsec_port_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype857, _size854) = iprot.readListBegin()
                    for _i858 in range(_size854):
                        _elem859 = iprot.readI32()
                        self.counter_ids.append(_elem859)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_port_stats_args')
        if self.ipsec_port_oid is not None:
            oprot.writeFieldBegin('ipsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter860 in self.counter_ids:
                oprot.writeI32(iter860)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_port_stats_args)
sai_thrift_get_ipsec_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_ipsec_port_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype864, _size861) = iprot.readListBegin()
                    for _i865 in range(_size861):
                        _elem866 = iprot.readI64()
                        self.success.append(_elem866)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_port_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter867 in self.success:
                oprot.writeI64(iter867)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_port_stats_result)
sai_thrift_get_ipsec_port_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipsec_port_stats_ext_args(object):
    """
    Attributes:
     - ipsec_port_oid
     - counter_ids
     - mode

    """


    def __init__(self, ipsec_port_oid=None, counter_ids=None, mode=None,):
        self.ipsec_port_oid = ipsec_port_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype871, _size868) = iprot.readListBegin()
                    for _i872 in range(_size868):
                        _elem873 = iprot.readI32()
                        self.counter_ids.append(_elem873)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_port_stats_ext_args')
        if self.ipsec_port_oid is not None:
            oprot.writeFieldBegin('ipsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter874 in self.counter_ids:
                oprot.writeI32(iter874)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_port_stats_ext_args)
sai_thrift_get_ipsec_port_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_ipsec_port_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype878, _size875) = iprot.readListBegin()
                    for _i879 in range(_size875):
                        _elem880 = iprot.readI64()
                        self.success.append(_elem880)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_port_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter881 in self.success:
                oprot.writeI64(iter881)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_port_stats_ext_result)
sai_thrift_get_ipsec_port_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_ipsec_port_stats_args(object):
    """
    Attributes:
     - ipsec_port_oid
     - counter_ids

    """


    def __init__(self, ipsec_port_oid=None, counter_ids=None,):
        self.ipsec_port_oid = ipsec_port_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype885, _size882) = iprot.readListBegin()
                    for _i886 in range(_size882):
                        _elem887 = iprot.readI32()
                        self.counter_ids.append(_elem887)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_ipsec_port_stats_args')
        if self.ipsec_port_oid is not None:
            oprot.writeFieldBegin('ipsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter888 in self.counter_ids:
                oprot.writeI32(iter888)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_ipsec_port_stats_args)
sai_thrift_clear_ipsec_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_ipsec_port_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_ipsec_port_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_ipsec_port_stats_result)
sai_thrift_clear_ipsec_port_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_ipsec_sa_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype892, _size889) = iprot.readListBegin()
                    for _i893 in range(_size889):
                        _elem894 = sai_thrift_attribute_t()
                        _elem894.read(iprot)
                        self.attr_list.append(_elem894)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipsec_sa_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter895 in self.attr_list:
                iter895.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipsec_sa_args)
sai_thrift_create_ipsec_sa_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_ipsec_sa_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_ipsec_sa_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_ipsec_sa_result)
sai_thrift_create_ipsec_sa_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_ipsec_sa_args(object):
    """
    Attributes:
     - ipsec_sa_oid

    """


    def __init__(self, ipsec_sa_oid=None,):
        self.ipsec_sa_oid = ipsec_sa_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipsec_sa_args')
        if self.ipsec_sa_oid is not None:
            oprot.writeFieldBegin('ipsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_sa_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipsec_sa_args)
sai_thrift_remove_ipsec_sa_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_sa_oid', None, None, ),  # 1
)


class sai_thrift_remove_ipsec_sa_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_ipsec_sa_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_ipsec_sa_result)
sai_thrift_remove_ipsec_sa_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_ipsec_sa_attribute_args(object):
    """
    Attributes:
     - ipsec_sa_oid
     - attr

    """


    def __init__(self, ipsec_sa_oid=None, attr=None,):
        self.ipsec_sa_oid = ipsec_sa_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipsec_sa_attribute_args')
        if self.ipsec_sa_oid is not None:
            oprot.writeFieldBegin('ipsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_sa_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipsec_sa_attribute_args)
sai_thrift_set_ipsec_sa_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_sa_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_ipsec_sa_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_ipsec_sa_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_ipsec_sa_attribute_result)
sai_thrift_set_ipsec_sa_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipsec_sa_attribute_args(object):
    """
    Attributes:
     - ipsec_sa_oid
     - attr_list

    """


    def __init__(self, ipsec_sa_oid=None, attr_list=None,):
        self.ipsec_sa_oid = ipsec_sa_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_sa_attribute_args')
        if self.ipsec_sa_oid is not None:
            oprot.writeFieldBegin('ipsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_sa_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_sa_attribute_args)
sai_thrift_get_ipsec_sa_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_sa_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_ipsec_sa_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_sa_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_sa_attribute_result)
sai_thrift_get_ipsec_sa_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipsec_sa_stats_args(object):
    """
    Attributes:
     - ipsec_sa_oid
     - counter_ids

    """


    def __init__(self, ipsec_sa_oid=None, counter_ids=None,):
        self.ipsec_sa_oid = ipsec_sa_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype899, _size896) = iprot.readListBegin()
                    for _i900 in range(_size896):
                        _elem901 = iprot.readI32()
                        self.counter_ids.append(_elem901)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_sa_stats_args')
        if self.ipsec_sa_oid is not None:
            oprot.writeFieldBegin('ipsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_sa_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter902 in self.counter_ids:
                oprot.writeI32(iter902)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_sa_stats_args)
sai_thrift_get_ipsec_sa_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_sa_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_ipsec_sa_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype906, _size903) = iprot.readListBegin()
                    for _i907 in range(_size903):
                        _elem908 = iprot.readI64()
                        self.success.append(_elem908)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_sa_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter909 in self.success:
                oprot.writeI64(iter909)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_sa_stats_result)
sai_thrift_get_ipsec_sa_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_ipsec_sa_stats_ext_args(object):
    """
    Attributes:
     - ipsec_sa_oid
     - counter_ids
     - mode

    """


    def __init__(self, ipsec_sa_oid=None, counter_ids=None, mode=None,):
        self.ipsec_sa_oid = ipsec_sa_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype913, _size910) = iprot.readListBegin()
                    for _i914 in range(_size910):
                        _elem915 = iprot.readI32()
                        self.counter_ids.append(_elem915)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_sa_stats_ext_args')
        if self.ipsec_sa_oid is not None:
            oprot.writeFieldBegin('ipsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_sa_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter916 in self.counter_ids:
                oprot.writeI32(iter916)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_sa_stats_ext_args)
sai_thrift_get_ipsec_sa_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_sa_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_ipsec_sa_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype920, _size917) = iprot.readListBegin()
                    for _i921 in range(_size917):
                        _elem922 = iprot.readI64()
                        self.success.append(_elem922)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_ipsec_sa_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter923 in self.success:
                oprot.writeI64(iter923)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_ipsec_sa_stats_ext_result)
sai_thrift_get_ipsec_sa_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_ipsec_sa_stats_args(object):
    """
    Attributes:
     - ipsec_sa_oid
     - counter_ids

    """


    def __init__(self, ipsec_sa_oid=None, counter_ids=None,):
        self.ipsec_sa_oid = ipsec_sa_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.ipsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype927, _size924) = iprot.readListBegin()
                    for _i928 in range(_size924):
                        _elem929 = iprot.readI32()
                        self.counter_ids.append(_elem929)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_ipsec_sa_stats_args')
        if self.ipsec_sa_oid is not None:
            oprot.writeFieldBegin('ipsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.ipsec_sa_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter930 in self.counter_ids:
                oprot.writeI32(iter930)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_ipsec_sa_stats_args)
sai_thrift_clear_ipsec_sa_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'ipsec_sa_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_ipsec_sa_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_ipsec_sa_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_ipsec_sa_stats_result)
sai_thrift_clear_ipsec_sa_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_isolation_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype934, _size931) = iprot.readListBegin()
                    for _i935 in range(_size931):
                        _elem936 = sai_thrift_attribute_t()
                        _elem936.read(iprot)
                        self.attr_list.append(_elem936)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_isolation_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter937 in self.attr_list:
                iter937.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_isolation_group_args)
sai_thrift_create_isolation_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_isolation_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_isolation_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_isolation_group_result)
sai_thrift_create_isolation_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_isolation_group_args(object):
    """
    Attributes:
     - isolation_group_oid

    """


    def __init__(self, isolation_group_oid=None,):
        self.isolation_group_oid = isolation_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.isolation_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_isolation_group_args')
        if self.isolation_group_oid is not None:
            oprot.writeFieldBegin('isolation_group_oid', TType.I64, 1)
            oprot.writeI64(self.isolation_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_isolation_group_args)
sai_thrift_remove_isolation_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'isolation_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_isolation_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_isolation_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_isolation_group_result)
sai_thrift_remove_isolation_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_isolation_group_attribute_args(object):
    """
    Attributes:
     - isolation_group_oid
     - attr

    """


    def __init__(self, isolation_group_oid=None, attr=None,):
        self.isolation_group_oid = isolation_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.isolation_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_isolation_group_attribute_args')
        if self.isolation_group_oid is not None:
            oprot.writeFieldBegin('isolation_group_oid', TType.I64, 1)
            oprot.writeI64(self.isolation_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_isolation_group_attribute_args)
sai_thrift_set_isolation_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'isolation_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_isolation_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_isolation_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_isolation_group_attribute_result)
sai_thrift_set_isolation_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_isolation_group_attribute_args(object):
    """
    Attributes:
     - isolation_group_oid
     - attr_list

    """


    def __init__(self, isolation_group_oid=None, attr_list=None,):
        self.isolation_group_oid = isolation_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.isolation_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_isolation_group_attribute_args')
        if self.isolation_group_oid is not None:
            oprot.writeFieldBegin('isolation_group_oid', TType.I64, 1)
            oprot.writeI64(self.isolation_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_isolation_group_attribute_args)
sai_thrift_get_isolation_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'isolation_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_isolation_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_isolation_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_isolation_group_attribute_result)
sai_thrift_get_isolation_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_isolation_group_member_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype941, _size938) = iprot.readListBegin()
                    for _i942 in range(_size938):
                        _elem943 = sai_thrift_attribute_t()
                        _elem943.read(iprot)
                        self.attr_list.append(_elem943)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_isolation_group_member_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter944 in self.attr_list:
                iter944.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_isolation_group_member_args)
sai_thrift_create_isolation_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_isolation_group_member_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_isolation_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_isolation_group_member_result)
sai_thrift_create_isolation_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_isolation_group_member_args(object):
    """
    Attributes:
     - isolation_group_member_oid

    """


    def __init__(self, isolation_group_member_oid=None,):
        self.isolation_group_member_oid = isolation_group_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.isolation_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_isolation_group_member_args')
        if self.isolation_group_member_oid is not None:
            oprot.writeFieldBegin('isolation_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.isolation_group_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_isolation_group_member_args)
sai_thrift_remove_isolation_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'isolation_group_member_oid', None, None, ),  # 1
)


class sai_thrift_remove_isolation_group_member_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_isolation_group_member_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_isolation_group_member_result)
sai_thrift_remove_isolation_group_member_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_isolation_group_member_attribute_args(object):
    """
    Attributes:
     - isolation_group_member_oid
     - attr

    """


    def __init__(self, isolation_group_member_oid=None, attr=None,):
        self.isolation_group_member_oid = isolation_group_member_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.isolation_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_isolation_group_member_attribute_args')
        if self.isolation_group_member_oid is not None:
            oprot.writeFieldBegin('isolation_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.isolation_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_isolation_group_member_attribute_args)
sai_thrift_set_isolation_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'isolation_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_isolation_group_member_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_isolation_group_member_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_isolation_group_member_attribute_result)
sai_thrift_set_isolation_group_member_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_isolation_group_member_attribute_args(object):
    """
    Attributes:
     - isolation_group_member_oid
     - attr_list

    """


    def __init__(self, isolation_group_member_oid=None, attr_list=None,):
        self.isolation_group_member_oid = isolation_group_member_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.isolation_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_isolation_group_member_attribute_args')
        if self.isolation_group_member_oid is not None:
            oprot.writeFieldBegin('isolation_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.isolation_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_isolation_group_member_attribute_args)
sai_thrift_get_isolation_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'isolation_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_isolation_group_member_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_isolation_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_isolation_group_member_attribute_result)
sai_thrift_get_isolation_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_l2mc_entry_args(object):
    """
    Attributes:
     - l2mc_entry
     - attr_list

    """


    def __init__(self, l2mc_entry=None, attr_list=None,):
        self.l2mc_entry = l2mc_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.l2mc_entry = sai_thrift_l2mc_entry_t()
                    self.l2mc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype948, _size945) = iprot.readListBegin()
                    for _i949 in range(_size945):
                        _elem950 = sai_thrift_attribute_t()
                        _elem950.read(iprot)
                        self.attr_list.append(_elem950)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_entry_args')
        if self.l2mc_entry is not None:
            oprot.writeFieldBegin('l2mc_entry', TType.STRUCT, 1)
            self.l2mc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter951 in self.attr_list:
                iter951.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_entry_args)
sai_thrift_create_l2mc_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'l2mc_entry', [sai_thrift_l2mc_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_l2mc_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_entry_result)
sai_thrift_create_l2mc_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_l2mc_entry_args(object):
    """
    Attributes:
     - l2mc_entry

    """


    def __init__(self, l2mc_entry=None,):
        self.l2mc_entry = l2mc_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.l2mc_entry = sai_thrift_l2mc_entry_t()
                    self.l2mc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_entry_args')
        if self.l2mc_entry is not None:
            oprot.writeFieldBegin('l2mc_entry', TType.STRUCT, 1)
            self.l2mc_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_entry_args)
sai_thrift_remove_l2mc_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'l2mc_entry', [sai_thrift_l2mc_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_l2mc_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_entry_result)
sai_thrift_remove_l2mc_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_l2mc_entry_attribute_args(object):
    """
    Attributes:
     - l2mc_entry
     - attr

    """


    def __init__(self, l2mc_entry=None, attr=None,):
        self.l2mc_entry = l2mc_entry
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.l2mc_entry = sai_thrift_l2mc_entry_t()
                    self.l2mc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_entry_attribute_args')
        if self.l2mc_entry is not None:
            oprot.writeFieldBegin('l2mc_entry', TType.STRUCT, 1)
            self.l2mc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_entry_attribute_args)
sai_thrift_set_l2mc_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'l2mc_entry', [sai_thrift_l2mc_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_l2mc_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_entry_attribute_result)
sai_thrift_set_l2mc_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_l2mc_entry_attribute_args(object):
    """
    Attributes:
     - l2mc_entry
     - attr_list

    """


    def __init__(self, l2mc_entry=None, attr_list=None,):
        self.l2mc_entry = l2mc_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.l2mc_entry = sai_thrift_l2mc_entry_t()
                    self.l2mc_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_entry_attribute_args')
        if self.l2mc_entry is not None:
            oprot.writeFieldBegin('l2mc_entry', TType.STRUCT, 1)
            self.l2mc_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_entry_attribute_args)
sai_thrift_get_l2mc_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'l2mc_entry', [sai_thrift_l2mc_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_l2mc_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_entry_attribute_result)
sai_thrift_get_l2mc_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_l2mc_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype955, _size952) = iprot.readListBegin()
                    for _i956 in range(_size952):
                        _elem957 = sai_thrift_attribute_t()
                        _elem957.read(iprot)
                        self.attr_list.append(_elem957)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter958 in self.attr_list:
                iter958.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_group_args)
sai_thrift_create_l2mc_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_l2mc_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_group_result)
sai_thrift_create_l2mc_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_l2mc_group_args(object):
    """
    Attributes:
     - l2mc_group_oid

    """


    def __init__(self, l2mc_group_oid=None,):
        self.l2mc_group_oid = l2mc_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.l2mc_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_group_args')
        if self.l2mc_group_oid is not None:
            oprot.writeFieldBegin('l2mc_group_oid', TType.I64, 1)
            oprot.writeI64(self.l2mc_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_group_args)
sai_thrift_remove_l2mc_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'l2mc_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_l2mc_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_group_result)
sai_thrift_remove_l2mc_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_l2mc_group_attribute_args(object):
    """
    Attributes:
     - l2mc_group_oid
     - attr

    """


    def __init__(self, l2mc_group_oid=None, attr=None,):
        self.l2mc_group_oid = l2mc_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.l2mc_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_group_attribute_args')
        if self.l2mc_group_oid is not None:
            oprot.writeFieldBegin('l2mc_group_oid', TType.I64, 1)
            oprot.writeI64(self.l2mc_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_group_attribute_args)
sai_thrift_set_l2mc_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'l2mc_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_l2mc_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_group_attribute_result)
sai_thrift_set_l2mc_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_l2mc_group_attribute_args(object):
    """
    Attributes:
     - l2mc_group_oid
     - attr_list

    """


    def __init__(self, l2mc_group_oid=None, attr_list=None,):
        self.l2mc_group_oid = l2mc_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.l2mc_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_group_attribute_args')
        if self.l2mc_group_oid is not None:
            oprot.writeFieldBegin('l2mc_group_oid', TType.I64, 1)
            oprot.writeI64(self.l2mc_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_group_attribute_args)
sai_thrift_get_l2mc_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'l2mc_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_l2mc_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_group_attribute_result)
sai_thrift_get_l2mc_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_l2mc_group_member_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype962, _size959) = iprot.readListBegin()
                    for _i963 in range(_size959):
                        _elem964 = sai_thrift_attribute_t()
                        _elem964.read(iprot)
                        self.attr_list.append(_elem964)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_group_member_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter965 in self.attr_list:
                iter965.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_group_member_args)
sai_thrift_create_l2mc_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_l2mc_group_member_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_l2mc_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_l2mc_group_member_result)
sai_thrift_create_l2mc_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_l2mc_group_member_args(object):
    """
    Attributes:
     - l2mc_group_member_oid

    """


    def __init__(self, l2mc_group_member_oid=None,):
        self.l2mc_group_member_oid = l2mc_group_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.l2mc_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_group_member_args')
        if self.l2mc_group_member_oid is not None:
            oprot.writeFieldBegin('l2mc_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.l2mc_group_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_group_member_args)
sai_thrift_remove_l2mc_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'l2mc_group_member_oid', None, None, ),  # 1
)


class sai_thrift_remove_l2mc_group_member_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_l2mc_group_member_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_l2mc_group_member_result)
sai_thrift_remove_l2mc_group_member_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_l2mc_group_member_attribute_args(object):
    """
    Attributes:
     - l2mc_group_member_oid
     - attr

    """


    def __init__(self, l2mc_group_member_oid=None, attr=None,):
        self.l2mc_group_member_oid = l2mc_group_member_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.l2mc_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_group_member_attribute_args')
        if self.l2mc_group_member_oid is not None:
            oprot.writeFieldBegin('l2mc_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.l2mc_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_group_member_attribute_args)
sai_thrift_set_l2mc_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'l2mc_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_l2mc_group_member_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_l2mc_group_member_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_l2mc_group_member_attribute_result)
sai_thrift_set_l2mc_group_member_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_l2mc_group_member_attribute_args(object):
    """
    Attributes:
     - l2mc_group_member_oid
     - attr_list

    """


    def __init__(self, l2mc_group_member_oid=None, attr_list=None,):
        self.l2mc_group_member_oid = l2mc_group_member_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.l2mc_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_group_member_attribute_args')
        if self.l2mc_group_member_oid is not None:
            oprot.writeFieldBegin('l2mc_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.l2mc_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_group_member_attribute_args)
sai_thrift_get_l2mc_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'l2mc_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_l2mc_group_member_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_l2mc_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_l2mc_group_member_attribute_result)
sai_thrift_get_l2mc_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_lag_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype969, _size966) = iprot.readListBegin()
                    for _i970 in range(_size966):
                        _elem971 = sai_thrift_attribute_t()
                        _elem971.read(iprot)
                        self.attr_list.append(_elem971)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_lag_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter972 in self.attr_list:
                iter972.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_lag_args)
sai_thrift_create_lag_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_lag_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_lag_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_lag_result)
sai_thrift_create_lag_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_lag_args(object):
    """
    Attributes:
     - lag_oid

    """


    def __init__(self, lag_oid=None,):
        self.lag_oid = lag_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_lag_args')
        if self.lag_oid is not None:
            oprot.writeFieldBegin('lag_oid', TType.I64, 1)
            oprot.writeI64(self.lag_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_lag_args)
sai_thrift_remove_lag_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_oid', None, None, ),  # 1
)


class sai_thrift_remove_lag_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_lag_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_lag_result)
sai_thrift_remove_lag_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_lag_attribute_args(object):
    """
    Attributes:
     - lag_oid
     - attr

    """


    def __init__(self, lag_oid=None, attr=None,):
        self.lag_oid = lag_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_lag_attribute_args')
        if self.lag_oid is not None:
            oprot.writeFieldBegin('lag_oid', TType.I64, 1)
            oprot.writeI64(self.lag_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_lag_attribute_args)
sai_thrift_set_lag_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_lag_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_lag_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_lag_attribute_result)
sai_thrift_set_lag_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_lag_attribute_args(object):
    """
    Attributes:
     - lag_oid
     - attr_list

    """


    def __init__(self, lag_oid=None, attr_list=None,):
        self.lag_oid = lag_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_lag_attribute_args')
        if self.lag_oid is not None:
            oprot.writeFieldBegin('lag_oid', TType.I64, 1)
            oprot.writeI64(self.lag_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_lag_attribute_args)
sai_thrift_get_lag_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_lag_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_lag_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_lag_attribute_result)
sai_thrift_get_lag_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_lag_member_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype976, _size973) = iprot.readListBegin()
                    for _i977 in range(_size973):
                        _elem978 = sai_thrift_attribute_t()
                        _elem978.read(iprot)
                        self.attr_list.append(_elem978)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_lag_member_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter979 in self.attr_list:
                iter979.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_lag_member_args)
sai_thrift_create_lag_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_lag_member_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_lag_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_lag_member_result)
sai_thrift_create_lag_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_lag_member_args(object):
    """
    Attributes:
     - lag_member_oid

    """


    def __init__(self, lag_member_oid=None,):
        self.lag_member_oid = lag_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_lag_member_args')
        if self.lag_member_oid is not None:
            oprot.writeFieldBegin('lag_member_oid', TType.I64, 1)
            oprot.writeI64(self.lag_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_lag_member_args)
sai_thrift_remove_lag_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_member_oid', None, None, ),  # 1
)


class sai_thrift_remove_lag_member_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_lag_member_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_lag_member_result)
sai_thrift_remove_lag_member_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_lag_member_attribute_args(object):
    """
    Attributes:
     - lag_member_oid
     - attr

    """


    def __init__(self, lag_member_oid=None, attr=None,):
        self.lag_member_oid = lag_member_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_lag_member_attribute_args')
        if self.lag_member_oid is not None:
            oprot.writeFieldBegin('lag_member_oid', TType.I64, 1)
            oprot.writeI64(self.lag_member_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_lag_member_attribute_args)
sai_thrift_set_lag_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_lag_member_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_lag_member_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_lag_member_attribute_result)
sai_thrift_set_lag_member_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_lag_member_attribute_args(object):
    """
    Attributes:
     - lag_member_oid
     - attr_list

    """


    def __init__(self, lag_member_oid=None, attr_list=None,):
        self.lag_member_oid = lag_member_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.lag_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_lag_member_attribute_args')
        if self.lag_member_oid is not None:
            oprot.writeFieldBegin('lag_member_oid', TType.I64, 1)
            oprot.writeI64(self.lag_member_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_lag_member_attribute_args)
sai_thrift_get_lag_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'lag_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_lag_member_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_lag_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_lag_member_attribute_result)
sai_thrift_get_lag_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_macsec_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype983, _size980) = iprot.readListBegin()
                    for _i984 in range(_size980):
                        _elem985 = sai_thrift_attribute_t()
                        _elem985.read(iprot)
                        self.attr_list.append(_elem985)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter986 in self.attr_list:
                iter986.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_args)
sai_thrift_create_macsec_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_macsec_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_result)
sai_thrift_create_macsec_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_macsec_args(object):
    """
    Attributes:
     - macsec_oid

    """


    def __init__(self, macsec_oid=None,):
        self.macsec_oid = macsec_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_args')
        if self.macsec_oid is not None:
            oprot.writeFieldBegin('macsec_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_args)
sai_thrift_remove_macsec_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_oid', None, None, ),  # 1
)


class sai_thrift_remove_macsec_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_result)
sai_thrift_remove_macsec_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_macsec_attribute_args(object):
    """
    Attributes:
     - macsec_oid
     - attr

    """


    def __init__(self, macsec_oid=None, attr=None,):
        self.macsec_oid = macsec_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_attribute_args')
        if self.macsec_oid is not None:
            oprot.writeFieldBegin('macsec_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_attribute_args)
sai_thrift_set_macsec_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_macsec_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_attribute_result)
sai_thrift_set_macsec_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_attribute_args(object):
    """
    Attributes:
     - macsec_oid
     - attr_list

    """


    def __init__(self, macsec_oid=None, attr_list=None,):
        self.macsec_oid = macsec_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_attribute_args')
        if self.macsec_oid is not None:
            oprot.writeFieldBegin('macsec_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_attribute_args)
sai_thrift_get_macsec_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_macsec_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_attribute_result)
sai_thrift_get_macsec_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_macsec_port_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype990, _size987) = iprot.readListBegin()
                    for _i991 in range(_size987):
                        _elem992 = sai_thrift_attribute_t()
                        _elem992.read(iprot)
                        self.attr_list.append(_elem992)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_port_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter993 in self.attr_list:
                iter993.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_port_args)
sai_thrift_create_macsec_port_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_macsec_port_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_port_result)
sai_thrift_create_macsec_port_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_macsec_port_args(object):
    """
    Attributes:
     - macsec_port_oid

    """


    def __init__(self, macsec_port_oid=None,):
        self.macsec_port_oid = macsec_port_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_port_args')
        if self.macsec_port_oid is not None:
            oprot.writeFieldBegin('macsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_port_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_port_args)
sai_thrift_remove_macsec_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_port_oid', None, None, ),  # 1
)


class sai_thrift_remove_macsec_port_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_port_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_port_result)
sai_thrift_remove_macsec_port_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_macsec_port_attribute_args(object):
    """
    Attributes:
     - macsec_port_oid
     - attr

    """


    def __init__(self, macsec_port_oid=None, attr=None,):
        self.macsec_port_oid = macsec_port_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_port_attribute_args')
        if self.macsec_port_oid is not None:
            oprot.writeFieldBegin('macsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_port_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_port_attribute_args)
sai_thrift_set_macsec_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_macsec_port_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_port_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_port_attribute_result)
sai_thrift_set_macsec_port_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_port_attribute_args(object):
    """
    Attributes:
     - macsec_port_oid
     - attr_list

    """


    def __init__(self, macsec_port_oid=None, attr_list=None,):
        self.macsec_port_oid = macsec_port_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_port_attribute_args')
        if self.macsec_port_oid is not None:
            oprot.writeFieldBegin('macsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_port_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_port_attribute_args)
sai_thrift_get_macsec_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_macsec_port_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_port_attribute_result)
sai_thrift_get_macsec_port_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_port_stats_args(object):
    """
    Attributes:
     - macsec_port_oid
     - counter_ids

    """


    def __init__(self, macsec_port_oid=None, counter_ids=None,):
        self.macsec_port_oid = macsec_port_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype997, _size994) = iprot.readListBegin()
                    for _i998 in range(_size994):
                        _elem999 = iprot.readI32()
                        self.counter_ids.append(_elem999)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_port_stats_args')
        if self.macsec_port_oid is not None:
            oprot.writeFieldBegin('macsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1000 in self.counter_ids:
                oprot.writeI32(iter1000)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_port_stats_args)
sai_thrift_get_macsec_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_macsec_port_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1004, _size1001) = iprot.readListBegin()
                    for _i1005 in range(_size1001):
                        _elem1006 = iprot.readI64()
                        self.success.append(_elem1006)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_port_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1007 in self.success:
                oprot.writeI64(iter1007)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_port_stats_result)
sai_thrift_get_macsec_port_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_port_stats_ext_args(object):
    """
    Attributes:
     - macsec_port_oid
     - counter_ids
     - mode

    """


    def __init__(self, macsec_port_oid=None, counter_ids=None, mode=None,):
        self.macsec_port_oid = macsec_port_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1011, _size1008) = iprot.readListBegin()
                    for _i1012 in range(_size1008):
                        _elem1013 = iprot.readI32()
                        self.counter_ids.append(_elem1013)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_port_stats_ext_args')
        if self.macsec_port_oid is not None:
            oprot.writeFieldBegin('macsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1014 in self.counter_ids:
                oprot.writeI32(iter1014)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_port_stats_ext_args)
sai_thrift_get_macsec_port_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_macsec_port_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1018, _size1015) = iprot.readListBegin()
                    for _i1019 in range(_size1015):
                        _elem1020 = iprot.readI64()
                        self.success.append(_elem1020)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_port_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1021 in self.success:
                oprot.writeI64(iter1021)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_port_stats_ext_result)
sai_thrift_get_macsec_port_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_macsec_port_stats_args(object):
    """
    Attributes:
     - macsec_port_oid
     - counter_ids

    """


    def __init__(self, macsec_port_oid=None, counter_ids=None,):
        self.macsec_port_oid = macsec_port_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1025, _size1022) = iprot.readListBegin()
                    for _i1026 in range(_size1022):
                        _elem1027 = iprot.readI32()
                        self.counter_ids.append(_elem1027)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_macsec_port_stats_args')
        if self.macsec_port_oid is not None:
            oprot.writeFieldBegin('macsec_port_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1028 in self.counter_ids:
                oprot.writeI32(iter1028)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_macsec_port_stats_args)
sai_thrift_clear_macsec_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_macsec_port_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_macsec_port_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_macsec_port_stats_result)
sai_thrift_clear_macsec_port_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_macsec_flow_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1032, _size1029) = iprot.readListBegin()
                    for _i1033 in range(_size1029):
                        _elem1034 = sai_thrift_attribute_t()
                        _elem1034.read(iprot)
                        self.attr_list.append(_elem1034)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_flow_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1035 in self.attr_list:
                iter1035.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_flow_args)
sai_thrift_create_macsec_flow_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_macsec_flow_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_flow_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_flow_result)
sai_thrift_create_macsec_flow_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_macsec_flow_args(object):
    """
    Attributes:
     - macsec_flow_oid

    """


    def __init__(self, macsec_flow_oid=None,):
        self.macsec_flow_oid = macsec_flow_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_flow_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_flow_args')
        if self.macsec_flow_oid is not None:
            oprot.writeFieldBegin('macsec_flow_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_flow_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_flow_args)
sai_thrift_remove_macsec_flow_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_flow_oid', None, None, ),  # 1
)


class sai_thrift_remove_macsec_flow_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_flow_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_flow_result)
sai_thrift_remove_macsec_flow_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_macsec_flow_attribute_args(object):
    """
    Attributes:
     - macsec_flow_oid
     - attr

    """


    def __init__(self, macsec_flow_oid=None, attr=None,):
        self.macsec_flow_oid = macsec_flow_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_flow_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_flow_attribute_args')
        if self.macsec_flow_oid is not None:
            oprot.writeFieldBegin('macsec_flow_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_flow_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_flow_attribute_args)
sai_thrift_set_macsec_flow_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_flow_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_macsec_flow_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_flow_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_flow_attribute_result)
sai_thrift_set_macsec_flow_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_flow_attribute_args(object):
    """
    Attributes:
     - macsec_flow_oid
     - attr_list

    """


    def __init__(self, macsec_flow_oid=None, attr_list=None,):
        self.macsec_flow_oid = macsec_flow_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_flow_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_flow_attribute_args')
        if self.macsec_flow_oid is not None:
            oprot.writeFieldBegin('macsec_flow_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_flow_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_flow_attribute_args)
sai_thrift_get_macsec_flow_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_flow_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_macsec_flow_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_flow_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_flow_attribute_result)
sai_thrift_get_macsec_flow_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_flow_stats_args(object):
    """
    Attributes:
     - macsec_flow_oid
     - counter_ids

    """


    def __init__(self, macsec_flow_oid=None, counter_ids=None,):
        self.macsec_flow_oid = macsec_flow_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_flow_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1039, _size1036) = iprot.readListBegin()
                    for _i1040 in range(_size1036):
                        _elem1041 = iprot.readI32()
                        self.counter_ids.append(_elem1041)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_flow_stats_args')
        if self.macsec_flow_oid is not None:
            oprot.writeFieldBegin('macsec_flow_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_flow_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1042 in self.counter_ids:
                oprot.writeI32(iter1042)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_flow_stats_args)
sai_thrift_get_macsec_flow_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_flow_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_macsec_flow_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1046, _size1043) = iprot.readListBegin()
                    for _i1047 in range(_size1043):
                        _elem1048 = iprot.readI64()
                        self.success.append(_elem1048)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_flow_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1049 in self.success:
                oprot.writeI64(iter1049)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_flow_stats_result)
sai_thrift_get_macsec_flow_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_flow_stats_ext_args(object):
    """
    Attributes:
     - macsec_flow_oid
     - counter_ids
     - mode

    """


    def __init__(self, macsec_flow_oid=None, counter_ids=None, mode=None,):
        self.macsec_flow_oid = macsec_flow_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_flow_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1053, _size1050) = iprot.readListBegin()
                    for _i1054 in range(_size1050):
                        _elem1055 = iprot.readI32()
                        self.counter_ids.append(_elem1055)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_flow_stats_ext_args')
        if self.macsec_flow_oid is not None:
            oprot.writeFieldBegin('macsec_flow_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_flow_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1056 in self.counter_ids:
                oprot.writeI32(iter1056)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_flow_stats_ext_args)
sai_thrift_get_macsec_flow_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_flow_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_macsec_flow_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1060, _size1057) = iprot.readListBegin()
                    for _i1061 in range(_size1057):
                        _elem1062 = iprot.readI64()
                        self.success.append(_elem1062)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_flow_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1063 in self.success:
                oprot.writeI64(iter1063)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_flow_stats_ext_result)
sai_thrift_get_macsec_flow_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_macsec_flow_stats_args(object):
    """
    Attributes:
     - macsec_flow_oid
     - counter_ids

    """


    def __init__(self, macsec_flow_oid=None, counter_ids=None,):
        self.macsec_flow_oid = macsec_flow_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_flow_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1067, _size1064) = iprot.readListBegin()
                    for _i1068 in range(_size1064):
                        _elem1069 = iprot.readI32()
                        self.counter_ids.append(_elem1069)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_macsec_flow_stats_args')
        if self.macsec_flow_oid is not None:
            oprot.writeFieldBegin('macsec_flow_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_flow_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1070 in self.counter_ids:
                oprot.writeI32(iter1070)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_macsec_flow_stats_args)
sai_thrift_clear_macsec_flow_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_flow_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_macsec_flow_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_macsec_flow_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_macsec_flow_stats_result)
sai_thrift_clear_macsec_flow_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_macsec_sc_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1074, _size1071) = iprot.readListBegin()
                    for _i1075 in range(_size1071):
                        _elem1076 = sai_thrift_attribute_t()
                        _elem1076.read(iprot)
                        self.attr_list.append(_elem1076)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_sc_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1077 in self.attr_list:
                iter1077.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_sc_args)
sai_thrift_create_macsec_sc_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_macsec_sc_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_sc_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_sc_result)
sai_thrift_create_macsec_sc_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_macsec_sc_args(object):
    """
    Attributes:
     - macsec_sc_oid

    """


    def __init__(self, macsec_sc_oid=None,):
        self.macsec_sc_oid = macsec_sc_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sc_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_sc_args')
        if self.macsec_sc_oid is not None:
            oprot.writeFieldBegin('macsec_sc_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sc_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_sc_args)
sai_thrift_remove_macsec_sc_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sc_oid', None, None, ),  # 1
)


class sai_thrift_remove_macsec_sc_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_sc_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_sc_result)
sai_thrift_remove_macsec_sc_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_macsec_sc_attribute_args(object):
    """
    Attributes:
     - macsec_sc_oid
     - attr

    """


    def __init__(self, macsec_sc_oid=None, attr=None,):
        self.macsec_sc_oid = macsec_sc_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sc_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_sc_attribute_args')
        if self.macsec_sc_oid is not None:
            oprot.writeFieldBegin('macsec_sc_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sc_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_sc_attribute_args)
sai_thrift_set_macsec_sc_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sc_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_macsec_sc_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_sc_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_sc_attribute_result)
sai_thrift_set_macsec_sc_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_sc_attribute_args(object):
    """
    Attributes:
     - macsec_sc_oid
     - attr_list

    """


    def __init__(self, macsec_sc_oid=None, attr_list=None,):
        self.macsec_sc_oid = macsec_sc_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sc_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sc_attribute_args')
        if self.macsec_sc_oid is not None:
            oprot.writeFieldBegin('macsec_sc_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sc_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sc_attribute_args)
sai_thrift_get_macsec_sc_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sc_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_macsec_sc_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sc_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sc_attribute_result)
sai_thrift_get_macsec_sc_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_sc_stats_args(object):
    """
    Attributes:
     - macsec_sc_oid
     - counter_ids

    """


    def __init__(self, macsec_sc_oid=None, counter_ids=None,):
        self.macsec_sc_oid = macsec_sc_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sc_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1081, _size1078) = iprot.readListBegin()
                    for _i1082 in range(_size1078):
                        _elem1083 = iprot.readI32()
                        self.counter_ids.append(_elem1083)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sc_stats_args')
        if self.macsec_sc_oid is not None:
            oprot.writeFieldBegin('macsec_sc_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sc_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1084 in self.counter_ids:
                oprot.writeI32(iter1084)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sc_stats_args)
sai_thrift_get_macsec_sc_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sc_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_macsec_sc_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1088, _size1085) = iprot.readListBegin()
                    for _i1089 in range(_size1085):
                        _elem1090 = iprot.readI64()
                        self.success.append(_elem1090)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sc_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1091 in self.success:
                oprot.writeI64(iter1091)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sc_stats_result)
sai_thrift_get_macsec_sc_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_sc_stats_ext_args(object):
    """
    Attributes:
     - macsec_sc_oid
     - counter_ids
     - mode

    """


    def __init__(self, macsec_sc_oid=None, counter_ids=None, mode=None,):
        self.macsec_sc_oid = macsec_sc_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sc_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1095, _size1092) = iprot.readListBegin()
                    for _i1096 in range(_size1092):
                        _elem1097 = iprot.readI32()
                        self.counter_ids.append(_elem1097)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sc_stats_ext_args')
        if self.macsec_sc_oid is not None:
            oprot.writeFieldBegin('macsec_sc_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sc_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1098 in self.counter_ids:
                oprot.writeI32(iter1098)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sc_stats_ext_args)
sai_thrift_get_macsec_sc_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sc_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_macsec_sc_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1102, _size1099) = iprot.readListBegin()
                    for _i1103 in range(_size1099):
                        _elem1104 = iprot.readI64()
                        self.success.append(_elem1104)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sc_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1105 in self.success:
                oprot.writeI64(iter1105)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sc_stats_ext_result)
sai_thrift_get_macsec_sc_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_macsec_sc_stats_args(object):
    """
    Attributes:
     - macsec_sc_oid
     - counter_ids

    """


    def __init__(self, macsec_sc_oid=None, counter_ids=None,):
        self.macsec_sc_oid = macsec_sc_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sc_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1109, _size1106) = iprot.readListBegin()
                    for _i1110 in range(_size1106):
                        _elem1111 = iprot.readI32()
                        self.counter_ids.append(_elem1111)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_macsec_sc_stats_args')
        if self.macsec_sc_oid is not None:
            oprot.writeFieldBegin('macsec_sc_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sc_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1112 in self.counter_ids:
                oprot.writeI32(iter1112)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_macsec_sc_stats_args)
sai_thrift_clear_macsec_sc_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sc_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_macsec_sc_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_macsec_sc_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_macsec_sc_stats_result)
sai_thrift_clear_macsec_sc_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_macsec_sa_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1116, _size1113) = iprot.readListBegin()
                    for _i1117 in range(_size1113):
                        _elem1118 = sai_thrift_attribute_t()
                        _elem1118.read(iprot)
                        self.attr_list.append(_elem1118)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_sa_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1119 in self.attr_list:
                iter1119.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_sa_args)
sai_thrift_create_macsec_sa_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_macsec_sa_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_macsec_sa_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_macsec_sa_result)
sai_thrift_create_macsec_sa_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_macsec_sa_args(object):
    """
    Attributes:
     - macsec_sa_oid

    """


    def __init__(self, macsec_sa_oid=None,):
        self.macsec_sa_oid = macsec_sa_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_sa_args')
        if self.macsec_sa_oid is not None:
            oprot.writeFieldBegin('macsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sa_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_sa_args)
sai_thrift_remove_macsec_sa_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sa_oid', None, None, ),  # 1
)


class sai_thrift_remove_macsec_sa_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_macsec_sa_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_macsec_sa_result)
sai_thrift_remove_macsec_sa_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_macsec_sa_attribute_args(object):
    """
    Attributes:
     - macsec_sa_oid
     - attr

    """


    def __init__(self, macsec_sa_oid=None, attr=None,):
        self.macsec_sa_oid = macsec_sa_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_sa_attribute_args')
        if self.macsec_sa_oid is not None:
            oprot.writeFieldBegin('macsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sa_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_sa_attribute_args)
sai_thrift_set_macsec_sa_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sa_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_macsec_sa_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_macsec_sa_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_macsec_sa_attribute_result)
sai_thrift_set_macsec_sa_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_sa_attribute_args(object):
    """
    Attributes:
     - macsec_sa_oid
     - attr_list

    """


    def __init__(self, macsec_sa_oid=None, attr_list=None,):
        self.macsec_sa_oid = macsec_sa_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sa_attribute_args')
        if self.macsec_sa_oid is not None:
            oprot.writeFieldBegin('macsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sa_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sa_attribute_args)
sai_thrift_get_macsec_sa_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sa_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_macsec_sa_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sa_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sa_attribute_result)
sai_thrift_get_macsec_sa_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_sa_stats_args(object):
    """
    Attributes:
     - macsec_sa_oid
     - counter_ids

    """


    def __init__(self, macsec_sa_oid=None, counter_ids=None,):
        self.macsec_sa_oid = macsec_sa_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1123, _size1120) = iprot.readListBegin()
                    for _i1124 in range(_size1120):
                        _elem1125 = iprot.readI32()
                        self.counter_ids.append(_elem1125)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sa_stats_args')
        if self.macsec_sa_oid is not None:
            oprot.writeFieldBegin('macsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sa_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1126 in self.counter_ids:
                oprot.writeI32(iter1126)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sa_stats_args)
sai_thrift_get_macsec_sa_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sa_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_macsec_sa_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1130, _size1127) = iprot.readListBegin()
                    for _i1131 in range(_size1127):
                        _elem1132 = iprot.readI64()
                        self.success.append(_elem1132)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sa_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1133 in self.success:
                oprot.writeI64(iter1133)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sa_stats_result)
sai_thrift_get_macsec_sa_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_macsec_sa_stats_ext_args(object):
    """
    Attributes:
     - macsec_sa_oid
     - counter_ids
     - mode

    """


    def __init__(self, macsec_sa_oid=None, counter_ids=None, mode=None,):
        self.macsec_sa_oid = macsec_sa_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1137, _size1134) = iprot.readListBegin()
                    for _i1138 in range(_size1134):
                        _elem1139 = iprot.readI32()
                        self.counter_ids.append(_elem1139)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sa_stats_ext_args')
        if self.macsec_sa_oid is not None:
            oprot.writeFieldBegin('macsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sa_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1140 in self.counter_ids:
                oprot.writeI32(iter1140)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sa_stats_ext_args)
sai_thrift_get_macsec_sa_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sa_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_macsec_sa_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1144, _size1141) = iprot.readListBegin()
                    for _i1145 in range(_size1141):
                        _elem1146 = iprot.readI64()
                        self.success.append(_elem1146)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_macsec_sa_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1147 in self.success:
                oprot.writeI64(iter1147)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_macsec_sa_stats_ext_result)
sai_thrift_get_macsec_sa_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_macsec_sa_stats_args(object):
    """
    Attributes:
     - macsec_sa_oid
     - counter_ids

    """


    def __init__(self, macsec_sa_oid=None, counter_ids=None,):
        self.macsec_sa_oid = macsec_sa_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.macsec_sa_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1151, _size1148) = iprot.readListBegin()
                    for _i1152 in range(_size1148):
                        _elem1153 = iprot.readI32()
                        self.counter_ids.append(_elem1153)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_macsec_sa_stats_args')
        if self.macsec_sa_oid is not None:
            oprot.writeFieldBegin('macsec_sa_oid', TType.I64, 1)
            oprot.writeI64(self.macsec_sa_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1154 in self.counter_ids:
                oprot.writeI32(iter1154)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_macsec_sa_stats_args)
sai_thrift_clear_macsec_sa_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'macsec_sa_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_macsec_sa_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_macsec_sa_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_macsec_sa_stats_result)
sai_thrift_clear_macsec_sa_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_mcast_fdb_entry_args(object):
    """
    Attributes:
     - mcast_fdb_entry
     - attr_list

    """


    def __init__(self, mcast_fdb_entry=None, attr_list=None,):
        self.mcast_fdb_entry = mcast_fdb_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
                    self.mcast_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1158, _size1155) = iprot.readListBegin()
                    for _i1159 in range(_size1155):
                        _elem1160 = sai_thrift_attribute_t()
                        _elem1160.read(iprot)
                        self.attr_list.append(_elem1160)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_mcast_fdb_entry_args')
        if self.mcast_fdb_entry is not None:
            oprot.writeFieldBegin('mcast_fdb_entry', TType.STRUCT, 1)
            self.mcast_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1161 in self.attr_list:
                iter1161.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_mcast_fdb_entry_args)
sai_thrift_create_mcast_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'mcast_fdb_entry', [sai_thrift_mcast_fdb_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_mcast_fdb_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_mcast_fdb_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_mcast_fdb_entry_result)
sai_thrift_create_mcast_fdb_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_mcast_fdb_entry_args(object):
    """
    Attributes:
     - mcast_fdb_entry

    """


    def __init__(self, mcast_fdb_entry=None,):
        self.mcast_fdb_entry = mcast_fdb_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
                    self.mcast_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_mcast_fdb_entry_args')
        if self.mcast_fdb_entry is not None:
            oprot.writeFieldBegin('mcast_fdb_entry', TType.STRUCT, 1)
            self.mcast_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_mcast_fdb_entry_args)
sai_thrift_remove_mcast_fdb_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'mcast_fdb_entry', [sai_thrift_mcast_fdb_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_mcast_fdb_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_mcast_fdb_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_mcast_fdb_entry_result)
sai_thrift_remove_mcast_fdb_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_mcast_fdb_entry_attribute_args(object):
    """
    Attributes:
     - mcast_fdb_entry
     - attr

    """


    def __init__(self, mcast_fdb_entry=None, attr=None,):
        self.mcast_fdb_entry = mcast_fdb_entry
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
                    self.mcast_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_mcast_fdb_entry_attribute_args')
        if self.mcast_fdb_entry is not None:
            oprot.writeFieldBegin('mcast_fdb_entry', TType.STRUCT, 1)
            self.mcast_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_mcast_fdb_entry_attribute_args)
sai_thrift_set_mcast_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'mcast_fdb_entry', [sai_thrift_mcast_fdb_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_mcast_fdb_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_mcast_fdb_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_mcast_fdb_entry_attribute_result)
sai_thrift_set_mcast_fdb_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_mcast_fdb_entry_attribute_args(object):
    """
    Attributes:
     - mcast_fdb_entry
     - attr_list

    """


    def __init__(self, mcast_fdb_entry=None, attr_list=None,):
        self.mcast_fdb_entry = mcast_fdb_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
                    self.mcast_fdb_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_mcast_fdb_entry_attribute_args')
        if self.mcast_fdb_entry is not None:
            oprot.writeFieldBegin('mcast_fdb_entry', TType.STRUCT, 1)
            self.mcast_fdb_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_mcast_fdb_entry_attribute_args)
sai_thrift_get_mcast_fdb_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'mcast_fdb_entry', [sai_thrift_mcast_fdb_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_mcast_fdb_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_mcast_fdb_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_mcast_fdb_entry_attribute_result)
sai_thrift_get_mcast_fdb_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_mirror_session_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1165, _size1162) = iprot.readListBegin()
                    for _i1166 in range(_size1162):
                        _elem1167 = sai_thrift_attribute_t()
                        _elem1167.read(iprot)
                        self.attr_list.append(_elem1167)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_mirror_session_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1168 in self.attr_list:
                iter1168.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_mirror_session_args)
sai_thrift_create_mirror_session_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_mirror_session_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_mirror_session_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_mirror_session_result)
sai_thrift_create_mirror_session_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_mirror_session_args(object):
    """
    Attributes:
     - mirror_session_oid

    """


    def __init__(self, mirror_session_oid=None,):
        self.mirror_session_oid = mirror_session_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.mirror_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_mirror_session_args')
        if self.mirror_session_oid is not None:
            oprot.writeFieldBegin('mirror_session_oid', TType.I64, 1)
            oprot.writeI64(self.mirror_session_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_mirror_session_args)
sai_thrift_remove_mirror_session_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'mirror_session_oid', None, None, ),  # 1
)


class sai_thrift_remove_mirror_session_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_mirror_session_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_mirror_session_result)
sai_thrift_remove_mirror_session_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_mirror_session_attribute_args(object):
    """
    Attributes:
     - mirror_session_oid
     - attr

    """


    def __init__(self, mirror_session_oid=None, attr=None,):
        self.mirror_session_oid = mirror_session_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.mirror_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_mirror_session_attribute_args')
        if self.mirror_session_oid is not None:
            oprot.writeFieldBegin('mirror_session_oid', TType.I64, 1)
            oprot.writeI64(self.mirror_session_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_mirror_session_attribute_args)
sai_thrift_set_mirror_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'mirror_session_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_mirror_session_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_mirror_session_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_mirror_session_attribute_result)
sai_thrift_set_mirror_session_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_mirror_session_attribute_args(object):
    """
    Attributes:
     - mirror_session_oid
     - attr_list

    """


    def __init__(self, mirror_session_oid=None, attr_list=None,):
        self.mirror_session_oid = mirror_session_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.mirror_session_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_mirror_session_attribute_args')
        if self.mirror_session_oid is not None:
            oprot.writeFieldBegin('mirror_session_oid', TType.I64, 1)
            oprot.writeI64(self.mirror_session_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_mirror_session_attribute_args)
sai_thrift_get_mirror_session_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'mirror_session_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_mirror_session_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_mirror_session_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_mirror_session_attribute_result)
sai_thrift_get_mirror_session_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_inseg_entry_args(object):
    """
    Attributes:
     - inseg_entry
     - attr_list

    """


    def __init__(self, inseg_entry=None, attr_list=None,):
        self.inseg_entry = inseg_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.inseg_entry = sai_thrift_inseg_entry_t()
                    self.inseg_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1172, _size1169) = iprot.readListBegin()
                    for _i1173 in range(_size1169):
                        _elem1174 = sai_thrift_attribute_t()
                        _elem1174.read(iprot)
                        self.attr_list.append(_elem1174)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_inseg_entry_args')
        if self.inseg_entry is not None:
            oprot.writeFieldBegin('inseg_entry', TType.STRUCT, 1)
            self.inseg_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1175 in self.attr_list:
                iter1175.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_inseg_entry_args)
sai_thrift_create_inseg_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'inseg_entry', [sai_thrift_inseg_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_inseg_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_inseg_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_inseg_entry_result)
sai_thrift_create_inseg_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_inseg_entry_args(object):
    """
    Attributes:
     - inseg_entry

    """


    def __init__(self, inseg_entry=None,):
        self.inseg_entry = inseg_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.inseg_entry = sai_thrift_inseg_entry_t()
                    self.inseg_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_inseg_entry_args')
        if self.inseg_entry is not None:
            oprot.writeFieldBegin('inseg_entry', TType.STRUCT, 1)
            self.inseg_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_inseg_entry_args)
sai_thrift_remove_inseg_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'inseg_entry', [sai_thrift_inseg_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_inseg_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_inseg_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_inseg_entry_result)
sai_thrift_remove_inseg_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_inseg_entry_attribute_args(object):
    """
    Attributes:
     - inseg_entry
     - attr

    """


    def __init__(self, inseg_entry=None, attr=None,):
        self.inseg_entry = inseg_entry
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.inseg_entry = sai_thrift_inseg_entry_t()
                    self.inseg_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_inseg_entry_attribute_args')
        if self.inseg_entry is not None:
            oprot.writeFieldBegin('inseg_entry', TType.STRUCT, 1)
            self.inseg_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_inseg_entry_attribute_args)
sai_thrift_set_inseg_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'inseg_entry', [sai_thrift_inseg_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_inseg_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_inseg_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_inseg_entry_attribute_result)
sai_thrift_set_inseg_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_inseg_entry_attribute_args(object):
    """
    Attributes:
     - inseg_entry
     - attr_list

    """


    def __init__(self, inseg_entry=None, attr_list=None,):
        self.inseg_entry = inseg_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.inseg_entry = sai_thrift_inseg_entry_t()
                    self.inseg_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_inseg_entry_attribute_args')
        if self.inseg_entry is not None:
            oprot.writeFieldBegin('inseg_entry', TType.STRUCT, 1)
            self.inseg_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_inseg_entry_attribute_args)
sai_thrift_get_inseg_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'inseg_entry', [sai_thrift_inseg_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_inseg_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_inseg_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_inseg_entry_attribute_result)
sai_thrift_get_inseg_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_create_inseg_entry_args(object):
    """
    Attributes:
     - inseg_entry
     - attr_count
     - attr_list
     - mode

    """


    def __init__(self, inseg_entry=None, attr_count=None, attr_list=None, mode=None,):
        self.inseg_entry = inseg_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.inseg_entry = []
                    (_etype1179, _size1176) = iprot.readListBegin()
                    for _i1180 in range(_size1176):
                        _elem1181 = sai_thrift_inseg_entry_t()
                        _elem1181.read(iprot)
                        self.inseg_entry.append(_elem1181)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1185, _size1182) = iprot.readListBegin()
                    for _i1186 in range(_size1182):
                        _elem1187 = iprot.readI32()
                        self.attr_count.append(_elem1187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1191, _size1188) = iprot.readListBegin()
                    for _i1192 in range(_size1188):
                        _elem1193 = sai_thrift_attribute_t()
                        _elem1193.read(iprot)
                        self.attr_list.append(_elem1193)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_inseg_entry_args')
        if self.inseg_entry is not None:
            oprot.writeFieldBegin('inseg_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.inseg_entry))
            for iter1194 in self.inseg_entry:
                iter1194.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1195 in self.attr_count:
                oprot.writeI32(iter1195)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1196 in self.attr_list:
                iter1196.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_inseg_entry_args)
sai_thrift_bulk_create_inseg_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'inseg_entry', (TType.STRUCT, [sai_thrift_inseg_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
)


class sai_thrift_bulk_create_inseg_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1200, _size1197) = iprot.readListBegin()
                    for _i1201 in range(_size1197):
                        _elem1202 = iprot.readI32()
                        self.success.append(_elem1202)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_inseg_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1203 in self.success:
                oprot.writeI32(iter1203)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_inseg_entry_result)
sai_thrift_bulk_create_inseg_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_remove_inseg_entry_args(object):
    """
    Attributes:
     - inseg_entry
     - mode

    """


    def __init__(self, inseg_entry=None, mode=None,):
        self.inseg_entry = inseg_entry
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.inseg_entry = []
                    (_etype1207, _size1204) = iprot.readListBegin()
                    for _i1208 in range(_size1204):
                        _elem1209 = sai_thrift_inseg_entry_t()
                        _elem1209.read(iprot)
                        self.inseg_entry.append(_elem1209)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_inseg_entry_args')
        if self.inseg_entry is not None:
            oprot.writeFieldBegin('inseg_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.inseg_entry))
            for iter1210 in self.inseg_entry:
                iter1210.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 2)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_inseg_entry_args)
sai_thrift_bulk_remove_inseg_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'inseg_entry', (TType.STRUCT, [sai_thrift_inseg_entry_t, None], False), None, ),  # 1
    (2, TType.I32, 'mode', None, None, ),  # 2
)


class sai_thrift_bulk_remove_inseg_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1214, _size1211) = iprot.readListBegin()
                    for _i1215 in range(_size1211):
                        _elem1216 = iprot.readI32()
                        self.success.append(_elem1216)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_inseg_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1217 in self.success:
                oprot.writeI32(iter1217)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_inseg_entry_result)
sai_thrift_bulk_remove_inseg_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_set_inseg_entry_attribute_args(object):
    """
    Attributes:
     - inseg_entry
     - attr_list
     - mode

    """


    def __init__(self, inseg_entry=None, attr_list=None, mode=None,):
        self.inseg_entry = inseg_entry
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.inseg_entry = []
                    (_etype1221, _size1218) = iprot.readListBegin()
                    for _i1222 in range(_size1218):
                        _elem1223 = sai_thrift_inseg_entry_t()
                        _elem1223.read(iprot)
                        self.inseg_entry.append(_elem1223)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1227, _size1224) = iprot.readListBegin()
                    for _i1228 in range(_size1224):
                        _elem1229 = sai_thrift_attribute_t()
                        _elem1229.read(iprot)
                        self.attr_list.append(_elem1229)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_inseg_entry_attribute_args')
        if self.inseg_entry is not None:
            oprot.writeFieldBegin('inseg_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.inseg_entry))
            for iter1230 in self.inseg_entry:
                iter1230.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1231 in self.attr_list:
                iter1231.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_inseg_entry_attribute_args)
sai_thrift_bulk_set_inseg_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'inseg_entry', (TType.STRUCT, [sai_thrift_inseg_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_bulk_set_inseg_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1235, _size1232) = iprot.readListBegin()
                    for _i1236 in range(_size1232):
                        _elem1237 = iprot.readI32()
                        self.success.append(_elem1237)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_inseg_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1238 in self.success:
                oprot.writeI32(iter1238)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_inseg_entry_attribute_result)
sai_thrift_bulk_set_inseg_entry_attribute_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_get_inseg_entry_attribute_args(object):
    """
    Attributes:
     - inseg_entry
     - attr_count
     - attr_list
     - mode
     - object_statuses

    """


    def __init__(self, inseg_entry=None, attr_count=None, attr_list=None, mode=None, object_statuses=None,):
        self.inseg_entry = inseg_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode
        self.object_statuses = object_statuses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.inseg_entry = []
                    (_etype1242, _size1239) = iprot.readListBegin()
                    for _i1243 in range(_size1239):
                        _elem1244 = sai_thrift_inseg_entry_t()
                        _elem1244.read(iprot)
                        self.inseg_entry.append(_elem1244)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1248, _size1245) = iprot.readListBegin()
                    for _i1249 in range(_size1245):
                        _elem1250 = iprot.readI32()
                        self.attr_count.append(_elem1250)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.object_statuses = []
                    (_etype1254, _size1251) = iprot.readListBegin()
                    for _i1255 in range(_size1251):
                        _elem1256 = iprot.readI32()
                        self.object_statuses.append(_elem1256)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_inseg_entry_attribute_args')
        if self.inseg_entry is not None:
            oprot.writeFieldBegin('inseg_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.inseg_entry))
            for iter1257 in self.inseg_entry:
                iter1257.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1258 in self.attr_count:
                oprot.writeI32(iter1258)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 3)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.object_statuses is not None:
            oprot.writeFieldBegin('object_statuses', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.object_statuses))
            for iter1259 in self.object_statuses:
                oprot.writeI32(iter1259)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_inseg_entry_attribute_args)
sai_thrift_bulk_get_inseg_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'inseg_entry', (TType.STRUCT, [sai_thrift_inseg_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
    (5, TType.LIST, 'object_statuses', (TType.I32, None, False), None, ),  # 5
)


class sai_thrift_bulk_get_inseg_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_inseg_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_inseg_entry_attribute_result)
sai_thrift_bulk_get_inseg_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_my_mac_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1263, _size1260) = iprot.readListBegin()
                    for _i1264 in range(_size1260):
                        _elem1265 = sai_thrift_attribute_t()
                        _elem1265.read(iprot)
                        self.attr_list.append(_elem1265)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_my_mac_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1266 in self.attr_list:
                iter1266.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_my_mac_args)
sai_thrift_create_my_mac_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_my_mac_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_my_mac_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_my_mac_result)
sai_thrift_create_my_mac_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_my_mac_args(object):
    """
    Attributes:
     - my_mac_oid

    """


    def __init__(self, my_mac_oid=None,):
        self.my_mac_oid = my_mac_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.my_mac_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_my_mac_args')
        if self.my_mac_oid is not None:
            oprot.writeFieldBegin('my_mac_oid', TType.I64, 1)
            oprot.writeI64(self.my_mac_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_my_mac_args)
sai_thrift_remove_my_mac_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'my_mac_oid', None, None, ),  # 1
)


class sai_thrift_remove_my_mac_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_my_mac_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_my_mac_result)
sai_thrift_remove_my_mac_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_my_mac_attribute_args(object):
    """
    Attributes:
     - my_mac_oid
     - attr

    """


    def __init__(self, my_mac_oid=None, attr=None,):
        self.my_mac_oid = my_mac_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.my_mac_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_my_mac_attribute_args')
        if self.my_mac_oid is not None:
            oprot.writeFieldBegin('my_mac_oid', TType.I64, 1)
            oprot.writeI64(self.my_mac_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_my_mac_attribute_args)
sai_thrift_set_my_mac_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'my_mac_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_my_mac_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_my_mac_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_my_mac_attribute_result)
sai_thrift_set_my_mac_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_my_mac_attribute_args(object):
    """
    Attributes:
     - my_mac_oid
     - attr_list

    """


    def __init__(self, my_mac_oid=None, attr_list=None,):
        self.my_mac_oid = my_mac_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.my_mac_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_my_mac_attribute_args')
        if self.my_mac_oid is not None:
            oprot.writeFieldBegin('my_mac_oid', TType.I64, 1)
            oprot.writeI64(self.my_mac_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_my_mac_attribute_args)
sai_thrift_get_my_mac_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'my_mac_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_my_mac_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_my_mac_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_my_mac_attribute_result)
sai_thrift_get_my_mac_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_nat_entry_args(object):
    """
    Attributes:
     - nat_entry
     - attr_list

    """


    def __init__(self, nat_entry=None, attr_list=None,):
        self.nat_entry = nat_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.nat_entry = sai_thrift_nat_entry_t()
                    self.nat_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1270, _size1267) = iprot.readListBegin()
                    for _i1271 in range(_size1267):
                        _elem1272 = sai_thrift_attribute_t()
                        _elem1272.read(iprot)
                        self.attr_list.append(_elem1272)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_nat_entry_args')
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.STRUCT, 1)
            self.nat_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1273 in self.attr_list:
                iter1273.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_nat_entry_args)
sai_thrift_create_nat_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'nat_entry', [sai_thrift_nat_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_nat_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_nat_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_nat_entry_result)
sai_thrift_create_nat_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_nat_entry_args(object):
    """
    Attributes:
     - nat_entry

    """


    def __init__(self, nat_entry=None,):
        self.nat_entry = nat_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.nat_entry = sai_thrift_nat_entry_t()
                    self.nat_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_nat_entry_args')
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.STRUCT, 1)
            self.nat_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_nat_entry_args)
sai_thrift_remove_nat_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'nat_entry', [sai_thrift_nat_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_nat_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_nat_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_nat_entry_result)
sai_thrift_remove_nat_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_nat_entry_attribute_args(object):
    """
    Attributes:
     - nat_entry
     - attr

    """


    def __init__(self, nat_entry=None, attr=None,):
        self.nat_entry = nat_entry
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.nat_entry = sai_thrift_nat_entry_t()
                    self.nat_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_nat_entry_attribute_args')
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.STRUCT, 1)
            self.nat_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_nat_entry_attribute_args)
sai_thrift_set_nat_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'nat_entry', [sai_thrift_nat_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_nat_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_nat_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_nat_entry_attribute_result)
sai_thrift_set_nat_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_nat_entry_attribute_args(object):
    """
    Attributes:
     - nat_entry
     - attr_list

    """


    def __init__(self, nat_entry=None, attr_list=None,):
        self.nat_entry = nat_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.nat_entry = sai_thrift_nat_entry_t()
                    self.nat_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_nat_entry_attribute_args')
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.STRUCT, 1)
            self.nat_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_nat_entry_attribute_args)
sai_thrift_get_nat_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'nat_entry', [sai_thrift_nat_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_nat_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_nat_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_nat_entry_attribute_result)
sai_thrift_get_nat_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_create_nat_entry_args(object):
    """
    Attributes:
     - nat_entry
     - attr_count
     - attr_list
     - mode

    """


    def __init__(self, nat_entry=None, attr_count=None, attr_list=None, mode=None,):
        self.nat_entry = nat_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.nat_entry = []
                    (_etype1277, _size1274) = iprot.readListBegin()
                    for _i1278 in range(_size1274):
                        _elem1279 = sai_thrift_nat_entry_t()
                        _elem1279.read(iprot)
                        self.nat_entry.append(_elem1279)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1283, _size1280) = iprot.readListBegin()
                    for _i1284 in range(_size1280):
                        _elem1285 = iprot.readI32()
                        self.attr_count.append(_elem1285)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1289, _size1286) = iprot.readListBegin()
                    for _i1290 in range(_size1286):
                        _elem1291 = sai_thrift_attribute_t()
                        _elem1291.read(iprot)
                        self.attr_list.append(_elem1291)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_nat_entry_args')
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.nat_entry))
            for iter1292 in self.nat_entry:
                iter1292.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1293 in self.attr_count:
                oprot.writeI32(iter1293)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1294 in self.attr_list:
                iter1294.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_nat_entry_args)
sai_thrift_bulk_create_nat_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'nat_entry', (TType.STRUCT, [sai_thrift_nat_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
)


class sai_thrift_bulk_create_nat_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1298, _size1295) = iprot.readListBegin()
                    for _i1299 in range(_size1295):
                        _elem1300 = iprot.readI32()
                        self.success.append(_elem1300)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_nat_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1301 in self.success:
                oprot.writeI32(iter1301)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_nat_entry_result)
sai_thrift_bulk_create_nat_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_remove_nat_entry_args(object):
    """
    Attributes:
     - nat_entry
     - mode

    """


    def __init__(self, nat_entry=None, mode=None,):
        self.nat_entry = nat_entry
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.nat_entry = []
                    (_etype1305, _size1302) = iprot.readListBegin()
                    for _i1306 in range(_size1302):
                        _elem1307 = sai_thrift_nat_entry_t()
                        _elem1307.read(iprot)
                        self.nat_entry.append(_elem1307)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_nat_entry_args')
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.nat_entry))
            for iter1308 in self.nat_entry:
                iter1308.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 2)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_nat_entry_args)
sai_thrift_bulk_remove_nat_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'nat_entry', (TType.STRUCT, [sai_thrift_nat_entry_t, None], False), None, ),  # 1
    (2, TType.I32, 'mode', None, None, ),  # 2
)


class sai_thrift_bulk_remove_nat_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1312, _size1309) = iprot.readListBegin()
                    for _i1313 in range(_size1309):
                        _elem1314 = iprot.readI32()
                        self.success.append(_elem1314)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_nat_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1315 in self.success:
                oprot.writeI32(iter1315)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_nat_entry_result)
sai_thrift_bulk_remove_nat_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_set_nat_entry_attribute_args(object):
    """
    Attributes:
     - nat_entry
     - attr_list
     - mode

    """


    def __init__(self, nat_entry=None, attr_list=None, mode=None,):
        self.nat_entry = nat_entry
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.nat_entry = []
                    (_etype1319, _size1316) = iprot.readListBegin()
                    for _i1320 in range(_size1316):
                        _elem1321 = sai_thrift_nat_entry_t()
                        _elem1321.read(iprot)
                        self.nat_entry.append(_elem1321)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1325, _size1322) = iprot.readListBegin()
                    for _i1326 in range(_size1322):
                        _elem1327 = sai_thrift_attribute_t()
                        _elem1327.read(iprot)
                        self.attr_list.append(_elem1327)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_nat_entry_attribute_args')
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.nat_entry))
            for iter1328 in self.nat_entry:
                iter1328.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1329 in self.attr_list:
                iter1329.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_nat_entry_attribute_args)
sai_thrift_bulk_set_nat_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'nat_entry', (TType.STRUCT, [sai_thrift_nat_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_bulk_set_nat_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1333, _size1330) = iprot.readListBegin()
                    for _i1334 in range(_size1330):
                        _elem1335 = iprot.readI32()
                        self.success.append(_elem1335)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_nat_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1336 in self.success:
                oprot.writeI32(iter1336)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_nat_entry_attribute_result)
sai_thrift_bulk_set_nat_entry_attribute_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_get_nat_entry_attribute_args(object):
    """
    Attributes:
     - nat_entry
     - attr_count
     - attr_list
     - mode
     - object_statuses

    """


    def __init__(self, nat_entry=None, attr_count=None, attr_list=None, mode=None, object_statuses=None,):
        self.nat_entry = nat_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode
        self.object_statuses = object_statuses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.nat_entry = []
                    (_etype1340, _size1337) = iprot.readListBegin()
                    for _i1341 in range(_size1337):
                        _elem1342 = sai_thrift_nat_entry_t()
                        _elem1342.read(iprot)
                        self.nat_entry.append(_elem1342)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1346, _size1343) = iprot.readListBegin()
                    for _i1347 in range(_size1343):
                        _elem1348 = iprot.readI32()
                        self.attr_count.append(_elem1348)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.object_statuses = []
                    (_etype1352, _size1349) = iprot.readListBegin()
                    for _i1353 in range(_size1349):
                        _elem1354 = iprot.readI32()
                        self.object_statuses.append(_elem1354)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_nat_entry_attribute_args')
        if self.nat_entry is not None:
            oprot.writeFieldBegin('nat_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.nat_entry))
            for iter1355 in self.nat_entry:
                iter1355.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1356 in self.attr_count:
                oprot.writeI32(iter1356)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 3)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.object_statuses is not None:
            oprot.writeFieldBegin('object_statuses', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.object_statuses))
            for iter1357 in self.object_statuses:
                oprot.writeI32(iter1357)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_nat_entry_attribute_args)
sai_thrift_bulk_get_nat_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'nat_entry', (TType.STRUCT, [sai_thrift_nat_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
    (5, TType.LIST, 'object_statuses', (TType.I32, None, False), None, ),  # 5
)


class sai_thrift_bulk_get_nat_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_nat_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_nat_entry_attribute_result)
sai_thrift_bulk_get_nat_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_nat_zone_counter_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1361, _size1358) = iprot.readListBegin()
                    for _i1362 in range(_size1358):
                        _elem1363 = sai_thrift_attribute_t()
                        _elem1363.read(iprot)
                        self.attr_list.append(_elem1363)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_nat_zone_counter_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1364 in self.attr_list:
                iter1364.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_nat_zone_counter_args)
sai_thrift_create_nat_zone_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_nat_zone_counter_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_nat_zone_counter_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_nat_zone_counter_result)
sai_thrift_create_nat_zone_counter_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_nat_zone_counter_args(object):
    """
    Attributes:
     - nat_zone_counter_oid

    """


    def __init__(self, nat_zone_counter_oid=None,):
        self.nat_zone_counter_oid = nat_zone_counter_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nat_zone_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_nat_zone_counter_args')
        if self.nat_zone_counter_oid is not None:
            oprot.writeFieldBegin('nat_zone_counter_oid', TType.I64, 1)
            oprot.writeI64(self.nat_zone_counter_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_nat_zone_counter_args)
sai_thrift_remove_nat_zone_counter_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nat_zone_counter_oid', None, None, ),  # 1
)


class sai_thrift_remove_nat_zone_counter_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_nat_zone_counter_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_nat_zone_counter_result)
sai_thrift_remove_nat_zone_counter_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_nat_zone_counter_attribute_args(object):
    """
    Attributes:
     - nat_zone_counter_oid
     - attr

    """


    def __init__(self, nat_zone_counter_oid=None, attr=None,):
        self.nat_zone_counter_oid = nat_zone_counter_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nat_zone_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_nat_zone_counter_attribute_args')
        if self.nat_zone_counter_oid is not None:
            oprot.writeFieldBegin('nat_zone_counter_oid', TType.I64, 1)
            oprot.writeI64(self.nat_zone_counter_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_nat_zone_counter_attribute_args)
sai_thrift_set_nat_zone_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nat_zone_counter_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_nat_zone_counter_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_nat_zone_counter_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_nat_zone_counter_attribute_result)
sai_thrift_set_nat_zone_counter_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_nat_zone_counter_attribute_args(object):
    """
    Attributes:
     - nat_zone_counter_oid
     - attr_list

    """


    def __init__(self, nat_zone_counter_oid=None, attr_list=None,):
        self.nat_zone_counter_oid = nat_zone_counter_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.nat_zone_counter_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_nat_zone_counter_attribute_args')
        if self.nat_zone_counter_oid is not None:
            oprot.writeFieldBegin('nat_zone_counter_oid', TType.I64, 1)
            oprot.writeI64(self.nat_zone_counter_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_nat_zone_counter_attribute_args)
sai_thrift_get_nat_zone_counter_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'nat_zone_counter_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_nat_zone_counter_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_nat_zone_counter_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_nat_zone_counter_attribute_result)
sai_thrift_get_nat_zone_counter_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_neighbor_entry_args(object):
    """
    Attributes:
     - neighbor_entry
     - attr_list

    """


    def __init__(self, neighbor_entry=None, attr_list=None,):
        self.neighbor_entry = neighbor_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.neighbor_entry = sai_thrift_neighbor_entry_t()
                    self.neighbor_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1368, _size1365) = iprot.readListBegin()
                    for _i1369 in range(_size1365):
                        _elem1370 = sai_thrift_attribute_t()
                        _elem1370.read(iprot)
                        self.attr_list.append(_elem1370)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_neighbor_entry_args')
        if self.neighbor_entry is not None:
            oprot.writeFieldBegin('neighbor_entry', TType.STRUCT, 1)
            self.neighbor_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1371 in self.attr_list:
                iter1371.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_neighbor_entry_args)
sai_thrift_create_neighbor_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'neighbor_entry', [sai_thrift_neighbor_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_neighbor_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_neighbor_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_neighbor_entry_result)
sai_thrift_create_neighbor_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_neighbor_entry_args(object):
    """
    Attributes:
     - neighbor_entry

    """


    def __init__(self, neighbor_entry=None,):
        self.neighbor_entry = neighbor_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.neighbor_entry = sai_thrift_neighbor_entry_t()
                    self.neighbor_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_neighbor_entry_args')
        if self.neighbor_entry is not None:
            oprot.writeFieldBegin('neighbor_entry', TType.STRUCT, 1)
            self.neighbor_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_neighbor_entry_args)
sai_thrift_remove_neighbor_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'neighbor_entry', [sai_thrift_neighbor_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_neighbor_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_neighbor_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_neighbor_entry_result)
sai_thrift_remove_neighbor_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_neighbor_entry_attribute_args(object):
    """
    Attributes:
     - neighbor_entry
     - attr

    """


    def __init__(self, neighbor_entry=None, attr=None,):
        self.neighbor_entry = neighbor_entry
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.neighbor_entry = sai_thrift_neighbor_entry_t()
                    self.neighbor_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_neighbor_entry_attribute_args')
        if self.neighbor_entry is not None:
            oprot.writeFieldBegin('neighbor_entry', TType.STRUCT, 1)
            self.neighbor_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_neighbor_entry_attribute_args)
sai_thrift_set_neighbor_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'neighbor_entry', [sai_thrift_neighbor_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_neighbor_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_neighbor_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_neighbor_entry_attribute_result)
sai_thrift_set_neighbor_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_neighbor_entry_attribute_args(object):
    """
    Attributes:
     - neighbor_entry
     - attr_list

    """


    def __init__(self, neighbor_entry=None, attr_list=None,):
        self.neighbor_entry = neighbor_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.neighbor_entry = sai_thrift_neighbor_entry_t()
                    self.neighbor_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_neighbor_entry_attribute_args')
        if self.neighbor_entry is not None:
            oprot.writeFieldBegin('neighbor_entry', TType.STRUCT, 1)
            self.neighbor_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_neighbor_entry_attribute_args)
sai_thrift_get_neighbor_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'neighbor_entry', [sai_thrift_neighbor_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_neighbor_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_neighbor_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_neighbor_entry_attribute_result)
sai_thrift_get_neighbor_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_all_neighbor_entries_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_all_neighbor_entries_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_all_neighbor_entries_args)
sai_thrift_remove_all_neighbor_entries_args.thrift_spec = (
)


class sai_thrift_remove_all_neighbor_entries_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_all_neighbor_entries_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_all_neighbor_entries_result)
sai_thrift_remove_all_neighbor_entries_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_create_neighbor_entry_args(object):
    """
    Attributes:
     - neighbor_entry
     - attr_count
     - attr_list
     - mode

    """


    def __init__(self, neighbor_entry=None, attr_count=None, attr_list=None, mode=None,):
        self.neighbor_entry = neighbor_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.neighbor_entry = []
                    (_etype1375, _size1372) = iprot.readListBegin()
                    for _i1376 in range(_size1372):
                        _elem1377 = sai_thrift_neighbor_entry_t()
                        _elem1377.read(iprot)
                        self.neighbor_entry.append(_elem1377)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1381, _size1378) = iprot.readListBegin()
                    for _i1382 in range(_size1378):
                        _elem1383 = iprot.readI32()
                        self.attr_count.append(_elem1383)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1387, _size1384) = iprot.readListBegin()
                    for _i1388 in range(_size1384):
                        _elem1389 = sai_thrift_attribute_t()
                        _elem1389.read(iprot)
                        self.attr_list.append(_elem1389)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_neighbor_entry_args')
        if self.neighbor_entry is not None:
            oprot.writeFieldBegin('neighbor_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.neighbor_entry))
            for iter1390 in self.neighbor_entry:
                iter1390.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1391 in self.attr_count:
                oprot.writeI32(iter1391)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1392 in self.attr_list:
                iter1392.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_neighbor_entry_args)
sai_thrift_bulk_create_neighbor_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'neighbor_entry', (TType.STRUCT, [sai_thrift_neighbor_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
)


class sai_thrift_bulk_create_neighbor_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1396, _size1393) = iprot.readListBegin()
                    for _i1397 in range(_size1393):
                        _elem1398 = iprot.readI32()
                        self.success.append(_elem1398)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_neighbor_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1399 in self.success:
                oprot.writeI32(iter1399)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_neighbor_entry_result)
sai_thrift_bulk_create_neighbor_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_remove_neighbor_entry_args(object):
    """
    Attributes:
     - neighbor_entry
     - mode

    """


    def __init__(self, neighbor_entry=None, mode=None,):
        self.neighbor_entry = neighbor_entry
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.neighbor_entry = []
                    (_etype1403, _size1400) = iprot.readListBegin()
                    for _i1404 in range(_size1400):
                        _elem1405 = sai_thrift_neighbor_entry_t()
                        _elem1405.read(iprot)
                        self.neighbor_entry.append(_elem1405)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_neighbor_entry_args')
        if self.neighbor_entry is not None:
            oprot.writeFieldBegin('neighbor_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.neighbor_entry))
            for iter1406 in self.neighbor_entry:
                iter1406.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 2)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_neighbor_entry_args)
sai_thrift_bulk_remove_neighbor_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'neighbor_entry', (TType.STRUCT, [sai_thrift_neighbor_entry_t, None], False), None, ),  # 1
    (2, TType.I32, 'mode', None, None, ),  # 2
)


class sai_thrift_bulk_remove_neighbor_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1410, _size1407) = iprot.readListBegin()
                    for _i1411 in range(_size1407):
                        _elem1412 = iprot.readI32()
                        self.success.append(_elem1412)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_neighbor_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1413 in self.success:
                oprot.writeI32(iter1413)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_neighbor_entry_result)
sai_thrift_bulk_remove_neighbor_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_set_neighbor_entry_attribute_args(object):
    """
    Attributes:
     - neighbor_entry
     - attr_list
     - mode

    """


    def __init__(self, neighbor_entry=None, attr_list=None, mode=None,):
        self.neighbor_entry = neighbor_entry
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.neighbor_entry = []
                    (_etype1417, _size1414) = iprot.readListBegin()
                    for _i1418 in range(_size1414):
                        _elem1419 = sai_thrift_neighbor_entry_t()
                        _elem1419.read(iprot)
                        self.neighbor_entry.append(_elem1419)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1423, _size1420) = iprot.readListBegin()
                    for _i1424 in range(_size1420):
                        _elem1425 = sai_thrift_attribute_t()
                        _elem1425.read(iprot)
                        self.attr_list.append(_elem1425)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_neighbor_entry_attribute_args')
        if self.neighbor_entry is not None:
            oprot.writeFieldBegin('neighbor_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.neighbor_entry))
            for iter1426 in self.neighbor_entry:
                iter1426.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1427 in self.attr_list:
                iter1427.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_neighbor_entry_attribute_args)
sai_thrift_bulk_set_neighbor_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'neighbor_entry', (TType.STRUCT, [sai_thrift_neighbor_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_bulk_set_neighbor_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1431, _size1428) = iprot.readListBegin()
                    for _i1432 in range(_size1428):
                        _elem1433 = iprot.readI32()
                        self.success.append(_elem1433)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_neighbor_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1434 in self.success:
                oprot.writeI32(iter1434)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_neighbor_entry_attribute_result)
sai_thrift_bulk_set_neighbor_entry_attribute_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_get_neighbor_entry_attribute_args(object):
    """
    Attributes:
     - neighbor_entry
     - attr_count
     - attr_list
     - mode
     - object_statuses

    """


    def __init__(self, neighbor_entry=None, attr_count=None, attr_list=None, mode=None, object_statuses=None,):
        self.neighbor_entry = neighbor_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode
        self.object_statuses = object_statuses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.neighbor_entry = []
                    (_etype1438, _size1435) = iprot.readListBegin()
                    for _i1439 in range(_size1435):
                        _elem1440 = sai_thrift_neighbor_entry_t()
                        _elem1440.read(iprot)
                        self.neighbor_entry.append(_elem1440)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1444, _size1441) = iprot.readListBegin()
                    for _i1445 in range(_size1441):
                        _elem1446 = iprot.readI32()
                        self.attr_count.append(_elem1446)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.object_statuses = []
                    (_etype1450, _size1447) = iprot.readListBegin()
                    for _i1451 in range(_size1447):
                        _elem1452 = iprot.readI32()
                        self.object_statuses.append(_elem1452)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_neighbor_entry_attribute_args')
        if self.neighbor_entry is not None:
            oprot.writeFieldBegin('neighbor_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.neighbor_entry))
            for iter1453 in self.neighbor_entry:
                iter1453.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1454 in self.attr_count:
                oprot.writeI32(iter1454)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 3)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.object_statuses is not None:
            oprot.writeFieldBegin('object_statuses', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.object_statuses))
            for iter1455 in self.object_statuses:
                oprot.writeI32(iter1455)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_neighbor_entry_attribute_args)
sai_thrift_bulk_get_neighbor_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'neighbor_entry', (TType.STRUCT, [sai_thrift_neighbor_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
    (5, TType.LIST, 'object_statuses', (TType.I32, None, False), None, ),  # 5
)


class sai_thrift_bulk_get_neighbor_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_neighbor_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_neighbor_entry_attribute_result)
sai_thrift_bulk_get_neighbor_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_next_hop_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1459, _size1456) = iprot.readListBegin()
                    for _i1460 in range(_size1456):
                        _elem1461 = sai_thrift_attribute_t()
                        _elem1461.read(iprot)
                        self.attr_list.append(_elem1461)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1462 in self.attr_list:
                iter1462.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_args)
sai_thrift_create_next_hop_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_next_hop_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_result)
sai_thrift_create_next_hop_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_next_hop_args(object):
    """
    Attributes:
     - next_hop_oid

    """


    def __init__(self, next_hop_oid=None,):
        self.next_hop_oid = next_hop_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_args')
        if self.next_hop_oid is not None:
            oprot.writeFieldBegin('next_hop_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_args)
sai_thrift_remove_next_hop_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_oid', None, None, ),  # 1
)


class sai_thrift_remove_next_hop_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_result)
sai_thrift_remove_next_hop_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_next_hop_attribute_args(object):
    """
    Attributes:
     - next_hop_oid
     - attr

    """


    def __init__(self, next_hop_oid=None, attr=None,):
        self.next_hop_oid = next_hop_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_attribute_args')
        if self.next_hop_oid is not None:
            oprot.writeFieldBegin('next_hop_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_attribute_args)
sai_thrift_set_next_hop_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_next_hop_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_attribute_result)
sai_thrift_set_next_hop_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_next_hop_attribute_args(object):
    """
    Attributes:
     - next_hop_oid
     - attr_list

    """


    def __init__(self, next_hop_oid=None, attr_list=None,):
        self.next_hop_oid = next_hop_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_attribute_args')
        if self.next_hop_oid is not None:
            oprot.writeFieldBegin('next_hop_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_attribute_args)
sai_thrift_get_next_hop_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_next_hop_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_attribute_result)
sai_thrift_get_next_hop_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_next_hop_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1466, _size1463) = iprot.readListBegin()
                    for _i1467 in range(_size1463):
                        _elem1468 = sai_thrift_attribute_t()
                        _elem1468.read(iprot)
                        self.attr_list.append(_elem1468)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1469 in self.attr_list:
                iter1469.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_args)
sai_thrift_create_next_hop_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_next_hop_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_result)
sai_thrift_create_next_hop_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_next_hop_group_args(object):
    """
    Attributes:
     - next_hop_group_oid

    """


    def __init__(self, next_hop_group_oid=None,):
        self.next_hop_group_oid = next_hop_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_args')
        if self.next_hop_group_oid is not None:
            oprot.writeFieldBegin('next_hop_group_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_args)
sai_thrift_remove_next_hop_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_next_hop_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_result)
sai_thrift_remove_next_hop_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_next_hop_group_attribute_args(object):
    """
    Attributes:
     - next_hop_group_oid
     - attr

    """


    def __init__(self, next_hop_group_oid=None, attr=None,):
        self.next_hop_group_oid = next_hop_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_group_attribute_args')
        if self.next_hop_group_oid is not None:
            oprot.writeFieldBegin('next_hop_group_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_group_attribute_args)
sai_thrift_set_next_hop_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_next_hop_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_group_attribute_result)
sai_thrift_set_next_hop_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_next_hop_group_attribute_args(object):
    """
    Attributes:
     - next_hop_group_oid
     - attr_list

    """


    def __init__(self, next_hop_group_oid=None, attr_list=None,):
        self.next_hop_group_oid = next_hop_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_attribute_args')
        if self.next_hop_group_oid is not None:
            oprot.writeFieldBegin('next_hop_group_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_attribute_args)
sai_thrift_get_next_hop_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_next_hop_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_attribute_result)
sai_thrift_get_next_hop_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_next_hop_group_member_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1473, _size1470) = iprot.readListBegin()
                    for _i1474 in range(_size1470):
                        _elem1475 = sai_thrift_attribute_t()
                        _elem1475.read(iprot)
                        self.attr_list.append(_elem1475)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_member_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1476 in self.attr_list:
                iter1476.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_member_args)
sai_thrift_create_next_hop_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_next_hop_group_member_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_member_result)
sai_thrift_create_next_hop_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_next_hop_group_member_args(object):
    """
    Attributes:
     - next_hop_group_member_oid

    """


    def __init__(self, next_hop_group_member_oid=None,):
        self.next_hop_group_member_oid = next_hop_group_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_member_args')
        if self.next_hop_group_member_oid is not None:
            oprot.writeFieldBegin('next_hop_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_group_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_member_args)
sai_thrift_remove_next_hop_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_group_member_oid', None, None, ),  # 1
)


class sai_thrift_remove_next_hop_group_member_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_member_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_member_result)
sai_thrift_remove_next_hop_group_member_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_next_hop_group_member_attribute_args(object):
    """
    Attributes:
     - next_hop_group_member_oid
     - attr

    """


    def __init__(self, next_hop_group_member_oid=None, attr=None,):
        self.next_hop_group_member_oid = next_hop_group_member_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_group_member_attribute_args')
        if self.next_hop_group_member_oid is not None:
            oprot.writeFieldBegin('next_hop_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_group_member_attribute_args)
sai_thrift_set_next_hop_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_next_hop_group_member_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_group_member_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_group_member_attribute_result)
sai_thrift_set_next_hop_group_member_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_next_hop_group_member_attribute_args(object):
    """
    Attributes:
     - next_hop_group_member_oid
     - attr_list

    """


    def __init__(self, next_hop_group_member_oid=None, attr_list=None,):
        self.next_hop_group_member_oid = next_hop_group_member_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_member_attribute_args')
        if self.next_hop_group_member_oid is not None:
            oprot.writeFieldBegin('next_hop_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_member_attribute_args)
sai_thrift_get_next_hop_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_next_hop_group_member_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_member_attribute_result)
sai_thrift_get_next_hop_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_next_hop_group_map_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1480, _size1477) = iprot.readListBegin()
                    for _i1481 in range(_size1477):
                        _elem1482 = sai_thrift_attribute_t()
                        _elem1482.read(iprot)
                        self.attr_list.append(_elem1482)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_map_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1483 in self.attr_list:
                iter1483.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_map_args)
sai_thrift_create_next_hop_group_map_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_next_hop_group_map_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_next_hop_group_map_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_next_hop_group_map_result)
sai_thrift_create_next_hop_group_map_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_next_hop_group_map_args(object):
    """
    Attributes:
     - next_hop_group_map_oid

    """


    def __init__(self, next_hop_group_map_oid=None,):
        self.next_hop_group_map_oid = next_hop_group_map_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_group_map_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_map_args')
        if self.next_hop_group_map_oid is not None:
            oprot.writeFieldBegin('next_hop_group_map_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_group_map_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_map_args)
sai_thrift_remove_next_hop_group_map_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_group_map_oid', None, None, ),  # 1
)


class sai_thrift_remove_next_hop_group_map_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_next_hop_group_map_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_next_hop_group_map_result)
sai_thrift_remove_next_hop_group_map_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_next_hop_group_map_attribute_args(object):
    """
    Attributes:
     - next_hop_group_map_oid
     - attr

    """


    def __init__(self, next_hop_group_map_oid=None, attr=None,):
        self.next_hop_group_map_oid = next_hop_group_map_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_group_map_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_group_map_attribute_args')
        if self.next_hop_group_map_oid is not None:
            oprot.writeFieldBegin('next_hop_group_map_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_group_map_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_group_map_attribute_args)
sai_thrift_set_next_hop_group_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_group_map_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_next_hop_group_map_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_next_hop_group_map_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_next_hop_group_map_attribute_result)
sai_thrift_set_next_hop_group_map_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_next_hop_group_map_attribute_args(object):
    """
    Attributes:
     - next_hop_group_map_oid
     - attr_list

    """


    def __init__(self, next_hop_group_map_oid=None, attr_list=None,):
        self.next_hop_group_map_oid = next_hop_group_map_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.next_hop_group_map_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_map_attribute_args')
        if self.next_hop_group_map_oid is not None:
            oprot.writeFieldBegin('next_hop_group_map_oid', TType.I64, 1)
            oprot.writeI64(self.next_hop_group_map_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_map_attribute_args)
sai_thrift_get_next_hop_group_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'next_hop_group_map_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_next_hop_group_map_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_next_hop_group_map_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_next_hop_group_map_attribute_result)
sai_thrift_get_next_hop_group_map_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_policer_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1487, _size1484) = iprot.readListBegin()
                    for _i1488 in range(_size1484):
                        _elem1489 = sai_thrift_attribute_t()
                        _elem1489.read(iprot)
                        self.attr_list.append(_elem1489)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_policer_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1490 in self.attr_list:
                iter1490.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_policer_args)
sai_thrift_create_policer_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_policer_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_policer_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_policer_result)
sai_thrift_create_policer_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_policer_args(object):
    """
    Attributes:
     - policer_oid

    """


    def __init__(self, policer_oid=None,):
        self.policer_oid = policer_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.policer_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_policer_args')
        if self.policer_oid is not None:
            oprot.writeFieldBegin('policer_oid', TType.I64, 1)
            oprot.writeI64(self.policer_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_policer_args)
sai_thrift_remove_policer_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'policer_oid', None, None, ),  # 1
)


class sai_thrift_remove_policer_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_policer_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_policer_result)
sai_thrift_remove_policer_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_policer_attribute_args(object):
    """
    Attributes:
     - policer_oid
     - attr

    """


    def __init__(self, policer_oid=None, attr=None,):
        self.policer_oid = policer_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.policer_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_policer_attribute_args')
        if self.policer_oid is not None:
            oprot.writeFieldBegin('policer_oid', TType.I64, 1)
            oprot.writeI64(self.policer_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_policer_attribute_args)
sai_thrift_set_policer_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'policer_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_policer_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_policer_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_policer_attribute_result)
sai_thrift_set_policer_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_policer_attribute_args(object):
    """
    Attributes:
     - policer_oid
     - attr_list

    """


    def __init__(self, policer_oid=None, attr_list=None,):
        self.policer_oid = policer_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.policer_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_attribute_args')
        if self.policer_oid is not None:
            oprot.writeFieldBegin('policer_oid', TType.I64, 1)
            oprot.writeI64(self.policer_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_attribute_args)
sai_thrift_get_policer_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'policer_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_policer_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_attribute_result)
sai_thrift_get_policer_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_policer_stats_args(object):
    """
    Attributes:
     - policer_oid
     - counter_ids

    """


    def __init__(self, policer_oid=None, counter_ids=None,):
        self.policer_oid = policer_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.policer_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1494, _size1491) = iprot.readListBegin()
                    for _i1495 in range(_size1491):
                        _elem1496 = iprot.readI32()
                        self.counter_ids.append(_elem1496)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_stats_args')
        if self.policer_oid is not None:
            oprot.writeFieldBegin('policer_oid', TType.I64, 1)
            oprot.writeI64(self.policer_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1497 in self.counter_ids:
                oprot.writeI32(iter1497)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_stats_args)
sai_thrift_get_policer_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'policer_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_policer_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1501, _size1498) = iprot.readListBegin()
                    for _i1502 in range(_size1498):
                        _elem1503 = iprot.readI64()
                        self.success.append(_elem1503)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1504 in self.success:
                oprot.writeI64(iter1504)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_stats_result)
sai_thrift_get_policer_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_policer_stats_ext_args(object):
    """
    Attributes:
     - policer_oid
     - counter_ids
     - mode

    """


    def __init__(self, policer_oid=None, counter_ids=None, mode=None,):
        self.policer_oid = policer_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.policer_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1508, _size1505) = iprot.readListBegin()
                    for _i1509 in range(_size1505):
                        _elem1510 = iprot.readI32()
                        self.counter_ids.append(_elem1510)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_stats_ext_args')
        if self.policer_oid is not None:
            oprot.writeFieldBegin('policer_oid', TType.I64, 1)
            oprot.writeI64(self.policer_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1511 in self.counter_ids:
                oprot.writeI32(iter1511)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_stats_ext_args)
sai_thrift_get_policer_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'policer_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_policer_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1515, _size1512) = iprot.readListBegin()
                    for _i1516 in range(_size1512):
                        _elem1517 = iprot.readI64()
                        self.success.append(_elem1517)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_policer_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1518 in self.success:
                oprot.writeI64(iter1518)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_policer_stats_ext_result)
sai_thrift_get_policer_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_policer_stats_args(object):
    """
    Attributes:
     - policer_oid
     - counter_ids

    """


    def __init__(self, policer_oid=None, counter_ids=None,):
        self.policer_oid = policer_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.policer_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1522, _size1519) = iprot.readListBegin()
                    for _i1523 in range(_size1519):
                        _elem1524 = iprot.readI32()
                        self.counter_ids.append(_elem1524)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_policer_stats_args')
        if self.policer_oid is not None:
            oprot.writeFieldBegin('policer_oid', TType.I64, 1)
            oprot.writeI64(self.policer_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1525 in self.counter_ids:
                oprot.writeI32(iter1525)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_policer_stats_args)
sai_thrift_clear_policer_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'policer_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_policer_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_policer_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_policer_stats_result)
sai_thrift_clear_policer_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_port_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1529, _size1526) = iprot.readListBegin()
                    for _i1530 in range(_size1526):
                        _elem1531 = sai_thrift_attribute_t()
                        _elem1531.read(iprot)
                        self.attr_list.append(_elem1531)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1532 in self.attr_list:
                iter1532.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_args)
sai_thrift_create_port_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_port_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_result)
sai_thrift_create_port_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_port_args(object):
    """
    Attributes:
     - port_oid

    """


    def __init__(self, port_oid=None,):
        self.port_oid = port_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_args')
        if self.port_oid is not None:
            oprot.writeFieldBegin('port_oid', TType.I64, 1)
            oprot.writeI64(self.port_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_args)
sai_thrift_remove_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_oid', None, None, ),  # 1
)


class sai_thrift_remove_port_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_result)
sai_thrift_remove_port_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_port_attribute_args(object):
    """
    Attributes:
     - port_oid
     - attr

    """


    def __init__(self, port_oid=None, attr=None,):
        self.port_oid = port_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_attribute_args')
        if self.port_oid is not None:
            oprot.writeFieldBegin('port_oid', TType.I64, 1)
            oprot.writeI64(self.port_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_attribute_args)
sai_thrift_set_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_port_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_attribute_result)
sai_thrift_set_port_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_port_attribute_args(object):
    """
    Attributes:
     - port_oid
     - attr_list

    """


    def __init__(self, port_oid=None, attr_list=None,):
        self.port_oid = port_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_attribute_args')
        if self.port_oid is not None:
            oprot.writeFieldBegin('port_oid', TType.I64, 1)
            oprot.writeI64(self.port_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_attribute_args)
sai_thrift_get_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_port_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_attribute_result)
sai_thrift_get_port_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_port_stats_args(object):
    """
    Attributes:
     - port_oid
     - counter_ids

    """


    def __init__(self, port_oid=None, counter_ids=None,):
        self.port_oid = port_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1536, _size1533) = iprot.readListBegin()
                    for _i1537 in range(_size1533):
                        _elem1538 = iprot.readI32()
                        self.counter_ids.append(_elem1538)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_stats_args')
        if self.port_oid is not None:
            oprot.writeFieldBegin('port_oid', TType.I64, 1)
            oprot.writeI64(self.port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1539 in self.counter_ids:
                oprot.writeI32(iter1539)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_stats_args)
sai_thrift_get_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_port_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1543, _size1540) = iprot.readListBegin()
                    for _i1544 in range(_size1540):
                        _elem1545 = iprot.readI64()
                        self.success.append(_elem1545)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1546 in self.success:
                oprot.writeI64(iter1546)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_stats_result)
sai_thrift_get_port_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_port_stats_ext_args(object):
    """
    Attributes:
     - port_oid
     - counter_ids
     - mode

    """


    def __init__(self, port_oid=None, counter_ids=None, mode=None,):
        self.port_oid = port_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1550, _size1547) = iprot.readListBegin()
                    for _i1551 in range(_size1547):
                        _elem1552 = iprot.readI32()
                        self.counter_ids.append(_elem1552)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_stats_ext_args')
        if self.port_oid is not None:
            oprot.writeFieldBegin('port_oid', TType.I64, 1)
            oprot.writeI64(self.port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1553 in self.counter_ids:
                oprot.writeI32(iter1553)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_stats_ext_args)
sai_thrift_get_port_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_port_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1557, _size1554) = iprot.readListBegin()
                    for _i1558 in range(_size1554):
                        _elem1559 = iprot.readI64()
                        self.success.append(_elem1559)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1560 in self.success:
                oprot.writeI64(iter1560)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_stats_ext_result)
sai_thrift_get_port_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_port_stats_args(object):
    """
    Attributes:
     - port_oid
     - counter_ids

    """


    def __init__(self, port_oid=None, counter_ids=None,):
        self.port_oid = port_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1564, _size1561) = iprot.readListBegin()
                    for _i1565 in range(_size1561):
                        _elem1566 = iprot.readI32()
                        self.counter_ids.append(_elem1566)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_stats_args')
        if self.port_oid is not None:
            oprot.writeFieldBegin('port_oid', TType.I64, 1)
            oprot.writeI64(self.port_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1567 in self.counter_ids:
                oprot.writeI32(iter1567)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_stats_args)
sai_thrift_clear_port_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_port_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_stats_result)
sai_thrift_clear_port_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_port_all_stats_args(object):
    """
    Attributes:
     - port_oid

    """


    def __init__(self, port_oid=None,):
        self.port_oid = port_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_all_stats_args')
        if self.port_oid is not None:
            oprot.writeFieldBegin('port_oid', TType.I64, 1)
            oprot.writeI64(self.port_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_all_stats_args)
sai_thrift_clear_port_all_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_oid', None, None, ),  # 1
)


class sai_thrift_clear_port_all_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_all_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_all_stats_result)
sai_thrift_clear_port_all_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_port_pool_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1571, _size1568) = iprot.readListBegin()
                    for _i1572 in range(_size1568):
                        _elem1573 = sai_thrift_attribute_t()
                        _elem1573.read(iprot)
                        self.attr_list.append(_elem1573)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_pool_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1574 in self.attr_list:
                iter1574.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_pool_args)
sai_thrift_create_port_pool_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_port_pool_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_pool_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_pool_result)
sai_thrift_create_port_pool_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_port_pool_args(object):
    """
    Attributes:
     - port_pool_oid

    """


    def __init__(self, port_pool_oid=None,):
        self.port_pool_oid = port_pool_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_pool_args')
        if self.port_pool_oid is not None:
            oprot.writeFieldBegin('port_pool_oid', TType.I64, 1)
            oprot.writeI64(self.port_pool_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_pool_args)
sai_thrift_remove_port_pool_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_pool_oid', None, None, ),  # 1
)


class sai_thrift_remove_port_pool_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_pool_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_pool_result)
sai_thrift_remove_port_pool_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_port_pool_attribute_args(object):
    """
    Attributes:
     - port_pool_oid
     - attr

    """


    def __init__(self, port_pool_oid=None, attr=None,):
        self.port_pool_oid = port_pool_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_pool_attribute_args')
        if self.port_pool_oid is not None:
            oprot.writeFieldBegin('port_pool_oid', TType.I64, 1)
            oprot.writeI64(self.port_pool_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_pool_attribute_args)
sai_thrift_set_port_pool_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_pool_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_port_pool_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_pool_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_pool_attribute_result)
sai_thrift_set_port_pool_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_port_pool_attribute_args(object):
    """
    Attributes:
     - port_pool_oid
     - attr_list

    """


    def __init__(self, port_pool_oid=None, attr_list=None,):
        self.port_pool_oid = port_pool_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_pool_attribute_args')
        if self.port_pool_oid is not None:
            oprot.writeFieldBegin('port_pool_oid', TType.I64, 1)
            oprot.writeI64(self.port_pool_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_pool_attribute_args)
sai_thrift_get_port_pool_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_pool_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_port_pool_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_pool_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_pool_attribute_result)
sai_thrift_get_port_pool_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_port_pool_stats_args(object):
    """
    Attributes:
     - port_pool_oid
     - counter_ids

    """


    def __init__(self, port_pool_oid=None, counter_ids=None,):
        self.port_pool_oid = port_pool_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1578, _size1575) = iprot.readListBegin()
                    for _i1579 in range(_size1575):
                        _elem1580 = iprot.readI32()
                        self.counter_ids.append(_elem1580)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_pool_stats_args')
        if self.port_pool_oid is not None:
            oprot.writeFieldBegin('port_pool_oid', TType.I64, 1)
            oprot.writeI64(self.port_pool_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1581 in self.counter_ids:
                oprot.writeI32(iter1581)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_pool_stats_args)
sai_thrift_get_port_pool_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_pool_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_port_pool_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1585, _size1582) = iprot.readListBegin()
                    for _i1586 in range(_size1582):
                        _elem1587 = iprot.readI64()
                        self.success.append(_elem1587)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_pool_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1588 in self.success:
                oprot.writeI64(iter1588)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_pool_stats_result)
sai_thrift_get_port_pool_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_port_pool_stats_ext_args(object):
    """
    Attributes:
     - port_pool_oid
     - counter_ids
     - mode

    """


    def __init__(self, port_pool_oid=None, counter_ids=None, mode=None,):
        self.port_pool_oid = port_pool_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1592, _size1589) = iprot.readListBegin()
                    for _i1593 in range(_size1589):
                        _elem1594 = iprot.readI32()
                        self.counter_ids.append(_elem1594)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_pool_stats_ext_args')
        if self.port_pool_oid is not None:
            oprot.writeFieldBegin('port_pool_oid', TType.I64, 1)
            oprot.writeI64(self.port_pool_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1595 in self.counter_ids:
                oprot.writeI32(iter1595)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_pool_stats_ext_args)
sai_thrift_get_port_pool_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_pool_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_port_pool_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1599, _size1596) = iprot.readListBegin()
                    for _i1600 in range(_size1596):
                        _elem1601 = iprot.readI64()
                        self.success.append(_elem1601)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_pool_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1602 in self.success:
                oprot.writeI64(iter1602)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_pool_stats_ext_result)
sai_thrift_get_port_pool_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_port_pool_stats_args(object):
    """
    Attributes:
     - port_pool_oid
     - counter_ids

    """


    def __init__(self, port_pool_oid=None, counter_ids=None,):
        self.port_pool_oid = port_pool_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_pool_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1606, _size1603) = iprot.readListBegin()
                    for _i1607 in range(_size1603):
                        _elem1608 = iprot.readI32()
                        self.counter_ids.append(_elem1608)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_pool_stats_args')
        if self.port_pool_oid is not None:
            oprot.writeFieldBegin('port_pool_oid', TType.I64, 1)
            oprot.writeI64(self.port_pool_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1609 in self.counter_ids:
                oprot.writeI32(iter1609)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_pool_stats_args)
sai_thrift_clear_port_pool_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_pool_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_port_pool_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_port_pool_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_port_pool_stats_result)
sai_thrift_clear_port_pool_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_port_serdes_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1613, _size1610) = iprot.readListBegin()
                    for _i1614 in range(_size1610):
                        _elem1615 = sai_thrift_attribute_t()
                        _elem1615.read(iprot)
                        self.attr_list.append(_elem1615)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_serdes_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1616 in self.attr_list:
                iter1616.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_serdes_args)
sai_thrift_create_port_serdes_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_port_serdes_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_serdes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_serdes_result)
sai_thrift_create_port_serdes_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_port_serdes_args(object):
    """
    Attributes:
     - port_serdes_oid

    """


    def __init__(self, port_serdes_oid=None,):
        self.port_serdes_oid = port_serdes_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_serdes_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_serdes_args')
        if self.port_serdes_oid is not None:
            oprot.writeFieldBegin('port_serdes_oid', TType.I64, 1)
            oprot.writeI64(self.port_serdes_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_serdes_args)
sai_thrift_remove_port_serdes_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_serdes_oid', None, None, ),  # 1
)


class sai_thrift_remove_port_serdes_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_serdes_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_serdes_result)
sai_thrift_remove_port_serdes_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_port_serdes_attribute_args(object):
    """
    Attributes:
     - port_serdes_oid
     - attr

    """


    def __init__(self, port_serdes_oid=None, attr=None,):
        self.port_serdes_oid = port_serdes_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_serdes_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_serdes_attribute_args')
        if self.port_serdes_oid is not None:
            oprot.writeFieldBegin('port_serdes_oid', TType.I64, 1)
            oprot.writeI64(self.port_serdes_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_serdes_attribute_args)
sai_thrift_set_port_serdes_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_serdes_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_port_serdes_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_serdes_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_serdes_attribute_result)
sai_thrift_set_port_serdes_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_port_serdes_attribute_args(object):
    """
    Attributes:
     - port_serdes_oid
     - attr_list

    """


    def __init__(self, port_serdes_oid=None, attr_list=None,):
        self.port_serdes_oid = port_serdes_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_serdes_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_serdes_attribute_args')
        if self.port_serdes_oid is not None:
            oprot.writeFieldBegin('port_serdes_oid', TType.I64, 1)
            oprot.writeI64(self.port_serdes_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_serdes_attribute_args)
sai_thrift_get_port_serdes_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_serdes_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_port_serdes_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_serdes_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_serdes_attribute_result)
sai_thrift_get_port_serdes_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_port_connector_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1620, _size1617) = iprot.readListBegin()
                    for _i1621 in range(_size1617):
                        _elem1622 = sai_thrift_attribute_t()
                        _elem1622.read(iprot)
                        self.attr_list.append(_elem1622)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_connector_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1623 in self.attr_list:
                iter1623.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_connector_args)
sai_thrift_create_port_connector_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_port_connector_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_port_connector_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_port_connector_result)
sai_thrift_create_port_connector_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_port_connector_args(object):
    """
    Attributes:
     - port_connector_oid

    """


    def __init__(self, port_connector_oid=None,):
        self.port_connector_oid = port_connector_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_connector_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_connector_args')
        if self.port_connector_oid is not None:
            oprot.writeFieldBegin('port_connector_oid', TType.I64, 1)
            oprot.writeI64(self.port_connector_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_connector_args)
sai_thrift_remove_port_connector_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_connector_oid', None, None, ),  # 1
)


class sai_thrift_remove_port_connector_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_port_connector_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_port_connector_result)
sai_thrift_remove_port_connector_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_port_connector_attribute_args(object):
    """
    Attributes:
     - port_connector_oid
     - attr

    """


    def __init__(self, port_connector_oid=None, attr=None,):
        self.port_connector_oid = port_connector_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_connector_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_connector_attribute_args')
        if self.port_connector_oid is not None:
            oprot.writeFieldBegin('port_connector_oid', TType.I64, 1)
            oprot.writeI64(self.port_connector_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_connector_attribute_args)
sai_thrift_set_port_connector_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_connector_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_port_connector_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_port_connector_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_port_connector_attribute_result)
sai_thrift_set_port_connector_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_port_connector_attribute_args(object):
    """
    Attributes:
     - port_connector_oid
     - attr_list

    """


    def __init__(self, port_connector_oid=None, attr_list=None,):
        self.port_connector_oid = port_connector_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.port_connector_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_connector_attribute_args')
        if self.port_connector_oid is not None:
            oprot.writeFieldBegin('port_connector_oid', TType.I64, 1)
            oprot.writeI64(self.port_connector_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_connector_attribute_args)
sai_thrift_get_port_connector_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'port_connector_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_port_connector_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_port_connector_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_port_connector_attribute_result)
sai_thrift_get_port_connector_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_qos_map_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1627, _size1624) = iprot.readListBegin()
                    for _i1628 in range(_size1624):
                        _elem1629 = sai_thrift_attribute_t()
                        _elem1629.read(iprot)
                        self.attr_list.append(_elem1629)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_qos_map_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1630 in self.attr_list:
                iter1630.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_qos_map_args)
sai_thrift_create_qos_map_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_qos_map_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_qos_map_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_qos_map_result)
sai_thrift_create_qos_map_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_qos_map_args(object):
    """
    Attributes:
     - qos_map_oid

    """


    def __init__(self, qos_map_oid=None,):
        self.qos_map_oid = qos_map_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.qos_map_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_qos_map_args')
        if self.qos_map_oid is not None:
            oprot.writeFieldBegin('qos_map_oid', TType.I64, 1)
            oprot.writeI64(self.qos_map_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_qos_map_args)
sai_thrift_remove_qos_map_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'qos_map_oid', None, None, ),  # 1
)


class sai_thrift_remove_qos_map_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_qos_map_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_qos_map_result)
sai_thrift_remove_qos_map_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_qos_map_attribute_args(object):
    """
    Attributes:
     - qos_map_oid
     - attr

    """


    def __init__(self, qos_map_oid=None, attr=None,):
        self.qos_map_oid = qos_map_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.qos_map_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_qos_map_attribute_args')
        if self.qos_map_oid is not None:
            oprot.writeFieldBegin('qos_map_oid', TType.I64, 1)
            oprot.writeI64(self.qos_map_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_qos_map_attribute_args)
sai_thrift_set_qos_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'qos_map_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_qos_map_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_qos_map_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_qos_map_attribute_result)
sai_thrift_set_qos_map_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_qos_map_attribute_args(object):
    """
    Attributes:
     - qos_map_oid
     - attr_list

    """


    def __init__(self, qos_map_oid=None, attr_list=None,):
        self.qos_map_oid = qos_map_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.qos_map_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_qos_map_attribute_args')
        if self.qos_map_oid is not None:
            oprot.writeFieldBegin('qos_map_oid', TType.I64, 1)
            oprot.writeI64(self.qos_map_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_qos_map_attribute_args)
sai_thrift_get_qos_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'qos_map_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_qos_map_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_qos_map_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_qos_map_attribute_result)
sai_thrift_get_qos_map_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_queue_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1634, _size1631) = iprot.readListBegin()
                    for _i1635 in range(_size1631):
                        _elem1636 = sai_thrift_attribute_t()
                        _elem1636.read(iprot)
                        self.attr_list.append(_elem1636)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_queue_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1637 in self.attr_list:
                iter1637.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_queue_args)
sai_thrift_create_queue_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_queue_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_queue_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_queue_result)
sai_thrift_create_queue_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_queue_args(object):
    """
    Attributes:
     - queue_oid

    """


    def __init__(self, queue_oid=None,):
        self.queue_oid = queue_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_queue_args')
        if self.queue_oid is not None:
            oprot.writeFieldBegin('queue_oid', TType.I64, 1)
            oprot.writeI64(self.queue_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_queue_args)
sai_thrift_remove_queue_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_oid', None, None, ),  # 1
)


class sai_thrift_remove_queue_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_queue_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_queue_result)
sai_thrift_remove_queue_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_queue_attribute_args(object):
    """
    Attributes:
     - queue_oid
     - attr

    """


    def __init__(self, queue_oid=None, attr=None,):
        self.queue_oid = queue_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_queue_attribute_args')
        if self.queue_oid is not None:
            oprot.writeFieldBegin('queue_oid', TType.I64, 1)
            oprot.writeI64(self.queue_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_queue_attribute_args)
sai_thrift_set_queue_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_queue_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_queue_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_queue_attribute_result)
sai_thrift_set_queue_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_queue_attribute_args(object):
    """
    Attributes:
     - queue_oid
     - attr_list

    """


    def __init__(self, queue_oid=None, attr_list=None,):
        self.queue_oid = queue_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_attribute_args')
        if self.queue_oid is not None:
            oprot.writeFieldBegin('queue_oid', TType.I64, 1)
            oprot.writeI64(self.queue_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_attribute_args)
sai_thrift_get_queue_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_queue_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_attribute_result)
sai_thrift_get_queue_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_queue_stats_args(object):
    """
    Attributes:
     - queue_oid
     - counter_ids

    """


    def __init__(self, queue_oid=None, counter_ids=None,):
        self.queue_oid = queue_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1641, _size1638) = iprot.readListBegin()
                    for _i1642 in range(_size1638):
                        _elem1643 = iprot.readI32()
                        self.counter_ids.append(_elem1643)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_stats_args')
        if self.queue_oid is not None:
            oprot.writeFieldBegin('queue_oid', TType.I64, 1)
            oprot.writeI64(self.queue_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1644 in self.counter_ids:
                oprot.writeI32(iter1644)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_stats_args)
sai_thrift_get_queue_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_queue_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1648, _size1645) = iprot.readListBegin()
                    for _i1649 in range(_size1645):
                        _elem1650 = iprot.readI64()
                        self.success.append(_elem1650)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1651 in self.success:
                oprot.writeI64(iter1651)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_stats_result)
sai_thrift_get_queue_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_queue_stats_ext_args(object):
    """
    Attributes:
     - queue_oid
     - counter_ids
     - mode

    """


    def __init__(self, queue_oid=None, counter_ids=None, mode=None,):
        self.queue_oid = queue_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1655, _size1652) = iprot.readListBegin()
                    for _i1656 in range(_size1652):
                        _elem1657 = iprot.readI32()
                        self.counter_ids.append(_elem1657)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_stats_ext_args')
        if self.queue_oid is not None:
            oprot.writeFieldBegin('queue_oid', TType.I64, 1)
            oprot.writeI64(self.queue_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1658 in self.counter_ids:
                oprot.writeI32(iter1658)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_stats_ext_args)
sai_thrift_get_queue_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_queue_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1662, _size1659) = iprot.readListBegin()
                    for _i1663 in range(_size1659):
                        _elem1664 = iprot.readI64()
                        self.success.append(_elem1664)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_queue_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1665 in self.success:
                oprot.writeI64(iter1665)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_queue_stats_ext_result)
sai_thrift_get_queue_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_queue_stats_args(object):
    """
    Attributes:
     - queue_oid
     - counter_ids

    """


    def __init__(self, queue_oid=None, counter_ids=None,):
        self.queue_oid = queue_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.queue_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1669, _size1666) = iprot.readListBegin()
                    for _i1670 in range(_size1666):
                        _elem1671 = iprot.readI32()
                        self.counter_ids.append(_elem1671)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_queue_stats_args')
        if self.queue_oid is not None:
            oprot.writeFieldBegin('queue_oid', TType.I64, 1)
            oprot.writeI64(self.queue_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1672 in self.counter_ids:
                oprot.writeI32(iter1672)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_queue_stats_args)
sai_thrift_clear_queue_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'queue_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_queue_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_queue_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_queue_stats_result)
sai_thrift_clear_queue_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_route_entry_args(object):
    """
    Attributes:
     - route_entry
     - attr_list

    """


    def __init__(self, route_entry=None, attr_list=None,):
        self.route_entry = route_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.route_entry = sai_thrift_route_entry_t()
                    self.route_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1676, _size1673) = iprot.readListBegin()
                    for _i1677 in range(_size1673):
                        _elem1678 = sai_thrift_attribute_t()
                        _elem1678.read(iprot)
                        self.attr_list.append(_elem1678)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_route_entry_args')
        if self.route_entry is not None:
            oprot.writeFieldBegin('route_entry', TType.STRUCT, 1)
            self.route_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1679 in self.attr_list:
                iter1679.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_route_entry_args)
sai_thrift_create_route_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'route_entry', [sai_thrift_route_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_route_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_route_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_route_entry_result)
sai_thrift_create_route_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_route_entry_args(object):
    """
    Attributes:
     - route_entry

    """


    def __init__(self, route_entry=None,):
        self.route_entry = route_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.route_entry = sai_thrift_route_entry_t()
                    self.route_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_route_entry_args')
        if self.route_entry is not None:
            oprot.writeFieldBegin('route_entry', TType.STRUCT, 1)
            self.route_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_route_entry_args)
sai_thrift_remove_route_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'route_entry', [sai_thrift_route_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_route_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_route_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_route_entry_result)
sai_thrift_remove_route_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_route_entry_attribute_args(object):
    """
    Attributes:
     - route_entry
     - attr

    """


    def __init__(self, route_entry=None, attr=None,):
        self.route_entry = route_entry
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.route_entry = sai_thrift_route_entry_t()
                    self.route_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_route_entry_attribute_args')
        if self.route_entry is not None:
            oprot.writeFieldBegin('route_entry', TType.STRUCT, 1)
            self.route_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_route_entry_attribute_args)
sai_thrift_set_route_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'route_entry', [sai_thrift_route_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_route_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_route_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_route_entry_attribute_result)
sai_thrift_set_route_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_route_entry_attribute_args(object):
    """
    Attributes:
     - route_entry
     - attr_list

    """


    def __init__(self, route_entry=None, attr_list=None,):
        self.route_entry = route_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.route_entry = sai_thrift_route_entry_t()
                    self.route_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_route_entry_attribute_args')
        if self.route_entry is not None:
            oprot.writeFieldBegin('route_entry', TType.STRUCT, 1)
            self.route_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_route_entry_attribute_args)
sai_thrift_get_route_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'route_entry', [sai_thrift_route_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_route_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_route_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_route_entry_attribute_result)
sai_thrift_get_route_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_create_route_entry_args(object):
    """
    Attributes:
     - route_entry
     - attr_count
     - attr_list
     - mode

    """


    def __init__(self, route_entry=None, attr_count=None, attr_list=None, mode=None,):
        self.route_entry = route_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.route_entry = []
                    (_etype1683, _size1680) = iprot.readListBegin()
                    for _i1684 in range(_size1680):
                        _elem1685 = sai_thrift_route_entry_t()
                        _elem1685.read(iprot)
                        self.route_entry.append(_elem1685)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1689, _size1686) = iprot.readListBegin()
                    for _i1690 in range(_size1686):
                        _elem1691 = iprot.readI32()
                        self.attr_count.append(_elem1691)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1695, _size1692) = iprot.readListBegin()
                    for _i1696 in range(_size1692):
                        _elem1697 = sai_thrift_attribute_t()
                        _elem1697.read(iprot)
                        self.attr_list.append(_elem1697)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_route_entry_args')
        if self.route_entry is not None:
            oprot.writeFieldBegin('route_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.route_entry))
            for iter1698 in self.route_entry:
                iter1698.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1699 in self.attr_count:
                oprot.writeI32(iter1699)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1700 in self.attr_list:
                iter1700.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_route_entry_args)
sai_thrift_bulk_create_route_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'route_entry', (TType.STRUCT, [sai_thrift_route_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
)


class sai_thrift_bulk_create_route_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1704, _size1701) = iprot.readListBegin()
                    for _i1705 in range(_size1701):
                        _elem1706 = iprot.readI32()
                        self.success.append(_elem1706)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_route_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1707 in self.success:
                oprot.writeI32(iter1707)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_route_entry_result)
sai_thrift_bulk_create_route_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_remove_route_entry_args(object):
    """
    Attributes:
     - route_entry
     - mode

    """


    def __init__(self, route_entry=None, mode=None,):
        self.route_entry = route_entry
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.route_entry = []
                    (_etype1711, _size1708) = iprot.readListBegin()
                    for _i1712 in range(_size1708):
                        _elem1713 = sai_thrift_route_entry_t()
                        _elem1713.read(iprot)
                        self.route_entry.append(_elem1713)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_route_entry_args')
        if self.route_entry is not None:
            oprot.writeFieldBegin('route_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.route_entry))
            for iter1714 in self.route_entry:
                iter1714.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 2)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_route_entry_args)
sai_thrift_bulk_remove_route_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'route_entry', (TType.STRUCT, [sai_thrift_route_entry_t, None], False), None, ),  # 1
    (2, TType.I32, 'mode', None, None, ),  # 2
)


class sai_thrift_bulk_remove_route_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1718, _size1715) = iprot.readListBegin()
                    for _i1719 in range(_size1715):
                        _elem1720 = iprot.readI32()
                        self.success.append(_elem1720)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_route_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1721 in self.success:
                oprot.writeI32(iter1721)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_route_entry_result)
sai_thrift_bulk_remove_route_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_set_route_entry_attribute_args(object):
    """
    Attributes:
     - route_entry
     - attr_list
     - mode

    """


    def __init__(self, route_entry=None, attr_list=None, mode=None,):
        self.route_entry = route_entry
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.route_entry = []
                    (_etype1725, _size1722) = iprot.readListBegin()
                    for _i1726 in range(_size1722):
                        _elem1727 = sai_thrift_route_entry_t()
                        _elem1727.read(iprot)
                        self.route_entry.append(_elem1727)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1731, _size1728) = iprot.readListBegin()
                    for _i1732 in range(_size1728):
                        _elem1733 = sai_thrift_attribute_t()
                        _elem1733.read(iprot)
                        self.attr_list.append(_elem1733)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_route_entry_attribute_args')
        if self.route_entry is not None:
            oprot.writeFieldBegin('route_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.route_entry))
            for iter1734 in self.route_entry:
                iter1734.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1735 in self.attr_list:
                iter1735.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_route_entry_attribute_args)
sai_thrift_bulk_set_route_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'route_entry', (TType.STRUCT, [sai_thrift_route_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_bulk_set_route_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1739, _size1736) = iprot.readListBegin()
                    for _i1740 in range(_size1736):
                        _elem1741 = iprot.readI32()
                        self.success.append(_elem1741)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_route_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1742 in self.success:
                oprot.writeI32(iter1742)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_route_entry_attribute_result)
sai_thrift_bulk_set_route_entry_attribute_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_get_route_entry_attribute_args(object):
    """
    Attributes:
     - route_entry
     - attr_count
     - attr_list
     - mode
     - object_statuses

    """


    def __init__(self, route_entry=None, attr_count=None, attr_list=None, mode=None, object_statuses=None,):
        self.route_entry = route_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode
        self.object_statuses = object_statuses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.route_entry = []
                    (_etype1746, _size1743) = iprot.readListBegin()
                    for _i1747 in range(_size1743):
                        _elem1748 = sai_thrift_route_entry_t()
                        _elem1748.read(iprot)
                        self.route_entry.append(_elem1748)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1752, _size1749) = iprot.readListBegin()
                    for _i1753 in range(_size1749):
                        _elem1754 = iprot.readI32()
                        self.attr_count.append(_elem1754)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.object_statuses = []
                    (_etype1758, _size1755) = iprot.readListBegin()
                    for _i1759 in range(_size1755):
                        _elem1760 = iprot.readI32()
                        self.object_statuses.append(_elem1760)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_route_entry_attribute_args')
        if self.route_entry is not None:
            oprot.writeFieldBegin('route_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.route_entry))
            for iter1761 in self.route_entry:
                iter1761.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1762 in self.attr_count:
                oprot.writeI32(iter1762)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 3)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.object_statuses is not None:
            oprot.writeFieldBegin('object_statuses', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.object_statuses))
            for iter1763 in self.object_statuses:
                oprot.writeI32(iter1763)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_route_entry_attribute_args)
sai_thrift_bulk_get_route_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'route_entry', (TType.STRUCT, [sai_thrift_route_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
    (5, TType.LIST, 'object_statuses', (TType.I32, None, False), None, ),  # 5
)


class sai_thrift_bulk_get_route_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_route_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_route_entry_attribute_result)
sai_thrift_bulk_get_route_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_router_interface_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1767, _size1764) = iprot.readListBegin()
                    for _i1768 in range(_size1764):
                        _elem1769 = sai_thrift_attribute_t()
                        _elem1769.read(iprot)
                        self.attr_list.append(_elem1769)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_router_interface_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1770 in self.attr_list:
                iter1770.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_router_interface_args)
sai_thrift_create_router_interface_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_router_interface_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_router_interface_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_router_interface_result)
sai_thrift_create_router_interface_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_router_interface_args(object):
    """
    Attributes:
     - router_interface_oid

    """


    def __init__(self, router_interface_oid=None,):
        self.router_interface_oid = router_interface_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.router_interface_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_router_interface_args')
        if self.router_interface_oid is not None:
            oprot.writeFieldBegin('router_interface_oid', TType.I64, 1)
            oprot.writeI64(self.router_interface_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_router_interface_args)
sai_thrift_remove_router_interface_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'router_interface_oid', None, None, ),  # 1
)


class sai_thrift_remove_router_interface_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_router_interface_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_router_interface_result)
sai_thrift_remove_router_interface_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_router_interface_attribute_args(object):
    """
    Attributes:
     - router_interface_oid
     - attr

    """


    def __init__(self, router_interface_oid=None, attr=None,):
        self.router_interface_oid = router_interface_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.router_interface_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_router_interface_attribute_args')
        if self.router_interface_oid is not None:
            oprot.writeFieldBegin('router_interface_oid', TType.I64, 1)
            oprot.writeI64(self.router_interface_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_router_interface_attribute_args)
sai_thrift_set_router_interface_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'router_interface_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_router_interface_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_router_interface_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_router_interface_attribute_result)
sai_thrift_set_router_interface_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_router_interface_attribute_args(object):
    """
    Attributes:
     - router_interface_oid
     - attr_list

    """


    def __init__(self, router_interface_oid=None, attr_list=None,):
        self.router_interface_oid = router_interface_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.router_interface_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_router_interface_attribute_args')
        if self.router_interface_oid is not None:
            oprot.writeFieldBegin('router_interface_oid', TType.I64, 1)
            oprot.writeI64(self.router_interface_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_router_interface_attribute_args)
sai_thrift_get_router_interface_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'router_interface_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_router_interface_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_router_interface_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_router_interface_attribute_result)
sai_thrift_get_router_interface_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_router_interface_stats_args(object):
    """
    Attributes:
     - router_interface_oid
     - counter_ids

    """


    def __init__(self, router_interface_oid=None, counter_ids=None,):
        self.router_interface_oid = router_interface_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.router_interface_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1774, _size1771) = iprot.readListBegin()
                    for _i1775 in range(_size1771):
                        _elem1776 = iprot.readI32()
                        self.counter_ids.append(_elem1776)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_router_interface_stats_args')
        if self.router_interface_oid is not None:
            oprot.writeFieldBegin('router_interface_oid', TType.I64, 1)
            oprot.writeI64(self.router_interface_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1777 in self.counter_ids:
                oprot.writeI32(iter1777)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_router_interface_stats_args)
sai_thrift_get_router_interface_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'router_interface_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_router_interface_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1781, _size1778) = iprot.readListBegin()
                    for _i1782 in range(_size1778):
                        _elem1783 = iprot.readI64()
                        self.success.append(_elem1783)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_router_interface_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1784 in self.success:
                oprot.writeI64(iter1784)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_router_interface_stats_result)
sai_thrift_get_router_interface_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_router_interface_stats_ext_args(object):
    """
    Attributes:
     - router_interface_oid
     - counter_ids
     - mode

    """


    def __init__(self, router_interface_oid=None, counter_ids=None, mode=None,):
        self.router_interface_oid = router_interface_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.router_interface_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1788, _size1785) = iprot.readListBegin()
                    for _i1789 in range(_size1785):
                        _elem1790 = iprot.readI32()
                        self.counter_ids.append(_elem1790)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_router_interface_stats_ext_args')
        if self.router_interface_oid is not None:
            oprot.writeFieldBegin('router_interface_oid', TType.I64, 1)
            oprot.writeI64(self.router_interface_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1791 in self.counter_ids:
                oprot.writeI32(iter1791)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_router_interface_stats_ext_args)
sai_thrift_get_router_interface_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'router_interface_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_router_interface_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1795, _size1792) = iprot.readListBegin()
                    for _i1796 in range(_size1792):
                        _elem1797 = iprot.readI64()
                        self.success.append(_elem1797)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_router_interface_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter1798 in self.success:
                oprot.writeI64(iter1798)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_router_interface_stats_ext_result)
sai_thrift_get_router_interface_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_router_interface_stats_args(object):
    """
    Attributes:
     - router_interface_oid
     - counter_ids

    """


    def __init__(self, router_interface_oid=None, counter_ids=None,):
        self.router_interface_oid = router_interface_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.router_interface_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype1802, _size1799) = iprot.readListBegin()
                    for _i1803 in range(_size1799):
                        _elem1804 = iprot.readI32()
                        self.counter_ids.append(_elem1804)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_router_interface_stats_args')
        if self.router_interface_oid is not None:
            oprot.writeFieldBegin('router_interface_oid', TType.I64, 1)
            oprot.writeI64(self.router_interface_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter1805 in self.counter_ids:
                oprot.writeI32(iter1805)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_router_interface_stats_args)
sai_thrift_clear_router_interface_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'router_interface_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_router_interface_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_router_interface_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_router_interface_stats_result)
sai_thrift_clear_router_interface_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_rpf_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1809, _size1806) = iprot.readListBegin()
                    for _i1810 in range(_size1806):
                        _elem1811 = sai_thrift_attribute_t()
                        _elem1811.read(iprot)
                        self.attr_list.append(_elem1811)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_rpf_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1812 in self.attr_list:
                iter1812.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_rpf_group_args)
sai_thrift_create_rpf_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_rpf_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_rpf_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_rpf_group_result)
sai_thrift_create_rpf_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_rpf_group_args(object):
    """
    Attributes:
     - rpf_group_oid

    """


    def __init__(self, rpf_group_oid=None,):
        self.rpf_group_oid = rpf_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rpf_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_rpf_group_args')
        if self.rpf_group_oid is not None:
            oprot.writeFieldBegin('rpf_group_oid', TType.I64, 1)
            oprot.writeI64(self.rpf_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_rpf_group_args)
sai_thrift_remove_rpf_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rpf_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_rpf_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_rpf_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_rpf_group_result)
sai_thrift_remove_rpf_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_rpf_group_attribute_args(object):
    """
    Attributes:
     - rpf_group_oid
     - attr

    """


    def __init__(self, rpf_group_oid=None, attr=None,):
        self.rpf_group_oid = rpf_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rpf_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_rpf_group_attribute_args')
        if self.rpf_group_oid is not None:
            oprot.writeFieldBegin('rpf_group_oid', TType.I64, 1)
            oprot.writeI64(self.rpf_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_rpf_group_attribute_args)
sai_thrift_set_rpf_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rpf_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_rpf_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_rpf_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_rpf_group_attribute_result)
sai_thrift_set_rpf_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_rpf_group_attribute_args(object):
    """
    Attributes:
     - rpf_group_oid
     - attr_list

    """


    def __init__(self, rpf_group_oid=None, attr_list=None,):
        self.rpf_group_oid = rpf_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rpf_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_rpf_group_attribute_args')
        if self.rpf_group_oid is not None:
            oprot.writeFieldBegin('rpf_group_oid', TType.I64, 1)
            oprot.writeI64(self.rpf_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_rpf_group_attribute_args)
sai_thrift_get_rpf_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rpf_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_rpf_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_rpf_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_rpf_group_attribute_result)
sai_thrift_get_rpf_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_rpf_group_member_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1816, _size1813) = iprot.readListBegin()
                    for _i1817 in range(_size1813):
                        _elem1818 = sai_thrift_attribute_t()
                        _elem1818.read(iprot)
                        self.attr_list.append(_elem1818)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_rpf_group_member_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1819 in self.attr_list:
                iter1819.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_rpf_group_member_args)
sai_thrift_create_rpf_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_rpf_group_member_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_rpf_group_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_rpf_group_member_result)
sai_thrift_create_rpf_group_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_rpf_group_member_args(object):
    """
    Attributes:
     - rpf_group_member_oid

    """


    def __init__(self, rpf_group_member_oid=None,):
        self.rpf_group_member_oid = rpf_group_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rpf_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_rpf_group_member_args')
        if self.rpf_group_member_oid is not None:
            oprot.writeFieldBegin('rpf_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.rpf_group_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_rpf_group_member_args)
sai_thrift_remove_rpf_group_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rpf_group_member_oid', None, None, ),  # 1
)


class sai_thrift_remove_rpf_group_member_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_rpf_group_member_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_rpf_group_member_result)
sai_thrift_remove_rpf_group_member_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_rpf_group_member_attribute_args(object):
    """
    Attributes:
     - rpf_group_member_oid
     - attr

    """


    def __init__(self, rpf_group_member_oid=None, attr=None,):
        self.rpf_group_member_oid = rpf_group_member_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rpf_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_rpf_group_member_attribute_args')
        if self.rpf_group_member_oid is not None:
            oprot.writeFieldBegin('rpf_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.rpf_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_rpf_group_member_attribute_args)
sai_thrift_set_rpf_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rpf_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_rpf_group_member_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_rpf_group_member_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_rpf_group_member_attribute_result)
sai_thrift_set_rpf_group_member_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_rpf_group_member_attribute_args(object):
    """
    Attributes:
     - rpf_group_member_oid
     - attr_list

    """


    def __init__(self, rpf_group_member_oid=None, attr_list=None,):
        self.rpf_group_member_oid = rpf_group_member_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.rpf_group_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_rpf_group_member_attribute_args')
        if self.rpf_group_member_oid is not None:
            oprot.writeFieldBegin('rpf_group_member_oid', TType.I64, 1)
            oprot.writeI64(self.rpf_group_member_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_rpf_group_member_attribute_args)
sai_thrift_get_rpf_group_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'rpf_group_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_rpf_group_member_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_rpf_group_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_rpf_group_member_attribute_result)
sai_thrift_get_rpf_group_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_samplepacket_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1823, _size1820) = iprot.readListBegin()
                    for _i1824 in range(_size1820):
                        _elem1825 = sai_thrift_attribute_t()
                        _elem1825.read(iprot)
                        self.attr_list.append(_elem1825)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_samplepacket_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1826 in self.attr_list:
                iter1826.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_samplepacket_args)
sai_thrift_create_samplepacket_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_samplepacket_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_samplepacket_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_samplepacket_result)
sai_thrift_create_samplepacket_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_samplepacket_args(object):
    """
    Attributes:
     - samplepacket_oid

    """


    def __init__(self, samplepacket_oid=None,):
        self.samplepacket_oid = samplepacket_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.samplepacket_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_samplepacket_args')
        if self.samplepacket_oid is not None:
            oprot.writeFieldBegin('samplepacket_oid', TType.I64, 1)
            oprot.writeI64(self.samplepacket_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_samplepacket_args)
sai_thrift_remove_samplepacket_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'samplepacket_oid', None, None, ),  # 1
)


class sai_thrift_remove_samplepacket_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_samplepacket_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_samplepacket_result)
sai_thrift_remove_samplepacket_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_samplepacket_attribute_args(object):
    """
    Attributes:
     - samplepacket_oid
     - attr

    """


    def __init__(self, samplepacket_oid=None, attr=None,):
        self.samplepacket_oid = samplepacket_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.samplepacket_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_samplepacket_attribute_args')
        if self.samplepacket_oid is not None:
            oprot.writeFieldBegin('samplepacket_oid', TType.I64, 1)
            oprot.writeI64(self.samplepacket_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_samplepacket_attribute_args)
sai_thrift_set_samplepacket_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'samplepacket_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_samplepacket_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_samplepacket_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_samplepacket_attribute_result)
sai_thrift_set_samplepacket_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_samplepacket_attribute_args(object):
    """
    Attributes:
     - samplepacket_oid
     - attr_list

    """


    def __init__(self, samplepacket_oid=None, attr_list=None,):
        self.samplepacket_oid = samplepacket_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.samplepacket_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_samplepacket_attribute_args')
        if self.samplepacket_oid is not None:
            oprot.writeFieldBegin('samplepacket_oid', TType.I64, 1)
            oprot.writeI64(self.samplepacket_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_samplepacket_attribute_args)
sai_thrift_get_samplepacket_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'samplepacket_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_samplepacket_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_samplepacket_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_samplepacket_attribute_result)
sai_thrift_get_samplepacket_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_scheduler_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1830, _size1827) = iprot.readListBegin()
                    for _i1831 in range(_size1827):
                        _elem1832 = sai_thrift_attribute_t()
                        _elem1832.read(iprot)
                        self.attr_list.append(_elem1832)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_scheduler_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1833 in self.attr_list:
                iter1833.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_scheduler_args)
sai_thrift_create_scheduler_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_scheduler_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_scheduler_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_scheduler_result)
sai_thrift_create_scheduler_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_scheduler_args(object):
    """
    Attributes:
     - scheduler_oid

    """


    def __init__(self, scheduler_oid=None,):
        self.scheduler_oid = scheduler_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_scheduler_args')
        if self.scheduler_oid is not None:
            oprot.writeFieldBegin('scheduler_oid', TType.I64, 1)
            oprot.writeI64(self.scheduler_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_scheduler_args)
sai_thrift_remove_scheduler_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_oid', None, None, ),  # 1
)


class sai_thrift_remove_scheduler_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_scheduler_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_scheduler_result)
sai_thrift_remove_scheduler_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_scheduler_attribute_args(object):
    """
    Attributes:
     - scheduler_oid
     - attr

    """


    def __init__(self, scheduler_oid=None, attr=None,):
        self.scheduler_oid = scheduler_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_scheduler_attribute_args')
        if self.scheduler_oid is not None:
            oprot.writeFieldBegin('scheduler_oid', TType.I64, 1)
            oprot.writeI64(self.scheduler_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_scheduler_attribute_args)
sai_thrift_set_scheduler_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_scheduler_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_scheduler_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_scheduler_attribute_result)
sai_thrift_set_scheduler_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_scheduler_attribute_args(object):
    """
    Attributes:
     - scheduler_oid
     - attr_list

    """


    def __init__(self, scheduler_oid=None, attr_list=None,):
        self.scheduler_oid = scheduler_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_scheduler_attribute_args')
        if self.scheduler_oid is not None:
            oprot.writeFieldBegin('scheduler_oid', TType.I64, 1)
            oprot.writeI64(self.scheduler_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_scheduler_attribute_args)
sai_thrift_get_scheduler_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_scheduler_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_scheduler_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_scheduler_attribute_result)
sai_thrift_get_scheduler_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_scheduler_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1837, _size1834) = iprot.readListBegin()
                    for _i1838 in range(_size1834):
                        _elem1839 = sai_thrift_attribute_t()
                        _elem1839.read(iprot)
                        self.attr_list.append(_elem1839)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_scheduler_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1840 in self.attr_list:
                iter1840.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_scheduler_group_args)
sai_thrift_create_scheduler_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_scheduler_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_scheduler_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_scheduler_group_result)
sai_thrift_create_scheduler_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_scheduler_group_args(object):
    """
    Attributes:
     - scheduler_group_oid

    """


    def __init__(self, scheduler_group_oid=None,):
        self.scheduler_group_oid = scheduler_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_scheduler_group_args')
        if self.scheduler_group_oid is not None:
            oprot.writeFieldBegin('scheduler_group_oid', TType.I64, 1)
            oprot.writeI64(self.scheduler_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_scheduler_group_args)
sai_thrift_remove_scheduler_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_scheduler_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_scheduler_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_scheduler_group_result)
sai_thrift_remove_scheduler_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_scheduler_group_attribute_args(object):
    """
    Attributes:
     - scheduler_group_oid
     - attr

    """


    def __init__(self, scheduler_group_oid=None, attr=None,):
        self.scheduler_group_oid = scheduler_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_scheduler_group_attribute_args')
        if self.scheduler_group_oid is not None:
            oprot.writeFieldBegin('scheduler_group_oid', TType.I64, 1)
            oprot.writeI64(self.scheduler_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_scheduler_group_attribute_args)
sai_thrift_set_scheduler_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_scheduler_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_scheduler_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_scheduler_group_attribute_result)
sai_thrift_set_scheduler_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_scheduler_group_attribute_args(object):
    """
    Attributes:
     - scheduler_group_oid
     - attr_list

    """


    def __init__(self, scheduler_group_oid=None, attr_list=None,):
        self.scheduler_group_oid = scheduler_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.scheduler_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_scheduler_group_attribute_args')
        if self.scheduler_group_oid is not None:
            oprot.writeFieldBegin('scheduler_group_oid', TType.I64, 1)
            oprot.writeI64(self.scheduler_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_scheduler_group_attribute_args)
sai_thrift_get_scheduler_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'scheduler_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_scheduler_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_scheduler_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_scheduler_group_attribute_result)
sai_thrift_get_scheduler_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_srv6_sidlist_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1844, _size1841) = iprot.readListBegin()
                    for _i1845 in range(_size1841):
                        _elem1846 = sai_thrift_attribute_t()
                        _elem1846.read(iprot)
                        self.attr_list.append(_elem1846)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_srv6_sidlist_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1847 in self.attr_list:
                iter1847.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_srv6_sidlist_args)
sai_thrift_create_srv6_sidlist_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_srv6_sidlist_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_srv6_sidlist_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_srv6_sidlist_result)
sai_thrift_create_srv6_sidlist_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_srv6_sidlist_args(object):
    """
    Attributes:
     - srv6_sidlist_oid

    """


    def __init__(self, srv6_sidlist_oid=None,):
        self.srv6_sidlist_oid = srv6_sidlist_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.srv6_sidlist_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_srv6_sidlist_args')
        if self.srv6_sidlist_oid is not None:
            oprot.writeFieldBegin('srv6_sidlist_oid', TType.I64, 1)
            oprot.writeI64(self.srv6_sidlist_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_srv6_sidlist_args)
sai_thrift_remove_srv6_sidlist_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'srv6_sidlist_oid', None, None, ),  # 1
)


class sai_thrift_remove_srv6_sidlist_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_srv6_sidlist_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_srv6_sidlist_result)
sai_thrift_remove_srv6_sidlist_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_srv6_sidlist_attribute_args(object):
    """
    Attributes:
     - srv6_sidlist_oid
     - attr

    """


    def __init__(self, srv6_sidlist_oid=None, attr=None,):
        self.srv6_sidlist_oid = srv6_sidlist_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.srv6_sidlist_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_srv6_sidlist_attribute_args')
        if self.srv6_sidlist_oid is not None:
            oprot.writeFieldBegin('srv6_sidlist_oid', TType.I64, 1)
            oprot.writeI64(self.srv6_sidlist_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_srv6_sidlist_attribute_args)
sai_thrift_set_srv6_sidlist_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'srv6_sidlist_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_srv6_sidlist_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_srv6_sidlist_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_srv6_sidlist_attribute_result)
sai_thrift_set_srv6_sidlist_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_srv6_sidlist_attribute_args(object):
    """
    Attributes:
     - srv6_sidlist_oid
     - attr_list

    """


    def __init__(self, srv6_sidlist_oid=None, attr_list=None,):
        self.srv6_sidlist_oid = srv6_sidlist_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.srv6_sidlist_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_srv6_sidlist_attribute_args')
        if self.srv6_sidlist_oid is not None:
            oprot.writeFieldBegin('srv6_sidlist_oid', TType.I64, 1)
            oprot.writeI64(self.srv6_sidlist_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_srv6_sidlist_attribute_args)
sai_thrift_get_srv6_sidlist_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'srv6_sidlist_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_srv6_sidlist_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_srv6_sidlist_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_srv6_sidlist_attribute_result)
sai_thrift_get_srv6_sidlist_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_my_sid_entry_args(object):
    """
    Attributes:
     - my_sid_entry
     - attr_list

    """


    def __init__(self, my_sid_entry=None, attr_list=None,):
        self.my_sid_entry = my_sid_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.my_sid_entry = sai_thrift_my_sid_entry_t()
                    self.my_sid_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1851, _size1848) = iprot.readListBegin()
                    for _i1852 in range(_size1848):
                        _elem1853 = sai_thrift_attribute_t()
                        _elem1853.read(iprot)
                        self.attr_list.append(_elem1853)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_my_sid_entry_args')
        if self.my_sid_entry is not None:
            oprot.writeFieldBegin('my_sid_entry', TType.STRUCT, 1)
            self.my_sid_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1854 in self.attr_list:
                iter1854.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_my_sid_entry_args)
sai_thrift_create_my_sid_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'my_sid_entry', [sai_thrift_my_sid_entry_t, None], None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
)


class sai_thrift_create_my_sid_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_my_sid_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_my_sid_entry_result)
sai_thrift_create_my_sid_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_my_sid_entry_args(object):
    """
    Attributes:
     - my_sid_entry

    """


    def __init__(self, my_sid_entry=None,):
        self.my_sid_entry = my_sid_entry

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.my_sid_entry = sai_thrift_my_sid_entry_t()
                    self.my_sid_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_my_sid_entry_args')
        if self.my_sid_entry is not None:
            oprot.writeFieldBegin('my_sid_entry', TType.STRUCT, 1)
            self.my_sid_entry.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_my_sid_entry_args)
sai_thrift_remove_my_sid_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'my_sid_entry', [sai_thrift_my_sid_entry_t, None], None, ),  # 1
)


class sai_thrift_remove_my_sid_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_my_sid_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_my_sid_entry_result)
sai_thrift_remove_my_sid_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_my_sid_entry_attribute_args(object):
    """
    Attributes:
     - my_sid_entry
     - attr

    """


    def __init__(self, my_sid_entry=None, attr=None,):
        self.my_sid_entry = my_sid_entry
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.my_sid_entry = sai_thrift_my_sid_entry_t()
                    self.my_sid_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_my_sid_entry_attribute_args')
        if self.my_sid_entry is not None:
            oprot.writeFieldBegin('my_sid_entry', TType.STRUCT, 1)
            self.my_sid_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_my_sid_entry_attribute_args)
sai_thrift_set_my_sid_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'my_sid_entry', [sai_thrift_my_sid_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_my_sid_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_my_sid_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_my_sid_entry_attribute_result)
sai_thrift_set_my_sid_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_my_sid_entry_attribute_args(object):
    """
    Attributes:
     - my_sid_entry
     - attr_list

    """


    def __init__(self, my_sid_entry=None, attr_list=None,):
        self.my_sid_entry = my_sid_entry
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.my_sid_entry = sai_thrift_my_sid_entry_t()
                    self.my_sid_entry.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_my_sid_entry_attribute_args')
        if self.my_sid_entry is not None:
            oprot.writeFieldBegin('my_sid_entry', TType.STRUCT, 1)
            self.my_sid_entry.write(oprot)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_my_sid_entry_attribute_args)
sai_thrift_get_my_sid_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'my_sid_entry', [sai_thrift_my_sid_entry_t, None], None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_my_sid_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_my_sid_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_my_sid_entry_attribute_result)
sai_thrift_get_my_sid_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_create_my_sid_entry_args(object):
    """
    Attributes:
     - my_sid_entry
     - attr_count
     - attr_list
     - mode

    """


    def __init__(self, my_sid_entry=None, attr_count=None, attr_list=None, mode=None,):
        self.my_sid_entry = my_sid_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.my_sid_entry = []
                    (_etype1858, _size1855) = iprot.readListBegin()
                    for _i1859 in range(_size1855):
                        _elem1860 = sai_thrift_my_sid_entry_t()
                        _elem1860.read(iprot)
                        self.my_sid_entry.append(_elem1860)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1864, _size1861) = iprot.readListBegin()
                    for _i1865 in range(_size1861):
                        _elem1866 = iprot.readI32()
                        self.attr_count.append(_elem1866)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1870, _size1867) = iprot.readListBegin()
                    for _i1871 in range(_size1867):
                        _elem1872 = sai_thrift_attribute_t()
                        _elem1872.read(iprot)
                        self.attr_list.append(_elem1872)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_my_sid_entry_args')
        if self.my_sid_entry is not None:
            oprot.writeFieldBegin('my_sid_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.my_sid_entry))
            for iter1873 in self.my_sid_entry:
                iter1873.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1874 in self.attr_count:
                oprot.writeI32(iter1874)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1875 in self.attr_list:
                iter1875.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_my_sid_entry_args)
sai_thrift_bulk_create_my_sid_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'my_sid_entry', (TType.STRUCT, [sai_thrift_my_sid_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
)


class sai_thrift_bulk_create_my_sid_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1879, _size1876) = iprot.readListBegin()
                    for _i1880 in range(_size1876):
                        _elem1881 = iprot.readI32()
                        self.success.append(_elem1881)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_create_my_sid_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1882 in self.success:
                oprot.writeI32(iter1882)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_create_my_sid_entry_result)
sai_thrift_bulk_create_my_sid_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_remove_my_sid_entry_args(object):
    """
    Attributes:
     - my_sid_entry
     - mode

    """


    def __init__(self, my_sid_entry=None, mode=None,):
        self.my_sid_entry = my_sid_entry
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.my_sid_entry = []
                    (_etype1886, _size1883) = iprot.readListBegin()
                    for _i1887 in range(_size1883):
                        _elem1888 = sai_thrift_my_sid_entry_t()
                        _elem1888.read(iprot)
                        self.my_sid_entry.append(_elem1888)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_my_sid_entry_args')
        if self.my_sid_entry is not None:
            oprot.writeFieldBegin('my_sid_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.my_sid_entry))
            for iter1889 in self.my_sid_entry:
                iter1889.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 2)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_my_sid_entry_args)
sai_thrift_bulk_remove_my_sid_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'my_sid_entry', (TType.STRUCT, [sai_thrift_my_sid_entry_t, None], False), None, ),  # 1
    (2, TType.I32, 'mode', None, None, ),  # 2
)


class sai_thrift_bulk_remove_my_sid_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1893, _size1890) = iprot.readListBegin()
                    for _i1894 in range(_size1890):
                        _elem1895 = iprot.readI32()
                        self.success.append(_elem1895)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_remove_my_sid_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1896 in self.success:
                oprot.writeI32(iter1896)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_remove_my_sid_entry_result)
sai_thrift_bulk_remove_my_sid_entry_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_set_my_sid_entry_attribute_args(object):
    """
    Attributes:
     - my_sid_entry
     - attr_list
     - mode

    """


    def __init__(self, my_sid_entry=None, attr_list=None, mode=None,):
        self.my_sid_entry = my_sid_entry
        self.attr_list = attr_list
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.my_sid_entry = []
                    (_etype1900, _size1897) = iprot.readListBegin()
                    for _i1901 in range(_size1897):
                        _elem1902 = sai_thrift_my_sid_entry_t()
                        _elem1902.read(iprot)
                        self.my_sid_entry.append(_elem1902)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1906, _size1903) = iprot.readListBegin()
                    for _i1907 in range(_size1903):
                        _elem1908 = sai_thrift_attribute_t()
                        _elem1908.read(iprot)
                        self.attr_list.append(_elem1908)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_my_sid_entry_attribute_args')
        if self.my_sid_entry is not None:
            oprot.writeFieldBegin('my_sid_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.my_sid_entry))
            for iter1909 in self.my_sid_entry:
                iter1909.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1910 in self.attr_list:
                iter1910.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_my_sid_entry_attribute_args)
sai_thrift_bulk_set_my_sid_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'my_sid_entry', (TType.STRUCT, [sai_thrift_my_sid_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_bulk_set_my_sid_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1914, _size1911) = iprot.readListBegin()
                    for _i1915 in range(_size1911):
                        _elem1916 = iprot.readI32()
                        self.success.append(_elem1916)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_set_my_sid_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1917 in self.success:
                oprot.writeI32(iter1917)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_set_my_sid_entry_attribute_result)
sai_thrift_bulk_set_my_sid_entry_attribute_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_bulk_get_my_sid_entry_attribute_args(object):
    """
    Attributes:
     - my_sid_entry
     - attr_count
     - attr_list
     - mode
     - object_statuses

    """


    def __init__(self, my_sid_entry=None, attr_count=None, attr_list=None, mode=None, object_statuses=None,):
        self.my_sid_entry = my_sid_entry
        self.attr_count = attr_count
        self.attr_list = attr_list
        self.mode = mode
        self.object_statuses = object_statuses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.my_sid_entry = []
                    (_etype1921, _size1918) = iprot.readListBegin()
                    for _i1922 in range(_size1918):
                        _elem1923 = sai_thrift_my_sid_entry_t()
                        _elem1923.read(iprot)
                        self.my_sid_entry.append(_elem1923)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.attr_count = []
                    (_etype1927, _size1924) = iprot.readListBegin()
                    for _i1928 in range(_size1924):
                        _elem1929 = iprot.readI32()
                        self.attr_count.append(_elem1929)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.object_statuses = []
                    (_etype1933, _size1930) = iprot.readListBegin()
                    for _i1934 in range(_size1930):
                        _elem1935 = iprot.readI32()
                        self.object_statuses.append(_elem1935)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_my_sid_entry_attribute_args')
        if self.my_sid_entry is not None:
            oprot.writeFieldBegin('my_sid_entry', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.my_sid_entry))
            for iter1936 in self.my_sid_entry:
                iter1936.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_count is not None:
            oprot.writeFieldBegin('attr_count', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.attr_count))
            for iter1937 in self.attr_count:
                oprot.writeI32(iter1937)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 3)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 4)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.object_statuses is not None:
            oprot.writeFieldBegin('object_statuses', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.object_statuses))
            for iter1938 in self.object_statuses:
                oprot.writeI32(iter1938)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_my_sid_entry_attribute_args)
sai_thrift_bulk_get_my_sid_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'my_sid_entry', (TType.STRUCT, [sai_thrift_my_sid_entry_t, None], False), None, ),  # 1
    (2, TType.LIST, 'attr_count', (TType.I32, None, False), None, ),  # 2
    (3, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 3
    (4, TType.I32, 'mode', None, None, ),  # 4
    (5, TType.LIST, 'object_statuses', (TType.I32, None, False), None, ),  # 5
)


class sai_thrift_bulk_get_my_sid_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_bulk_get_my_sid_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_bulk_get_my_sid_entry_attribute_result)
sai_thrift_bulk_get_my_sid_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_stp_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1942, _size1939) = iprot.readListBegin()
                    for _i1943 in range(_size1939):
                        _elem1944 = sai_thrift_attribute_t()
                        _elem1944.read(iprot)
                        self.attr_list.append(_elem1944)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1945 in self.attr_list:
                iter1945.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_args)
sai_thrift_create_stp_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_stp_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_result)
sai_thrift_create_stp_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_stp_args(object):
    """
    Attributes:
     - stp_oid

    """


    def __init__(self, stp_oid=None,):
        self.stp_oid = stp_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_args')
        if self.stp_oid is not None:
            oprot.writeFieldBegin('stp_oid', TType.I64, 1)
            oprot.writeI64(self.stp_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_args)
sai_thrift_remove_stp_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_oid', None, None, ),  # 1
)


class sai_thrift_remove_stp_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_result)
sai_thrift_remove_stp_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_stp_attribute_args(object):
    """
    Attributes:
     - stp_oid
     - attr

    """


    def __init__(self, stp_oid=None, attr=None,):
        self.stp_oid = stp_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_stp_attribute_args')
        if self.stp_oid is not None:
            oprot.writeFieldBegin('stp_oid', TType.I64, 1)
            oprot.writeI64(self.stp_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_stp_attribute_args)
sai_thrift_set_stp_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_stp_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_stp_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_stp_attribute_result)
sai_thrift_set_stp_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_stp_attribute_args(object):
    """
    Attributes:
     - stp_oid
     - attr_list

    """


    def __init__(self, stp_oid=None, attr_list=None,):
        self.stp_oid = stp_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_attribute_args')
        if self.stp_oid is not None:
            oprot.writeFieldBegin('stp_oid', TType.I64, 1)
            oprot.writeI64(self.stp_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_attribute_args)
sai_thrift_get_stp_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_stp_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_attribute_result)
sai_thrift_get_stp_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_stp_port_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1949, _size1946) = iprot.readListBegin()
                    for _i1950 in range(_size1946):
                        _elem1951 = sai_thrift_attribute_t()
                        _elem1951.read(iprot)
                        self.attr_list.append(_elem1951)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_port_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter1952 in self.attr_list:
                iter1952.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_port_args)
sai_thrift_create_stp_port_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_stp_port_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_stp_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_stp_port_result)
sai_thrift_create_stp_port_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_stp_port_args(object):
    """
    Attributes:
     - stp_port_oid

    """


    def __init__(self, stp_port_oid=None,):
        self.stp_port_oid = stp_port_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_port_args')
        if self.stp_port_oid is not None:
            oprot.writeFieldBegin('stp_port_oid', TType.I64, 1)
            oprot.writeI64(self.stp_port_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_port_args)
sai_thrift_remove_stp_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_port_oid', None, None, ),  # 1
)


class sai_thrift_remove_stp_port_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_stp_port_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_stp_port_result)
sai_thrift_remove_stp_port_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_stp_port_attribute_args(object):
    """
    Attributes:
     - stp_port_oid
     - attr

    """


    def __init__(self, stp_port_oid=None, attr=None,):
        self.stp_port_oid = stp_port_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_stp_port_attribute_args')
        if self.stp_port_oid is not None:
            oprot.writeFieldBegin('stp_port_oid', TType.I64, 1)
            oprot.writeI64(self.stp_port_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_stp_port_attribute_args)
sai_thrift_set_stp_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_stp_port_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_stp_port_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_stp_port_attribute_result)
sai_thrift_set_stp_port_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_stp_port_attribute_args(object):
    """
    Attributes:
     - stp_port_oid
     - attr_list

    """


    def __init__(self, stp_port_oid=None, attr_list=None,):
        self.stp_port_oid = stp_port_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stp_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_port_attribute_args')
        if self.stp_port_oid is not None:
            oprot.writeFieldBegin('stp_port_oid', TType.I64, 1)
            oprot.writeI64(self.stp_port_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_port_attribute_args)
sai_thrift_get_stp_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stp_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_stp_port_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_stp_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_stp_port_attribute_result)
sai_thrift_get_stp_port_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_switch_register_read_args(object):
    """
    Attributes:
     - platform_context
     - device_addr
     - start_reg_addr

    """


    def __init__(self, platform_context=None, device_addr=None, start_reg_addr=None,):
        self.platform_context = platform_context
        self.device_addr = device_addr
        self.start_reg_addr = start_reg_addr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.platform_context = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.device_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.start_reg_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_register_read_args')
        if self.platform_context is not None:
            oprot.writeFieldBegin('platform_context', TType.I64, 1)
            oprot.writeI64(self.platform_context)
            oprot.writeFieldEnd()
        if self.device_addr is not None:
            oprot.writeFieldBegin('device_addr', TType.I32, 2)
            oprot.writeI32(self.device_addr)
            oprot.writeFieldEnd()
        if self.start_reg_addr is not None:
            oprot.writeFieldBegin('start_reg_addr', TType.I32, 3)
            oprot.writeI32(self.start_reg_addr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_register_read_args)
sai_thrift_switch_register_read_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'platform_context', None, None, ),  # 1
    (2, TType.I32, 'device_addr', None, None, ),  # 2
    (3, TType.I32, 'start_reg_addr', None, None, ),  # 3
)


class sai_thrift_switch_register_read_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1956, _size1953) = iprot.readListBegin()
                    for _i1957 in range(_size1953):
                        _elem1958 = iprot.readI32()
                        self.success.append(_elem1958)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_register_read_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1959 in self.success:
                oprot.writeI32(iter1959)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_register_read_result)
sai_thrift_switch_register_read_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_switch_register_write_args(object):
    """
    Attributes:
     - platform_context
     - device_addr
     - start_reg_addr
     - reg_val

    """


    def __init__(self, platform_context=None, device_addr=None, start_reg_addr=None, reg_val=None,):
        self.platform_context = platform_context
        self.device_addr = device_addr
        self.start_reg_addr = start_reg_addr
        self.reg_val = reg_val

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.platform_context = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.device_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.start_reg_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.reg_val = []
                    (_etype1963, _size1960) = iprot.readListBegin()
                    for _i1964 in range(_size1960):
                        _elem1965 = iprot.readI32()
                        self.reg_val.append(_elem1965)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_register_write_args')
        if self.platform_context is not None:
            oprot.writeFieldBegin('platform_context', TType.I64, 1)
            oprot.writeI64(self.platform_context)
            oprot.writeFieldEnd()
        if self.device_addr is not None:
            oprot.writeFieldBegin('device_addr', TType.I32, 2)
            oprot.writeI32(self.device_addr)
            oprot.writeFieldEnd()
        if self.start_reg_addr is not None:
            oprot.writeFieldBegin('start_reg_addr', TType.I32, 3)
            oprot.writeI32(self.start_reg_addr)
            oprot.writeFieldEnd()
        if self.reg_val is not None:
            oprot.writeFieldBegin('reg_val', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.reg_val))
            for iter1966 in self.reg_val:
                oprot.writeI32(iter1966)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_register_write_args)
sai_thrift_switch_register_write_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'platform_context', None, None, ),  # 1
    (2, TType.I32, 'device_addr', None, None, ),  # 2
    (3, TType.I32, 'start_reg_addr', None, None, ),  # 3
    (4, TType.LIST, 'reg_val', (TType.I32, None, False), None, ),  # 4
)


class sai_thrift_switch_register_write_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_register_write_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_register_write_result)
sai_thrift_switch_register_write_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_switch_mdio_read_args(object):
    """
    Attributes:
     - device_addr
     - start_reg_addr

    """


    def __init__(self, device_addr=None, start_reg_addr=None,):
        self.device_addr = device_addr
        self.start_reg_addr = start_reg_addr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.device_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.start_reg_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_mdio_read_args')
        if self.device_addr is not None:
            oprot.writeFieldBegin('device_addr', TType.I32, 1)
            oprot.writeI32(self.device_addr)
            oprot.writeFieldEnd()
        if self.start_reg_addr is not None:
            oprot.writeFieldBegin('start_reg_addr', TType.I32, 2)
            oprot.writeI32(self.start_reg_addr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_mdio_read_args)
sai_thrift_switch_mdio_read_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'device_addr', None, None, ),  # 1
    (2, TType.I32, 'start_reg_addr', None, None, ),  # 2
)


class sai_thrift_switch_mdio_read_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1970, _size1967) = iprot.readListBegin()
                    for _i1971 in range(_size1967):
                        _elem1972 = iprot.readI32()
                        self.success.append(_elem1972)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_mdio_read_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1973 in self.success:
                oprot.writeI32(iter1973)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_mdio_read_result)
sai_thrift_switch_mdio_read_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_switch_mdio_write_args(object):
    """
    Attributes:
     - device_addr
     - start_reg_addr
     - reg_val

    """


    def __init__(self, device_addr=None, start_reg_addr=None, reg_val=None,):
        self.device_addr = device_addr
        self.start_reg_addr = start_reg_addr
        self.reg_val = reg_val

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.device_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.start_reg_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.reg_val = []
                    (_etype1977, _size1974) = iprot.readListBegin()
                    for _i1978 in range(_size1974):
                        _elem1979 = iprot.readI32()
                        self.reg_val.append(_elem1979)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_mdio_write_args')
        if self.device_addr is not None:
            oprot.writeFieldBegin('device_addr', TType.I32, 1)
            oprot.writeI32(self.device_addr)
            oprot.writeFieldEnd()
        if self.start_reg_addr is not None:
            oprot.writeFieldBegin('start_reg_addr', TType.I32, 2)
            oprot.writeI32(self.start_reg_addr)
            oprot.writeFieldEnd()
        if self.reg_val is not None:
            oprot.writeFieldBegin('reg_val', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.reg_val))
            for iter1980 in self.reg_val:
                oprot.writeI32(iter1980)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_mdio_write_args)
sai_thrift_switch_mdio_write_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'device_addr', None, None, ),  # 1
    (2, TType.I32, 'start_reg_addr', None, None, ),  # 2
    (3, TType.LIST, 'reg_val', (TType.I32, None, False), None, ),  # 3
)


class sai_thrift_switch_mdio_write_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_mdio_write_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_mdio_write_result)
sai_thrift_switch_mdio_write_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_switch_mdio_cl22_read_args(object):
    """
    Attributes:
     - device_addr
     - start_reg_addr

    """


    def __init__(self, device_addr=None, start_reg_addr=None,):
        self.device_addr = device_addr
        self.start_reg_addr = start_reg_addr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.device_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.start_reg_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_mdio_cl22_read_args')
        if self.device_addr is not None:
            oprot.writeFieldBegin('device_addr', TType.I32, 1)
            oprot.writeI32(self.device_addr)
            oprot.writeFieldEnd()
        if self.start_reg_addr is not None:
            oprot.writeFieldBegin('start_reg_addr', TType.I32, 2)
            oprot.writeI32(self.start_reg_addr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_mdio_cl22_read_args)
sai_thrift_switch_mdio_cl22_read_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'device_addr', None, None, ),  # 1
    (2, TType.I32, 'start_reg_addr', None, None, ),  # 2
)


class sai_thrift_switch_mdio_cl22_read_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype1984, _size1981) = iprot.readListBegin()
                    for _i1985 in range(_size1981):
                        _elem1986 = iprot.readI32()
                        self.success.append(_elem1986)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_mdio_cl22_read_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter1987 in self.success:
                oprot.writeI32(iter1987)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_mdio_cl22_read_result)
sai_thrift_switch_mdio_cl22_read_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_switch_mdio_cl22_write_args(object):
    """
    Attributes:
     - device_addr
     - start_reg_addr
     - reg_val

    """


    def __init__(self, device_addr=None, start_reg_addr=None, reg_val=None,):
        self.device_addr = device_addr
        self.start_reg_addr = start_reg_addr
        self.reg_val = reg_val

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.device_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.start_reg_addr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.reg_val = []
                    (_etype1991, _size1988) = iprot.readListBegin()
                    for _i1992 in range(_size1988):
                        _elem1993 = iprot.readI32()
                        self.reg_val.append(_elem1993)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_mdio_cl22_write_args')
        if self.device_addr is not None:
            oprot.writeFieldBegin('device_addr', TType.I32, 1)
            oprot.writeI32(self.device_addr)
            oprot.writeFieldEnd()
        if self.start_reg_addr is not None:
            oprot.writeFieldBegin('start_reg_addr', TType.I32, 2)
            oprot.writeI32(self.start_reg_addr)
            oprot.writeFieldEnd()
        if self.reg_val is not None:
            oprot.writeFieldBegin('reg_val', TType.LIST, 3)
            oprot.writeListBegin(TType.I32, len(self.reg_val))
            for iter1994 in self.reg_val:
                oprot.writeI32(iter1994)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_mdio_cl22_write_args)
sai_thrift_switch_mdio_cl22_write_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'device_addr', None, None, ),  # 1
    (2, TType.I32, 'start_reg_addr', None, None, ),  # 2
    (3, TType.LIST, 'reg_val', (TType.I32, None, False), None, ),  # 3
)


class sai_thrift_switch_mdio_cl22_write_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_mdio_cl22_write_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_mdio_cl22_write_result)
sai_thrift_switch_mdio_cl22_write_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_switch_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype1998, _size1995) = iprot.readListBegin()
                    for _i1999 in range(_size1995):
                        _elem2000 = sai_thrift_attribute_t()
                        _elem2000.read(iprot)
                        self.attr_list.append(_elem2000)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_switch_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2001 in self.attr_list:
                iter2001.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_switch_args)
sai_thrift_create_switch_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_switch_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_switch_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_switch_result)
sai_thrift_create_switch_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_switch_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_switch_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_switch_args)
sai_thrift_remove_switch_args.thrift_spec = (
)


class sai_thrift_remove_switch_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_switch_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_switch_result)
sai_thrift_remove_switch_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_switch_attribute_args(object):
    """
    Attributes:
     - attr

    """


    def __init__(self, attr=None,):
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_switch_attribute_args')
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 1)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_switch_attribute_args)
sai_thrift_set_switch_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 1
)


class sai_thrift_set_switch_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_switch_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_switch_attribute_result)
sai_thrift_set_switch_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_switch_attribute_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_attribute_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 1)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_attribute_args)
sai_thrift_get_switch_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 1
)


class sai_thrift_get_switch_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_attribute_result)
sai_thrift_get_switch_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_switch_stats_args(object):
    """
    Attributes:
     - counter_ids

    """


    def __init__(self, counter_ids=None,):
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype2005, _size2002) = iprot.readListBegin()
                    for _i2006 in range(_size2002):
                        _elem2007 = iprot.readI32()
                        self.counter_ids.append(_elem2007)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_stats_args')
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter2008 in self.counter_ids:
                oprot.writeI32(iter2008)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_stats_args)
sai_thrift_get_switch_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 1
)


class sai_thrift_get_switch_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype2012, _size2009) = iprot.readListBegin()
                    for _i2013 in range(_size2009):
                        _elem2014 = iprot.readI64()
                        self.success.append(_elem2014)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter2015 in self.success:
                oprot.writeI64(iter2015)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_stats_result)
sai_thrift_get_switch_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_switch_stats_ext_args(object):
    """
    Attributes:
     - counter_ids
     - mode

    """


    def __init__(self, counter_ids=None, mode=None,):
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype2019, _size2016) = iprot.readListBegin()
                    for _i2020 in range(_size2016):
                        _elem2021 = iprot.readI32()
                        self.counter_ids.append(_elem2021)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_stats_ext_args')
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter2022 in self.counter_ids:
                oprot.writeI32(iter2022)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 2)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_stats_ext_args)
sai_thrift_get_switch_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 1
    (2, TType.I32, 'mode', None, None, ),  # 2
)


class sai_thrift_get_switch_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype2026, _size2023) = iprot.readListBegin()
                    for _i2027 in range(_size2023):
                        _elem2028 = iprot.readI64()
                        self.success.append(_elem2028)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter2029 in self.success:
                oprot.writeI64(iter2029)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_stats_ext_result)
sai_thrift_get_switch_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_switch_stats_args(object):
    """
    Attributes:
     - counter_ids

    """


    def __init__(self, counter_ids=None,):
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype2033, _size2030) = iprot.readListBegin()
                    for _i2034 in range(_size2030):
                        _elem2035 = iprot.readI32()
                        self.counter_ids.append(_elem2035)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_switch_stats_args')
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter2036 in self.counter_ids:
                oprot.writeI32(iter2036)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_switch_stats_args)
sai_thrift_clear_switch_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 1
)


class sai_thrift_clear_switch_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_switch_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_switch_stats_result)
sai_thrift_clear_switch_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_switch_tunnel_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2040, _size2037) = iprot.readListBegin()
                    for _i2041 in range(_size2037):
                        _elem2042 = sai_thrift_attribute_t()
                        _elem2042.read(iprot)
                        self.attr_list.append(_elem2042)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_switch_tunnel_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2043 in self.attr_list:
                iter2043.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_switch_tunnel_args)
sai_thrift_create_switch_tunnel_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_switch_tunnel_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_switch_tunnel_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_switch_tunnel_result)
sai_thrift_create_switch_tunnel_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_switch_tunnel_args(object):
    """
    Attributes:
     - switch_tunnel_oid

    """


    def __init__(self, switch_tunnel_oid=None,):
        self.switch_tunnel_oid = switch_tunnel_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_tunnel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_switch_tunnel_args')
        if self.switch_tunnel_oid is not None:
            oprot.writeFieldBegin('switch_tunnel_oid', TType.I64, 1)
            oprot.writeI64(self.switch_tunnel_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_switch_tunnel_args)
sai_thrift_remove_switch_tunnel_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_tunnel_oid', None, None, ),  # 1
)


class sai_thrift_remove_switch_tunnel_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_switch_tunnel_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_switch_tunnel_result)
sai_thrift_remove_switch_tunnel_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_switch_tunnel_attribute_args(object):
    """
    Attributes:
     - switch_tunnel_oid
     - attr

    """


    def __init__(self, switch_tunnel_oid=None, attr=None,):
        self.switch_tunnel_oid = switch_tunnel_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_tunnel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_switch_tunnel_attribute_args')
        if self.switch_tunnel_oid is not None:
            oprot.writeFieldBegin('switch_tunnel_oid', TType.I64, 1)
            oprot.writeI64(self.switch_tunnel_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_switch_tunnel_attribute_args)
sai_thrift_set_switch_tunnel_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_tunnel_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_switch_tunnel_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_switch_tunnel_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_switch_tunnel_attribute_result)
sai_thrift_set_switch_tunnel_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_switch_tunnel_attribute_args(object):
    """
    Attributes:
     - switch_tunnel_oid
     - attr_list

    """


    def __init__(self, switch_tunnel_oid=None, attr_list=None,):
        self.switch_tunnel_oid = switch_tunnel_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.switch_tunnel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_tunnel_attribute_args')
        if self.switch_tunnel_oid is not None:
            oprot.writeFieldBegin('switch_tunnel_oid', TType.I64, 1)
            oprot.writeI64(self.switch_tunnel_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_tunnel_attribute_args)
sai_thrift_get_switch_tunnel_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'switch_tunnel_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_switch_tunnel_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_switch_tunnel_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_switch_tunnel_attribute_result)
sai_thrift_get_switch_tunnel_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_system_port_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2047, _size2044) = iprot.readListBegin()
                    for _i2048 in range(_size2044):
                        _elem2049 = sai_thrift_attribute_t()
                        _elem2049.read(iprot)
                        self.attr_list.append(_elem2049)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_system_port_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2050 in self.attr_list:
                iter2050.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_system_port_args)
sai_thrift_create_system_port_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_system_port_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_system_port_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_system_port_result)
sai_thrift_create_system_port_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_system_port_args(object):
    """
    Attributes:
     - system_port_oid

    """


    def __init__(self, system_port_oid=None,):
        self.system_port_oid = system_port_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.system_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_system_port_args')
        if self.system_port_oid is not None:
            oprot.writeFieldBegin('system_port_oid', TType.I64, 1)
            oprot.writeI64(self.system_port_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_system_port_args)
sai_thrift_remove_system_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'system_port_oid', None, None, ),  # 1
)


class sai_thrift_remove_system_port_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_system_port_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_system_port_result)
sai_thrift_remove_system_port_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_system_port_attribute_args(object):
    """
    Attributes:
     - system_port_oid
     - attr

    """


    def __init__(self, system_port_oid=None, attr=None,):
        self.system_port_oid = system_port_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.system_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_system_port_attribute_args')
        if self.system_port_oid is not None:
            oprot.writeFieldBegin('system_port_oid', TType.I64, 1)
            oprot.writeI64(self.system_port_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_system_port_attribute_args)
sai_thrift_set_system_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'system_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_system_port_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_system_port_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_system_port_attribute_result)
sai_thrift_set_system_port_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_system_port_attribute_args(object):
    """
    Attributes:
     - system_port_oid
     - attr_list

    """


    def __init__(self, system_port_oid=None, attr_list=None,):
        self.system_port_oid = system_port_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.system_port_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_system_port_attribute_args')
        if self.system_port_oid is not None:
            oprot.writeFieldBegin('system_port_oid', TType.I64, 1)
            oprot.writeI64(self.system_port_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_system_port_attribute_args)
sai_thrift_get_system_port_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'system_port_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_system_port_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_system_port_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_system_port_attribute_result)
sai_thrift_get_system_port_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2054, _size2051) = iprot.readListBegin()
                    for _i2055 in range(_size2051):
                        _elem2056 = sai_thrift_attribute_t()
                        _elem2056.read(iprot)
                        self.attr_list.append(_elem2056)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2057 in self.attr_list:
                iter2057.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_args)
sai_thrift_create_tam_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_result)
sai_thrift_create_tam_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_args(object):
    """
    Attributes:
     - tam_oid

    """


    def __init__(self, tam_oid=None,):
        self.tam_oid = tam_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_args')
        if self.tam_oid is not None:
            oprot.writeFieldBegin('tam_oid', TType.I64, 1)
            oprot.writeI64(self.tam_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_args)
sai_thrift_remove_tam_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_result)
sai_thrift_remove_tam_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_attribute_args(object):
    """
    Attributes:
     - tam_oid
     - attr

    """


    def __init__(self, tam_oid=None, attr=None,):
        self.tam_oid = tam_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_attribute_args')
        if self.tam_oid is not None:
            oprot.writeFieldBegin('tam_oid', TType.I64, 1)
            oprot.writeI64(self.tam_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_attribute_args)
sai_thrift_set_tam_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_attribute_result)
sai_thrift_set_tam_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_attribute_args(object):
    """
    Attributes:
     - tam_oid
     - attr_list

    """


    def __init__(self, tam_oid=None, attr_list=None,):
        self.tam_oid = tam_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_attribute_args')
        if self.tam_oid is not None:
            oprot.writeFieldBegin('tam_oid', TType.I64, 1)
            oprot.writeI64(self.tam_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_attribute_args)
sai_thrift_get_tam_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_attribute_result)
sai_thrift_get_tam_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_math_func_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2061, _size2058) = iprot.readListBegin()
                    for _i2062 in range(_size2058):
                        _elem2063 = sai_thrift_attribute_t()
                        _elem2063.read(iprot)
                        self.attr_list.append(_elem2063)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_math_func_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2064 in self.attr_list:
                iter2064.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_math_func_args)
sai_thrift_create_tam_math_func_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_math_func_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_math_func_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_math_func_result)
sai_thrift_create_tam_math_func_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_math_func_args(object):
    """
    Attributes:
     - tam_math_func_oid

    """


    def __init__(self, tam_math_func_oid=None,):
        self.tam_math_func_oid = tam_math_func_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_math_func_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_math_func_args')
        if self.tam_math_func_oid is not None:
            oprot.writeFieldBegin('tam_math_func_oid', TType.I64, 1)
            oprot.writeI64(self.tam_math_func_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_math_func_args)
sai_thrift_remove_tam_math_func_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_math_func_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_math_func_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_math_func_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_math_func_result)
sai_thrift_remove_tam_math_func_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_math_func_attribute_args(object):
    """
    Attributes:
     - tam_math_func_oid
     - attr_list

    """


    def __init__(self, tam_math_func_oid=None, attr_list=None,):
        self.tam_math_func_oid = tam_math_func_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_math_func_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_math_func_attribute_args')
        if self.tam_math_func_oid is not None:
            oprot.writeFieldBegin('tam_math_func_oid', TType.I64, 1)
            oprot.writeI64(self.tam_math_func_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_math_func_attribute_args)
sai_thrift_get_tam_math_func_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_math_func_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_math_func_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_math_func_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_math_func_attribute_result)
sai_thrift_get_tam_math_func_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_math_func_attribute_args(object):
    """
    Attributes:
     - tam_math_func_oid
     - attr

    """


    def __init__(self, tam_math_func_oid=None, attr=None,):
        self.tam_math_func_oid = tam_math_func_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_math_func_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_math_func_attribute_args')
        if self.tam_math_func_oid is not None:
            oprot.writeFieldBegin('tam_math_func_oid', TType.I64, 1)
            oprot.writeI64(self.tam_math_func_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_math_func_attribute_args)
sai_thrift_set_tam_math_func_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_math_func_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_math_func_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_math_func_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_math_func_attribute_result)
sai_thrift_set_tam_math_func_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_event_threshold_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2068, _size2065) = iprot.readListBegin()
                    for _i2069 in range(_size2065):
                        _elem2070 = sai_thrift_attribute_t()
                        _elem2070.read(iprot)
                        self.attr_list.append(_elem2070)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_event_threshold_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2071 in self.attr_list:
                iter2071.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_event_threshold_args)
sai_thrift_create_tam_event_threshold_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_event_threshold_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_event_threshold_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_event_threshold_result)
sai_thrift_create_tam_event_threshold_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_event_threshold_args(object):
    """
    Attributes:
     - tam_event_threshold_oid

    """


    def __init__(self, tam_event_threshold_oid=None,):
        self.tam_event_threshold_oid = tam_event_threshold_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_event_threshold_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_event_threshold_args')
        if self.tam_event_threshold_oid is not None:
            oprot.writeFieldBegin('tam_event_threshold_oid', TType.I64, 1)
            oprot.writeI64(self.tam_event_threshold_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_event_threshold_args)
sai_thrift_remove_tam_event_threshold_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_event_threshold_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_event_threshold_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_event_threshold_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_event_threshold_result)
sai_thrift_remove_tam_event_threshold_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_event_threshold_attribute_args(object):
    """
    Attributes:
     - tam_event_threshold_oid
     - attr_list

    """


    def __init__(self, tam_event_threshold_oid=None, attr_list=None,):
        self.tam_event_threshold_oid = tam_event_threshold_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_event_threshold_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_event_threshold_attribute_args')
        if self.tam_event_threshold_oid is not None:
            oprot.writeFieldBegin('tam_event_threshold_oid', TType.I64, 1)
            oprot.writeI64(self.tam_event_threshold_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_event_threshold_attribute_args)
sai_thrift_get_tam_event_threshold_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_event_threshold_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_event_threshold_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_event_threshold_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_event_threshold_attribute_result)
sai_thrift_get_tam_event_threshold_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_event_threshold_attribute_args(object):
    """
    Attributes:
     - tam_event_threshold_oid
     - attr

    """


    def __init__(self, tam_event_threshold_oid=None, attr=None,):
        self.tam_event_threshold_oid = tam_event_threshold_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_event_threshold_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_event_threshold_attribute_args')
        if self.tam_event_threshold_oid is not None:
            oprot.writeFieldBegin('tam_event_threshold_oid', TType.I64, 1)
            oprot.writeI64(self.tam_event_threshold_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_event_threshold_attribute_args)
sai_thrift_set_tam_event_threshold_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_event_threshold_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_event_threshold_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_event_threshold_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_event_threshold_attribute_result)
sai_thrift_set_tam_event_threshold_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_int_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2075, _size2072) = iprot.readListBegin()
                    for _i2076 in range(_size2072):
                        _elem2077 = sai_thrift_attribute_t()
                        _elem2077.read(iprot)
                        self.attr_list.append(_elem2077)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_int_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2078 in self.attr_list:
                iter2078.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_int_args)
sai_thrift_create_tam_int_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_int_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_int_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_int_result)
sai_thrift_create_tam_int_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_int_args(object):
    """
    Attributes:
     - tam_int_oid

    """


    def __init__(self, tam_int_oid=None,):
        self.tam_int_oid = tam_int_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_int_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_int_args')
        if self.tam_int_oid is not None:
            oprot.writeFieldBegin('tam_int_oid', TType.I64, 1)
            oprot.writeI64(self.tam_int_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_int_args)
sai_thrift_remove_tam_int_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_int_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_int_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_int_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_int_result)
sai_thrift_remove_tam_int_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_int_attribute_args(object):
    """
    Attributes:
     - tam_int_oid
     - attr_list

    """


    def __init__(self, tam_int_oid=None, attr_list=None,):
        self.tam_int_oid = tam_int_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_int_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_int_attribute_args')
        if self.tam_int_oid is not None:
            oprot.writeFieldBegin('tam_int_oid', TType.I64, 1)
            oprot.writeI64(self.tam_int_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_int_attribute_args)
sai_thrift_get_tam_int_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_int_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_int_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_int_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_int_attribute_result)
sai_thrift_get_tam_int_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_int_attribute_args(object):
    """
    Attributes:
     - tam_int_oid
     - attr

    """


    def __init__(self, tam_int_oid=None, attr=None,):
        self.tam_int_oid = tam_int_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_int_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_int_attribute_args')
        if self.tam_int_oid is not None:
            oprot.writeFieldBegin('tam_int_oid', TType.I64, 1)
            oprot.writeI64(self.tam_int_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_int_attribute_args)
sai_thrift_set_tam_int_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_int_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_int_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_int_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_int_attribute_result)
sai_thrift_set_tam_int_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_tel_type_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2082, _size2079) = iprot.readListBegin()
                    for _i2083 in range(_size2079):
                        _elem2084 = sai_thrift_attribute_t()
                        _elem2084.read(iprot)
                        self.attr_list.append(_elem2084)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_tel_type_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2085 in self.attr_list:
                iter2085.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_tel_type_args)
sai_thrift_create_tam_tel_type_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_tel_type_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_tel_type_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_tel_type_result)
sai_thrift_create_tam_tel_type_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_tel_type_args(object):
    """
    Attributes:
     - tam_tel_type_oid

    """


    def __init__(self, tam_tel_type_oid=None,):
        self.tam_tel_type_oid = tam_tel_type_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_tel_type_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_tel_type_args')
        if self.tam_tel_type_oid is not None:
            oprot.writeFieldBegin('tam_tel_type_oid', TType.I64, 1)
            oprot.writeI64(self.tam_tel_type_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_tel_type_args)
sai_thrift_remove_tam_tel_type_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_tel_type_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_tel_type_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_tel_type_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_tel_type_result)
sai_thrift_remove_tam_tel_type_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_tel_type_attribute_args(object):
    """
    Attributes:
     - tam_tel_type_oid
     - attr_list

    """


    def __init__(self, tam_tel_type_oid=None, attr_list=None,):
        self.tam_tel_type_oid = tam_tel_type_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_tel_type_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_tel_type_attribute_args')
        if self.tam_tel_type_oid is not None:
            oprot.writeFieldBegin('tam_tel_type_oid', TType.I64, 1)
            oprot.writeI64(self.tam_tel_type_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_tel_type_attribute_args)
sai_thrift_get_tam_tel_type_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_tel_type_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_tel_type_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_tel_type_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_tel_type_attribute_result)
sai_thrift_get_tam_tel_type_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_tel_type_attribute_args(object):
    """
    Attributes:
     - tam_tel_type_oid
     - attr

    """


    def __init__(self, tam_tel_type_oid=None, attr=None,):
        self.tam_tel_type_oid = tam_tel_type_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_tel_type_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_tel_type_attribute_args')
        if self.tam_tel_type_oid is not None:
            oprot.writeFieldBegin('tam_tel_type_oid', TType.I64, 1)
            oprot.writeI64(self.tam_tel_type_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_tel_type_attribute_args)
sai_thrift_set_tam_tel_type_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_tel_type_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_tel_type_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_tel_type_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_tel_type_attribute_result)
sai_thrift_set_tam_tel_type_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_report_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2089, _size2086) = iprot.readListBegin()
                    for _i2090 in range(_size2086):
                        _elem2091 = sai_thrift_attribute_t()
                        _elem2091.read(iprot)
                        self.attr_list.append(_elem2091)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_report_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2092 in self.attr_list:
                iter2092.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_report_args)
sai_thrift_create_tam_report_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_report_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_report_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_report_result)
sai_thrift_create_tam_report_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_report_args(object):
    """
    Attributes:
     - tam_report_oid

    """


    def __init__(self, tam_report_oid=None,):
        self.tam_report_oid = tam_report_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_report_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_report_args')
        if self.tam_report_oid is not None:
            oprot.writeFieldBegin('tam_report_oid', TType.I64, 1)
            oprot.writeI64(self.tam_report_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_report_args)
sai_thrift_remove_tam_report_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_report_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_report_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_report_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_report_result)
sai_thrift_remove_tam_report_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_report_attribute_args(object):
    """
    Attributes:
     - tam_report_oid
     - attr_list

    """


    def __init__(self, tam_report_oid=None, attr_list=None,):
        self.tam_report_oid = tam_report_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_report_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_report_attribute_args')
        if self.tam_report_oid is not None:
            oprot.writeFieldBegin('tam_report_oid', TType.I64, 1)
            oprot.writeI64(self.tam_report_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_report_attribute_args)
sai_thrift_get_tam_report_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_report_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_report_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_report_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_report_attribute_result)
sai_thrift_get_tam_report_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_report_attribute_args(object):
    """
    Attributes:
     - tam_report_oid
     - attr

    """


    def __init__(self, tam_report_oid=None, attr=None,):
        self.tam_report_oid = tam_report_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_report_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_report_attribute_args')
        if self.tam_report_oid is not None:
            oprot.writeFieldBegin('tam_report_oid', TType.I64, 1)
            oprot.writeI64(self.tam_report_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_report_attribute_args)
sai_thrift_set_tam_report_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_report_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_report_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_report_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_report_attribute_result)
sai_thrift_set_tam_report_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_telemetry_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2096, _size2093) = iprot.readListBegin()
                    for _i2097 in range(_size2093):
                        _elem2098 = sai_thrift_attribute_t()
                        _elem2098.read(iprot)
                        self.attr_list.append(_elem2098)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_telemetry_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2099 in self.attr_list:
                iter2099.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_telemetry_args)
sai_thrift_create_tam_telemetry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_telemetry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_telemetry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_telemetry_result)
sai_thrift_create_tam_telemetry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_telemetry_args(object):
    """
    Attributes:
     - tam_telemetry_oid

    """


    def __init__(self, tam_telemetry_oid=None,):
        self.tam_telemetry_oid = tam_telemetry_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_telemetry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_telemetry_args')
        if self.tam_telemetry_oid is not None:
            oprot.writeFieldBegin('tam_telemetry_oid', TType.I64, 1)
            oprot.writeI64(self.tam_telemetry_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_telemetry_args)
sai_thrift_remove_tam_telemetry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_telemetry_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_telemetry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_telemetry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_telemetry_result)
sai_thrift_remove_tam_telemetry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_telemetry_attribute_args(object):
    """
    Attributes:
     - tam_telemetry_oid
     - attr_list

    """


    def __init__(self, tam_telemetry_oid=None, attr_list=None,):
        self.tam_telemetry_oid = tam_telemetry_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_telemetry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_telemetry_attribute_args')
        if self.tam_telemetry_oid is not None:
            oprot.writeFieldBegin('tam_telemetry_oid', TType.I64, 1)
            oprot.writeI64(self.tam_telemetry_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_telemetry_attribute_args)
sai_thrift_get_tam_telemetry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_telemetry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_telemetry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_telemetry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_telemetry_attribute_result)
sai_thrift_get_tam_telemetry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_telemetry_attribute_args(object):
    """
    Attributes:
     - tam_telemetry_oid
     - attr

    """


    def __init__(self, tam_telemetry_oid=None, attr=None,):
        self.tam_telemetry_oid = tam_telemetry_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_telemetry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_telemetry_attribute_args')
        if self.tam_telemetry_oid is not None:
            oprot.writeFieldBegin('tam_telemetry_oid', TType.I64, 1)
            oprot.writeI64(self.tam_telemetry_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_telemetry_attribute_args)
sai_thrift_set_tam_telemetry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_telemetry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_telemetry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_telemetry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_telemetry_attribute_result)
sai_thrift_set_tam_telemetry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_transport_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2103, _size2100) = iprot.readListBegin()
                    for _i2104 in range(_size2100):
                        _elem2105 = sai_thrift_attribute_t()
                        _elem2105.read(iprot)
                        self.attr_list.append(_elem2105)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_transport_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2106 in self.attr_list:
                iter2106.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_transport_args)
sai_thrift_create_tam_transport_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_transport_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_transport_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_transport_result)
sai_thrift_create_tam_transport_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_transport_args(object):
    """
    Attributes:
     - tam_transport_oid

    """


    def __init__(self, tam_transport_oid=None,):
        self.tam_transport_oid = tam_transport_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_transport_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_transport_args')
        if self.tam_transport_oid is not None:
            oprot.writeFieldBegin('tam_transport_oid', TType.I64, 1)
            oprot.writeI64(self.tam_transport_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_transport_args)
sai_thrift_remove_tam_transport_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_transport_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_transport_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_transport_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_transport_result)
sai_thrift_remove_tam_transport_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_transport_attribute_args(object):
    """
    Attributes:
     - tam_transport_oid
     - attr_list

    """


    def __init__(self, tam_transport_oid=None, attr_list=None,):
        self.tam_transport_oid = tam_transport_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_transport_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_transport_attribute_args')
        if self.tam_transport_oid is not None:
            oprot.writeFieldBegin('tam_transport_oid', TType.I64, 1)
            oprot.writeI64(self.tam_transport_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_transport_attribute_args)
sai_thrift_get_tam_transport_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_transport_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_transport_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_transport_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_transport_attribute_result)
sai_thrift_get_tam_transport_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_transport_attribute_args(object):
    """
    Attributes:
     - tam_transport_oid
     - attr

    """


    def __init__(self, tam_transport_oid=None, attr=None,):
        self.tam_transport_oid = tam_transport_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_transport_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_transport_attribute_args')
        if self.tam_transport_oid is not None:
            oprot.writeFieldBegin('tam_transport_oid', TType.I64, 1)
            oprot.writeI64(self.tam_transport_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_transport_attribute_args)
sai_thrift_set_tam_transport_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_transport_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_transport_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_transport_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_transport_attribute_result)
sai_thrift_set_tam_transport_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_collector_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2110, _size2107) = iprot.readListBegin()
                    for _i2111 in range(_size2107):
                        _elem2112 = sai_thrift_attribute_t()
                        _elem2112.read(iprot)
                        self.attr_list.append(_elem2112)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_collector_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2113 in self.attr_list:
                iter2113.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_collector_args)
sai_thrift_create_tam_collector_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_collector_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_collector_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_collector_result)
sai_thrift_create_tam_collector_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_collector_args(object):
    """
    Attributes:
     - tam_collector_oid

    """


    def __init__(self, tam_collector_oid=None,):
        self.tam_collector_oid = tam_collector_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_collector_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_collector_args')
        if self.tam_collector_oid is not None:
            oprot.writeFieldBegin('tam_collector_oid', TType.I64, 1)
            oprot.writeI64(self.tam_collector_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_collector_args)
sai_thrift_remove_tam_collector_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_collector_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_collector_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_collector_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_collector_result)
sai_thrift_remove_tam_collector_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_collector_attribute_args(object):
    """
    Attributes:
     - tam_collector_oid
     - attr_list

    """


    def __init__(self, tam_collector_oid=None, attr_list=None,):
        self.tam_collector_oid = tam_collector_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_collector_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_collector_attribute_args')
        if self.tam_collector_oid is not None:
            oprot.writeFieldBegin('tam_collector_oid', TType.I64, 1)
            oprot.writeI64(self.tam_collector_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_collector_attribute_args)
sai_thrift_get_tam_collector_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_collector_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_collector_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_collector_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_collector_attribute_result)
sai_thrift_get_tam_collector_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_collector_attribute_args(object):
    """
    Attributes:
     - tam_collector_oid
     - attr

    """


    def __init__(self, tam_collector_oid=None, attr=None,):
        self.tam_collector_oid = tam_collector_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_collector_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_collector_attribute_args')
        if self.tam_collector_oid is not None:
            oprot.writeFieldBegin('tam_collector_oid', TType.I64, 1)
            oprot.writeI64(self.tam_collector_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_collector_attribute_args)
sai_thrift_set_tam_collector_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_collector_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_collector_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_collector_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_collector_attribute_result)
sai_thrift_set_tam_collector_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_event_action_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2117, _size2114) = iprot.readListBegin()
                    for _i2118 in range(_size2114):
                        _elem2119 = sai_thrift_attribute_t()
                        _elem2119.read(iprot)
                        self.attr_list.append(_elem2119)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_event_action_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2120 in self.attr_list:
                iter2120.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_event_action_args)
sai_thrift_create_tam_event_action_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_event_action_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_event_action_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_event_action_result)
sai_thrift_create_tam_event_action_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_event_action_args(object):
    """
    Attributes:
     - tam_event_action_oid

    """


    def __init__(self, tam_event_action_oid=None,):
        self.tam_event_action_oid = tam_event_action_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_event_action_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_event_action_args')
        if self.tam_event_action_oid is not None:
            oprot.writeFieldBegin('tam_event_action_oid', TType.I64, 1)
            oprot.writeI64(self.tam_event_action_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_event_action_args)
sai_thrift_remove_tam_event_action_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_event_action_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_event_action_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_event_action_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_event_action_result)
sai_thrift_remove_tam_event_action_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_event_action_attribute_args(object):
    """
    Attributes:
     - tam_event_action_oid
     - attr_list

    """


    def __init__(self, tam_event_action_oid=None, attr_list=None,):
        self.tam_event_action_oid = tam_event_action_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_event_action_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_event_action_attribute_args')
        if self.tam_event_action_oid is not None:
            oprot.writeFieldBegin('tam_event_action_oid', TType.I64, 1)
            oprot.writeI64(self.tam_event_action_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_event_action_attribute_args)
sai_thrift_get_tam_event_action_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_event_action_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_event_action_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_event_action_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_event_action_attribute_result)
sai_thrift_get_tam_event_action_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_event_action_attribute_args(object):
    """
    Attributes:
     - tam_event_action_oid
     - attr

    """


    def __init__(self, tam_event_action_oid=None, attr=None,):
        self.tam_event_action_oid = tam_event_action_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_event_action_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_event_action_attribute_args')
        if self.tam_event_action_oid is not None:
            oprot.writeFieldBegin('tam_event_action_oid', TType.I64, 1)
            oprot.writeI64(self.tam_event_action_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_event_action_attribute_args)
sai_thrift_set_tam_event_action_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_event_action_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_event_action_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_event_action_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_event_action_attribute_result)
sai_thrift_set_tam_event_action_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tam_event_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2124, _size2121) = iprot.readListBegin()
                    for _i2125 in range(_size2121):
                        _elem2126 = sai_thrift_attribute_t()
                        _elem2126.read(iprot)
                        self.attr_list.append(_elem2126)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_event_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2127 in self.attr_list:
                iter2127.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_event_args)
sai_thrift_create_tam_event_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tam_event_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tam_event_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tam_event_result)
sai_thrift_create_tam_event_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tam_event_args(object):
    """
    Attributes:
     - tam_event_oid

    """


    def __init__(self, tam_event_oid=None,):
        self.tam_event_oid = tam_event_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_event_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_event_args')
        if self.tam_event_oid is not None:
            oprot.writeFieldBegin('tam_event_oid', TType.I64, 1)
            oprot.writeI64(self.tam_event_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_event_args)
sai_thrift_remove_tam_event_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_event_oid', None, None, ),  # 1
)


class sai_thrift_remove_tam_event_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tam_event_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tam_event_result)
sai_thrift_remove_tam_event_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tam_event_attribute_args(object):
    """
    Attributes:
     - tam_event_oid
     - attr_list

    """


    def __init__(self, tam_event_oid=None, attr_list=None,):
        self.tam_event_oid = tam_event_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_event_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_event_attribute_args')
        if self.tam_event_oid is not None:
            oprot.writeFieldBegin('tam_event_oid', TType.I64, 1)
            oprot.writeI64(self.tam_event_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_event_attribute_args)
sai_thrift_get_tam_event_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_event_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tam_event_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tam_event_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tam_event_attribute_result)
sai_thrift_get_tam_event_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tam_event_attribute_args(object):
    """
    Attributes:
     - tam_event_oid
     - attr

    """


    def __init__(self, tam_event_oid=None, attr=None,):
        self.tam_event_oid = tam_event_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tam_event_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_event_attribute_args')
        if self.tam_event_oid is not None:
            oprot.writeFieldBegin('tam_event_oid', TType.I64, 1)
            oprot.writeI64(self.tam_event_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_event_attribute_args)
sai_thrift_set_tam_event_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tam_event_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tam_event_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tam_event_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tam_event_attribute_result)
sai_thrift_set_tam_event_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tunnel_map_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2131, _size2128) = iprot.readListBegin()
                    for _i2132 in range(_size2128):
                        _elem2133 = sai_thrift_attribute_t()
                        _elem2133.read(iprot)
                        self.attr_list.append(_elem2133)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_map_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2134 in self.attr_list:
                iter2134.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_map_args)
sai_thrift_create_tunnel_map_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tunnel_map_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_map_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_map_result)
sai_thrift_create_tunnel_map_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tunnel_map_args(object):
    """
    Attributes:
     - tunnel_map_oid

    """


    def __init__(self, tunnel_map_oid=None,):
        self.tunnel_map_oid = tunnel_map_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_map_args')
        if self.tunnel_map_oid is not None:
            oprot.writeFieldBegin('tunnel_map_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_map_args)
sai_thrift_remove_tunnel_map_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_oid', None, None, ),  # 1
)


class sai_thrift_remove_tunnel_map_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_map_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_map_result)
sai_thrift_remove_tunnel_map_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tunnel_map_attribute_args(object):
    """
    Attributes:
     - tunnel_map_oid
     - attr

    """


    def __init__(self, tunnel_map_oid=None, attr=None,):
        self.tunnel_map_oid = tunnel_map_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_map_attribute_args')
        if self.tunnel_map_oid is not None:
            oprot.writeFieldBegin('tunnel_map_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_map_attribute_args)
sai_thrift_set_tunnel_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tunnel_map_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_map_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_map_attribute_result)
sai_thrift_set_tunnel_map_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tunnel_map_attribute_args(object):
    """
    Attributes:
     - tunnel_map_oid
     - attr_list

    """


    def __init__(self, tunnel_map_oid=None, attr_list=None,):
        self.tunnel_map_oid = tunnel_map_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_map_attribute_args')
        if self.tunnel_map_oid is not None:
            oprot.writeFieldBegin('tunnel_map_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_map_attribute_args)
sai_thrift_get_tunnel_map_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tunnel_map_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_map_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_map_attribute_result)
sai_thrift_get_tunnel_map_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tunnel_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2138, _size2135) = iprot.readListBegin()
                    for _i2139 in range(_size2135):
                        _elem2140 = sai_thrift_attribute_t()
                        _elem2140.read(iprot)
                        self.attr_list.append(_elem2140)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2141 in self.attr_list:
                iter2141.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_args)
sai_thrift_create_tunnel_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tunnel_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_result)
sai_thrift_create_tunnel_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tunnel_args(object):
    """
    Attributes:
     - tunnel_oid

    """


    def __init__(self, tunnel_oid=None,):
        self.tunnel_oid = tunnel_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_args')
        if self.tunnel_oid is not None:
            oprot.writeFieldBegin('tunnel_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_args)
sai_thrift_remove_tunnel_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_oid', None, None, ),  # 1
)


class sai_thrift_remove_tunnel_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_result)
sai_thrift_remove_tunnel_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tunnel_attribute_args(object):
    """
    Attributes:
     - tunnel_oid
     - attr

    """


    def __init__(self, tunnel_oid=None, attr=None,):
        self.tunnel_oid = tunnel_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_attribute_args')
        if self.tunnel_oid is not None:
            oprot.writeFieldBegin('tunnel_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_attribute_args)
sai_thrift_set_tunnel_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tunnel_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_attribute_result)
sai_thrift_set_tunnel_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tunnel_attribute_args(object):
    """
    Attributes:
     - tunnel_oid
     - attr_list

    """


    def __init__(self, tunnel_oid=None, attr_list=None,):
        self.tunnel_oid = tunnel_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_attribute_args')
        if self.tunnel_oid is not None:
            oprot.writeFieldBegin('tunnel_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_attribute_args)
sai_thrift_get_tunnel_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tunnel_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_attribute_result)
sai_thrift_get_tunnel_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tunnel_stats_args(object):
    """
    Attributes:
     - tunnel_oid
     - counter_ids

    """


    def __init__(self, tunnel_oid=None, counter_ids=None,):
        self.tunnel_oid = tunnel_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype2145, _size2142) = iprot.readListBegin()
                    for _i2146 in range(_size2142):
                        _elem2147 = iprot.readI32()
                        self.counter_ids.append(_elem2147)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_stats_args')
        if self.tunnel_oid is not None:
            oprot.writeFieldBegin('tunnel_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter2148 in self.counter_ids:
                oprot.writeI32(iter2148)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_stats_args)
sai_thrift_get_tunnel_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_tunnel_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype2152, _size2149) = iprot.readListBegin()
                    for _i2153 in range(_size2149):
                        _elem2154 = iprot.readI64()
                        self.success.append(_elem2154)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter2155 in self.success:
                oprot.writeI64(iter2155)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_stats_result)
sai_thrift_get_tunnel_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tunnel_stats_ext_args(object):
    """
    Attributes:
     - tunnel_oid
     - counter_ids
     - mode

    """


    def __init__(self, tunnel_oid=None, counter_ids=None, mode=None,):
        self.tunnel_oid = tunnel_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype2159, _size2156) = iprot.readListBegin()
                    for _i2160 in range(_size2156):
                        _elem2161 = iprot.readI32()
                        self.counter_ids.append(_elem2161)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_stats_ext_args')
        if self.tunnel_oid is not None:
            oprot.writeFieldBegin('tunnel_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter2162 in self.counter_ids:
                oprot.writeI32(iter2162)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_stats_ext_args)
sai_thrift_get_tunnel_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_tunnel_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype2166, _size2163) = iprot.readListBegin()
                    for _i2167 in range(_size2163):
                        _elem2168 = iprot.readI64()
                        self.success.append(_elem2168)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter2169 in self.success:
                oprot.writeI64(iter2169)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_stats_ext_result)
sai_thrift_get_tunnel_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_tunnel_stats_args(object):
    """
    Attributes:
     - tunnel_oid
     - counter_ids

    """


    def __init__(self, tunnel_oid=None, counter_ids=None,):
        self.tunnel_oid = tunnel_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype2173, _size2170) = iprot.readListBegin()
                    for _i2174 in range(_size2170):
                        _elem2175 = iprot.readI32()
                        self.counter_ids.append(_elem2175)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_tunnel_stats_args')
        if self.tunnel_oid is not None:
            oprot.writeFieldBegin('tunnel_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter2176 in self.counter_ids:
                oprot.writeI32(iter2176)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_tunnel_stats_args)
sai_thrift_clear_tunnel_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_tunnel_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_tunnel_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_tunnel_stats_result)
sai_thrift_clear_tunnel_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tunnel_term_table_entry_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2180, _size2177) = iprot.readListBegin()
                    for _i2181 in range(_size2177):
                        _elem2182 = sai_thrift_attribute_t()
                        _elem2182.read(iprot)
                        self.attr_list.append(_elem2182)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_term_table_entry_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2183 in self.attr_list:
                iter2183.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_term_table_entry_args)
sai_thrift_create_tunnel_term_table_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tunnel_term_table_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_term_table_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_term_table_entry_result)
sai_thrift_create_tunnel_term_table_entry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tunnel_term_table_entry_args(object):
    """
    Attributes:
     - tunnel_term_table_entry_oid

    """


    def __init__(self, tunnel_term_table_entry_oid=None,):
        self.tunnel_term_table_entry_oid = tunnel_term_table_entry_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_term_table_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_term_table_entry_args')
        if self.tunnel_term_table_entry_oid is not None:
            oprot.writeFieldBegin('tunnel_term_table_entry_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_term_table_entry_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_term_table_entry_args)
sai_thrift_remove_tunnel_term_table_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_term_table_entry_oid', None, None, ),  # 1
)


class sai_thrift_remove_tunnel_term_table_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_term_table_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_term_table_entry_result)
sai_thrift_remove_tunnel_term_table_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tunnel_term_table_entry_attribute_args(object):
    """
    Attributes:
     - tunnel_term_table_entry_oid
     - attr

    """


    def __init__(self, tunnel_term_table_entry_oid=None, attr=None,):
        self.tunnel_term_table_entry_oid = tunnel_term_table_entry_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_term_table_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_term_table_entry_attribute_args')
        if self.tunnel_term_table_entry_oid is not None:
            oprot.writeFieldBegin('tunnel_term_table_entry_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_term_table_entry_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_term_table_entry_attribute_args)
sai_thrift_set_tunnel_term_table_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_term_table_entry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tunnel_term_table_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_term_table_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_term_table_entry_attribute_result)
sai_thrift_set_tunnel_term_table_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tunnel_term_table_entry_attribute_args(object):
    """
    Attributes:
     - tunnel_term_table_entry_oid
     - attr_list

    """


    def __init__(self, tunnel_term_table_entry_oid=None, attr_list=None,):
        self.tunnel_term_table_entry_oid = tunnel_term_table_entry_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_term_table_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_term_table_entry_attribute_args')
        if self.tunnel_term_table_entry_oid is not None:
            oprot.writeFieldBegin('tunnel_term_table_entry_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_term_table_entry_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_term_table_entry_attribute_args)
sai_thrift_get_tunnel_term_table_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_term_table_entry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tunnel_term_table_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_term_table_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_term_table_entry_attribute_result)
sai_thrift_get_tunnel_term_table_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_tunnel_map_entry_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2187, _size2184) = iprot.readListBegin()
                    for _i2188 in range(_size2184):
                        _elem2189 = sai_thrift_attribute_t()
                        _elem2189.read(iprot)
                        self.attr_list.append(_elem2189)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_map_entry_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2190 in self.attr_list:
                iter2190.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_map_entry_args)
sai_thrift_create_tunnel_map_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_tunnel_map_entry_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_tunnel_map_entry_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_tunnel_map_entry_result)
sai_thrift_create_tunnel_map_entry_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_tunnel_map_entry_args(object):
    """
    Attributes:
     - tunnel_map_entry_oid

    """


    def __init__(self, tunnel_map_entry_oid=None,):
        self.tunnel_map_entry_oid = tunnel_map_entry_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_map_entry_args')
        if self.tunnel_map_entry_oid is not None:
            oprot.writeFieldBegin('tunnel_map_entry_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_entry_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_map_entry_args)
sai_thrift_remove_tunnel_map_entry_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_entry_oid', None, None, ),  # 1
)


class sai_thrift_remove_tunnel_map_entry_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_tunnel_map_entry_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_tunnel_map_entry_result)
sai_thrift_remove_tunnel_map_entry_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_tunnel_map_entry_attribute_args(object):
    """
    Attributes:
     - tunnel_map_entry_oid
     - attr

    """


    def __init__(self, tunnel_map_entry_oid=None, attr=None,):
        self.tunnel_map_entry_oid = tunnel_map_entry_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_map_entry_attribute_args')
        if self.tunnel_map_entry_oid is not None:
            oprot.writeFieldBegin('tunnel_map_entry_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_entry_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_map_entry_attribute_args)
sai_thrift_set_tunnel_map_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_entry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_tunnel_map_entry_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_tunnel_map_entry_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_tunnel_map_entry_attribute_result)
sai_thrift_set_tunnel_map_entry_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_tunnel_map_entry_attribute_args(object):
    """
    Attributes:
     - tunnel_map_entry_oid
     - attr_list

    """


    def __init__(self, tunnel_map_entry_oid=None, attr_list=None,):
        self.tunnel_map_entry_oid = tunnel_map_entry_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.tunnel_map_entry_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_map_entry_attribute_args')
        if self.tunnel_map_entry_oid is not None:
            oprot.writeFieldBegin('tunnel_map_entry_oid', TType.I64, 1)
            oprot.writeI64(self.tunnel_map_entry_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_map_entry_attribute_args)
sai_thrift_get_tunnel_map_entry_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'tunnel_map_entry_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_tunnel_map_entry_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_tunnel_map_entry_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_tunnel_map_entry_attribute_result)
sai_thrift_get_tunnel_map_entry_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_udf_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2194, _size2191) = iprot.readListBegin()
                    for _i2195 in range(_size2191):
                        _elem2196 = sai_thrift_attribute_t()
                        _elem2196.read(iprot)
                        self.attr_list.append(_elem2196)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2197 in self.attr_list:
                iter2197.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_args)
sai_thrift_create_udf_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_udf_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_result)
sai_thrift_create_udf_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_udf_args(object):
    """
    Attributes:
     - udf_oid

    """


    def __init__(self, udf_oid=None,):
        self.udf_oid = udf_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_args')
        if self.udf_oid is not None:
            oprot.writeFieldBegin('udf_oid', TType.I64, 1)
            oprot.writeI64(self.udf_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_args)
sai_thrift_remove_udf_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_oid', None, None, ),  # 1
)


class sai_thrift_remove_udf_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_result)
sai_thrift_remove_udf_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_udf_attribute_args(object):
    """
    Attributes:
     - udf_oid
     - attr

    """


    def __init__(self, udf_oid=None, attr=None,):
        self.udf_oid = udf_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_udf_attribute_args')
        if self.udf_oid is not None:
            oprot.writeFieldBegin('udf_oid', TType.I64, 1)
            oprot.writeI64(self.udf_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_udf_attribute_args)
sai_thrift_set_udf_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_udf_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_udf_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_udf_attribute_result)
sai_thrift_set_udf_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_udf_attribute_args(object):
    """
    Attributes:
     - udf_oid
     - attr_list

    """


    def __init__(self, udf_oid=None, attr_list=None,):
        self.udf_oid = udf_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_attribute_args')
        if self.udf_oid is not None:
            oprot.writeFieldBegin('udf_oid', TType.I64, 1)
            oprot.writeI64(self.udf_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_attribute_args)
sai_thrift_get_udf_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_udf_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_attribute_result)
sai_thrift_get_udf_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_udf_match_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2201, _size2198) = iprot.readListBegin()
                    for _i2202 in range(_size2198):
                        _elem2203 = sai_thrift_attribute_t()
                        _elem2203.read(iprot)
                        self.attr_list.append(_elem2203)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_match_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2204 in self.attr_list:
                iter2204.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_match_args)
sai_thrift_create_udf_match_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_udf_match_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_match_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_match_result)
sai_thrift_create_udf_match_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_udf_match_args(object):
    """
    Attributes:
     - udf_match_oid

    """


    def __init__(self, udf_match_oid=None,):
        self.udf_match_oid = udf_match_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_match_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_match_args')
        if self.udf_match_oid is not None:
            oprot.writeFieldBegin('udf_match_oid', TType.I64, 1)
            oprot.writeI64(self.udf_match_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_match_args)
sai_thrift_remove_udf_match_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_match_oid', None, None, ),  # 1
)


class sai_thrift_remove_udf_match_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_match_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_match_result)
sai_thrift_remove_udf_match_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_udf_match_attribute_args(object):
    """
    Attributes:
     - udf_match_oid
     - attr

    """


    def __init__(self, udf_match_oid=None, attr=None,):
        self.udf_match_oid = udf_match_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_match_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_udf_match_attribute_args')
        if self.udf_match_oid is not None:
            oprot.writeFieldBegin('udf_match_oid', TType.I64, 1)
            oprot.writeI64(self.udf_match_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_udf_match_attribute_args)
sai_thrift_set_udf_match_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_match_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_udf_match_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_udf_match_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_udf_match_attribute_result)
sai_thrift_set_udf_match_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_udf_match_attribute_args(object):
    """
    Attributes:
     - udf_match_oid
     - attr_list

    """


    def __init__(self, udf_match_oid=None, attr_list=None,):
        self.udf_match_oid = udf_match_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_match_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_match_attribute_args')
        if self.udf_match_oid is not None:
            oprot.writeFieldBegin('udf_match_oid', TType.I64, 1)
            oprot.writeI64(self.udf_match_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_match_attribute_args)
sai_thrift_get_udf_match_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_match_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_udf_match_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_match_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_match_attribute_result)
sai_thrift_get_udf_match_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_udf_group_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2208, _size2205) = iprot.readListBegin()
                    for _i2209 in range(_size2205):
                        _elem2210 = sai_thrift_attribute_t()
                        _elem2210.read(iprot)
                        self.attr_list.append(_elem2210)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_group_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2211 in self.attr_list:
                iter2211.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_group_args)
sai_thrift_create_udf_group_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_udf_group_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_udf_group_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_udf_group_result)
sai_thrift_create_udf_group_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_udf_group_args(object):
    """
    Attributes:
     - udf_group_oid

    """


    def __init__(self, udf_group_oid=None,):
        self.udf_group_oid = udf_group_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_group_args')
        if self.udf_group_oid is not None:
            oprot.writeFieldBegin('udf_group_oid', TType.I64, 1)
            oprot.writeI64(self.udf_group_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_group_args)
sai_thrift_remove_udf_group_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_group_oid', None, None, ),  # 1
)


class sai_thrift_remove_udf_group_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_udf_group_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_udf_group_result)
sai_thrift_remove_udf_group_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_udf_group_attribute_args(object):
    """
    Attributes:
     - udf_group_oid
     - attr

    """


    def __init__(self, udf_group_oid=None, attr=None,):
        self.udf_group_oid = udf_group_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_udf_group_attribute_args')
        if self.udf_group_oid is not None:
            oprot.writeFieldBegin('udf_group_oid', TType.I64, 1)
            oprot.writeI64(self.udf_group_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_udf_group_attribute_args)
sai_thrift_set_udf_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_udf_group_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_udf_group_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_udf_group_attribute_result)
sai_thrift_set_udf_group_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_udf_group_attribute_args(object):
    """
    Attributes:
     - udf_group_oid
     - attr_list

    """


    def __init__(self, udf_group_oid=None, attr_list=None,):
        self.udf_group_oid = udf_group_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.udf_group_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_group_attribute_args')
        if self.udf_group_oid is not None:
            oprot.writeFieldBegin('udf_group_oid', TType.I64, 1)
            oprot.writeI64(self.udf_group_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_group_attribute_args)
sai_thrift_get_udf_group_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'udf_group_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_udf_group_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_udf_group_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_udf_group_attribute_result)
sai_thrift_get_udf_group_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_virtual_router_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2215, _size2212) = iprot.readListBegin()
                    for _i2216 in range(_size2212):
                        _elem2217 = sai_thrift_attribute_t()
                        _elem2217.read(iprot)
                        self.attr_list.append(_elem2217)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_virtual_router_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2218 in self.attr_list:
                iter2218.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_virtual_router_args)
sai_thrift_create_virtual_router_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_virtual_router_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_virtual_router_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_virtual_router_result)
sai_thrift_create_virtual_router_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_virtual_router_args(object):
    """
    Attributes:
     - virtual_router_oid

    """


    def __init__(self, virtual_router_oid=None,):
        self.virtual_router_oid = virtual_router_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.virtual_router_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_virtual_router_args')
        if self.virtual_router_oid is not None:
            oprot.writeFieldBegin('virtual_router_oid', TType.I64, 1)
            oprot.writeI64(self.virtual_router_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_virtual_router_args)
sai_thrift_remove_virtual_router_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'virtual_router_oid', None, None, ),  # 1
)


class sai_thrift_remove_virtual_router_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_virtual_router_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_virtual_router_result)
sai_thrift_remove_virtual_router_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_virtual_router_attribute_args(object):
    """
    Attributes:
     - virtual_router_oid
     - attr

    """


    def __init__(self, virtual_router_oid=None, attr=None,):
        self.virtual_router_oid = virtual_router_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.virtual_router_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_virtual_router_attribute_args')
        if self.virtual_router_oid is not None:
            oprot.writeFieldBegin('virtual_router_oid', TType.I64, 1)
            oprot.writeI64(self.virtual_router_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_virtual_router_attribute_args)
sai_thrift_set_virtual_router_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'virtual_router_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_virtual_router_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_virtual_router_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_virtual_router_attribute_result)
sai_thrift_set_virtual_router_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_virtual_router_attribute_args(object):
    """
    Attributes:
     - virtual_router_oid
     - attr_list

    """


    def __init__(self, virtual_router_oid=None, attr_list=None,):
        self.virtual_router_oid = virtual_router_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.virtual_router_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_virtual_router_attribute_args')
        if self.virtual_router_oid is not None:
            oprot.writeFieldBegin('virtual_router_oid', TType.I64, 1)
            oprot.writeI64(self.virtual_router_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_virtual_router_attribute_args)
sai_thrift_get_virtual_router_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'virtual_router_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_virtual_router_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_virtual_router_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_virtual_router_attribute_result)
sai_thrift_get_virtual_router_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_vlan_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2222, _size2219) = iprot.readListBegin()
                    for _i2223 in range(_size2219):
                        _elem2224 = sai_thrift_attribute_t()
                        _elem2224.read(iprot)
                        self.attr_list.append(_elem2224)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2225 in self.attr_list:
                iter2225.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_args)
sai_thrift_create_vlan_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_vlan_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_result)
sai_thrift_create_vlan_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_vlan_args(object):
    """
    Attributes:
     - vlan_oid

    """


    def __init__(self, vlan_oid=None,):
        self.vlan_oid = vlan_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_args')
        if self.vlan_oid is not None:
            oprot.writeFieldBegin('vlan_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_args)
sai_thrift_remove_vlan_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_oid', None, None, ),  # 1
)


class sai_thrift_remove_vlan_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_result)
sai_thrift_remove_vlan_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_vlan_attribute_args(object):
    """
    Attributes:
     - vlan_oid
     - attr

    """


    def __init__(self, vlan_oid=None, attr=None,):
        self.vlan_oid = vlan_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_vlan_attribute_args')
        if self.vlan_oid is not None:
            oprot.writeFieldBegin('vlan_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_vlan_attribute_args)
sai_thrift_set_vlan_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_vlan_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_vlan_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_vlan_attribute_result)
sai_thrift_set_vlan_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_vlan_attribute_args(object):
    """
    Attributes:
     - vlan_oid
     - attr_list

    """


    def __init__(self, vlan_oid=None, attr_list=None,):
        self.vlan_oid = vlan_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_attribute_args')
        if self.vlan_oid is not None:
            oprot.writeFieldBegin('vlan_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_attribute_args)
sai_thrift_get_vlan_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_vlan_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_attribute_result)
sai_thrift_get_vlan_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_vlan_member_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2229, _size2226) = iprot.readListBegin()
                    for _i2230 in range(_size2226):
                        _elem2231 = sai_thrift_attribute_t()
                        _elem2231.read(iprot)
                        self.attr_list.append(_elem2231)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_member_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2232 in self.attr_list:
                iter2232.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_member_args)
sai_thrift_create_vlan_member_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_vlan_member_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_vlan_member_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_vlan_member_result)
sai_thrift_create_vlan_member_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_vlan_member_args(object):
    """
    Attributes:
     - vlan_member_oid

    """


    def __init__(self, vlan_member_oid=None,):
        self.vlan_member_oid = vlan_member_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_member_args')
        if self.vlan_member_oid is not None:
            oprot.writeFieldBegin('vlan_member_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_member_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_member_args)
sai_thrift_remove_vlan_member_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_member_oid', None, None, ),  # 1
)


class sai_thrift_remove_vlan_member_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_vlan_member_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_vlan_member_result)
sai_thrift_remove_vlan_member_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_vlan_member_attribute_args(object):
    """
    Attributes:
     - vlan_member_oid
     - attr

    """


    def __init__(self, vlan_member_oid=None, attr=None,):
        self.vlan_member_oid = vlan_member_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_vlan_member_attribute_args')
        if self.vlan_member_oid is not None:
            oprot.writeFieldBegin('vlan_member_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_member_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_vlan_member_attribute_args)
sai_thrift_set_vlan_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_vlan_member_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_vlan_member_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_vlan_member_attribute_result)
sai_thrift_set_vlan_member_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_vlan_member_attribute_args(object):
    """
    Attributes:
     - vlan_member_oid
     - attr_list

    """


    def __init__(self, vlan_member_oid=None, attr_list=None,):
        self.vlan_member_oid = vlan_member_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_member_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_member_attribute_args')
        if self.vlan_member_oid is not None:
            oprot.writeFieldBegin('vlan_member_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_member_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_member_attribute_args)
sai_thrift_get_vlan_member_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_member_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_vlan_member_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_member_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_member_attribute_result)
sai_thrift_get_vlan_member_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_vlan_stats_args(object):
    """
    Attributes:
     - vlan_oid
     - counter_ids

    """


    def __init__(self, vlan_oid=None, counter_ids=None,):
        self.vlan_oid = vlan_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype2236, _size2233) = iprot.readListBegin()
                    for _i2237 in range(_size2233):
                        _elem2238 = iprot.readI32()
                        self.counter_ids.append(_elem2238)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_stats_args')
        if self.vlan_oid is not None:
            oprot.writeFieldBegin('vlan_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter2239 in self.counter_ids:
                oprot.writeI32(iter2239)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_stats_args)
sai_thrift_get_vlan_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_get_vlan_stats_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype2243, _size2240) = iprot.readListBegin()
                    for _i2244 in range(_size2240):
                        _elem2245 = iprot.readI64()
                        self.success.append(_elem2245)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_stats_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter2246 in self.success:
                oprot.writeI64(iter2246)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_stats_result)
sai_thrift_get_vlan_stats_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_vlan_stats_ext_args(object):
    """
    Attributes:
     - vlan_oid
     - counter_ids
     - mode

    """


    def __init__(self, vlan_oid=None, counter_ids=None, mode=None,):
        self.vlan_oid = vlan_oid
        self.counter_ids = counter_ids
        self.mode = mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype2250, _size2247) = iprot.readListBegin()
                    for _i2251 in range(_size2247):
                        _elem2252 = iprot.readI32()
                        self.counter_ids.append(_elem2252)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_stats_ext_args')
        if self.vlan_oid is not None:
            oprot.writeFieldBegin('vlan_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter2253 in self.counter_ids:
                oprot.writeI32(iter2253)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 3)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_stats_ext_args)
sai_thrift_get_vlan_stats_ext_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'mode', None, None, ),  # 3
)


class sai_thrift_get_vlan_stats_ext_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype2257, _size2254) = iprot.readListBegin()
                    for _i2258 in range(_size2254):
                        _elem2259 = iprot.readI64()
                        self.success.append(_elem2259)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_vlan_stats_ext_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I64, len(self.success))
            for iter2260 in self.success:
                oprot.writeI64(iter2260)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_vlan_stats_ext_result)
sai_thrift_get_vlan_stats_ext_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64, None, False), None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_clear_vlan_stats_args(object):
    """
    Attributes:
     - vlan_oid
     - counter_ids

    """


    def __init__(self, vlan_oid=None, counter_ids=None,):
        self.vlan_oid = vlan_oid
        self.counter_ids = counter_ids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.vlan_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.counter_ids = []
                    (_etype2264, _size2261) = iprot.readListBegin()
                    for _i2265 in range(_size2261):
                        _elem2266 = iprot.readI32()
                        self.counter_ids.append(_elem2266)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_vlan_stats_args')
        if self.vlan_oid is not None:
            oprot.writeFieldBegin('vlan_oid', TType.I64, 1)
            oprot.writeI64(self.vlan_oid)
            oprot.writeFieldEnd()
        if self.counter_ids is not None:
            oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.counter_ids))
            for iter2267 in self.counter_ids:
                oprot.writeI32(iter2267)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_vlan_stats_args)
sai_thrift_clear_vlan_stats_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'vlan_oid', None, None, ),  # 1
    (2, TType.LIST, 'counter_ids', (TType.I32, None, False), None, ),  # 2
)


class sai_thrift_clear_vlan_stats_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_clear_vlan_stats_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_clear_vlan_stats_result)
sai_thrift_clear_vlan_stats_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_create_wred_args(object):
    """
    Attributes:
     - attr_list

    """


    def __init__(self, attr_list=None,):
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.attr_list = []
                    (_etype2271, _size2268) = iprot.readListBegin()
                    for _i2272 in range(_size2268):
                        _elem2273 = sai_thrift_attribute_t()
                        _elem2273.read(iprot)
                        self.attr_list.append(_elem2273)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_wred_args')
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
            for iter2274 in self.attr_list:
                iter2274.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_wred_args)
sai_thrift_create_wred_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT, [sai_thrift_attribute_t, None], False), None, ),  # 1
)


class sai_thrift_create_wred_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_create_wred_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_create_wred_result)
sai_thrift_create_wred_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_remove_wred_args(object):
    """
    Attributes:
     - wred_oid

    """


    def __init__(self, wred_oid=None,):
        self.wred_oid = wred_oid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.wred_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_wred_args')
        if self.wred_oid is not None:
            oprot.writeFieldBegin('wred_oid', TType.I64, 1)
            oprot.writeI64(self.wred_oid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_wred_args)
sai_thrift_remove_wred_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'wred_oid', None, None, ),  # 1
)


class sai_thrift_remove_wred_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_remove_wred_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_remove_wred_result)
sai_thrift_remove_wred_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_set_wred_attribute_args(object):
    """
    Attributes:
     - wred_oid
     - attr

    """


    def __init__(self, wred_oid=None, attr=None,):
        self.wred_oid = wred_oid
        self.attr = attr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.wred_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr = sai_thrift_attribute_t()
                    self.attr.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_wred_attribute_args')
        if self.wred_oid is not None:
            oprot.writeFieldBegin('wred_oid', TType.I64, 1)
            oprot.writeI64(self.wred_oid)
            oprot.writeFieldEnd()
        if self.attr is not None:
            oprot.writeFieldBegin('attr', TType.STRUCT, 2)
            self.attr.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_wred_attribute_args)
sai_thrift_set_wred_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'wred_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr', [sai_thrift_attribute_t, None], None, ),  # 2
)


class sai_thrift_set_wred_attribute_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_set_wred_attribute_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_set_wred_attribute_result)
sai_thrift_set_wred_attribute_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_get_wred_attribute_args(object):
    """
    Attributes:
     - wred_oid
     - attr_list

    """


    def __init__(self, wred_oid=None, attr_list=None,):
        self.wred_oid = wred_oid
        self.attr_list = attr_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.wred_oid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.attr_list = sai_thrift_attribute_list_t()
                    self.attr_list.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_wred_attribute_args')
        if self.wred_oid is not None:
            oprot.writeFieldBegin('wred_oid', TType.I64, 1)
            oprot.writeI64(self.wred_oid)
            oprot.writeFieldEnd()
        if self.attr_list is not None:
            oprot.writeFieldBegin('attr_list', TType.STRUCT, 2)
            self.attr_list.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_wred_attribute_args)
sai_thrift_get_wred_attribute_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'wred_oid', None, None, ),  # 1
    (2, TType.STRUCT, 'attr_list', [sai_thrift_attribute_list_t, None], None, ),  # 2
)


class sai_thrift_get_wred_attribute_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = sai_thrift_attribute_list_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = sai_thrift_exception()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_get_wred_attribute_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_get_wred_attribute_result)
sai_thrift_get_wred_attribute_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [sai_thrift_attribute_list_t, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [sai_thrift_exception, None], None, ),  # 1
)


class sai_thrift_query_attribute_enum_values_capability_args(object):
    """
    Attributes:
     - object_type
     - attr_id
     - caps_count

    """


    def __init__(self, object_type=None, attr_id=None, caps_count=None,):
        self.object_type = object_type
        self.attr_id = attr_id
        self.caps_count = caps_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.object_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attr_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.caps_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_query_attribute_enum_values_capability_args')
        if self.object_type is not None:
            oprot.writeFieldBegin('object_type', TType.I32, 1)
            oprot.writeI32(self.object_type)
            oprot.writeFieldEnd()
        if self.attr_id is not None:
            oprot.writeFieldBegin('attr_id', TType.I32, 2)
            oprot.writeI32(self.attr_id)
            oprot.writeFieldEnd()
        if self.caps_count is not None:
            oprot.writeFieldBegin('caps_count', TType.I32, 3)
            oprot.writeI32(self.caps_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_query_attribute_enum_values_capability_args)
sai_thrift_query_attribute_enum_values_capability_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'object_type', None, None, ),  # 1
    (2, TType.I32, 'attr_id', None, None, ),  # 2
    (3, TType.I32, 'caps_count', None, None, ),  # 3
)


class sai_thrift_query_attribute_enum_values_capability_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype2278, _size2275) = iprot.readListBegin()
                    for _i2279 in range(_size2275):
                        _elem2280 = iprot.readI32()
                        self.success.append(_elem2280)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_query_attribute_enum_values_capability_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.I32, len(self.success))
            for iter2281 in self.success:
                oprot.writeI32(iter2281)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_query_attribute_enum_values_capability_result)
sai_thrift_query_attribute_enum_values_capability_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.I32, None, False), None, ),  # 0
)


class sai_thrift_object_type_get_availability_args(object):
    """
    Attributes:
     - object_type
     - attr_id
     - attr_type

    """


    def __init__(self, object_type=None, attr_id=None, attr_type=None,):
        self.object_type = object_type
        self.attr_id = attr_id
        self.attr_type = attr_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.object_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attr_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.attr_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_type_get_availability_args')
        if self.object_type is not None:
            oprot.writeFieldBegin('object_type', TType.I32, 1)
            oprot.writeI32(self.object_type)
            oprot.writeFieldEnd()
        if self.attr_id is not None:
            oprot.writeFieldBegin('attr_id', TType.I32, 2)
            oprot.writeI32(self.attr_id)
            oprot.writeFieldEnd()
        if self.attr_type is not None:
            oprot.writeFieldBegin('attr_type', TType.I32, 3)
            oprot.writeI32(self.attr_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_object_type_get_availability_args)
sai_thrift_object_type_get_availability_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'object_type', None, None, ),  # 1
    (2, TType.I32, 'attr_id', None, None, ),  # 2
    (3, TType.I32, 'attr_type', None, None, ),  # 3
)


class sai_thrift_object_type_get_availability_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_type_get_availability_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_object_type_get_availability_result)
sai_thrift_object_type_get_availability_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_switch_id_query_args(object):
    """
    Attributes:
     - object_id

    """


    def __init__(self, object_id=None,):
        self.object_id = object_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.object_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_id_query_args')
        if self.object_id is not None:
            oprot.writeFieldBegin('object_id', TType.I64, 1)
            oprot.writeI64(self.object_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_id_query_args)
sai_thrift_switch_id_query_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'object_id', None, None, ),  # 1
)


class sai_thrift_switch_id_query_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_switch_id_query_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_switch_id_query_result)
sai_thrift_switch_id_query_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
)


class sai_thrift_object_type_query_args(object):
    """
    Attributes:
     - object_id

    """


    def __init__(self, object_id=None,):
        self.object_id = object_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.object_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_type_query_args')
        if self.object_id is not None:
            oprot.writeFieldBegin('object_id', TType.I64, 1)
            oprot.writeI64(self.object_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_object_type_query_args)
sai_thrift_object_type_query_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'object_id', None, None, ),  # 1
)


class sai_thrift_object_type_query_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_object_type_query_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_object_type_query_result)
sai_thrift_object_type_query_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sai_thrift_api_uninitialize_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_api_uninitialize_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_api_uninitialize_args)
sai_thrift_api_uninitialize_args.thrift_spec = (
)


class sai_thrift_api_uninitialize_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sai_thrift_api_uninitialize_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sai_thrift_api_uninitialize_result)
sai_thrift_api_uninitialize_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)
fix_spec(all_structs)
del all_structs

